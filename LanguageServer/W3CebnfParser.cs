//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from W3CebnfParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LanguageServer {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class W3CebnfParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		PPEQ=1, Q=2, VP=3, M=4, P=5, S=6, OP=7, CP=8, CONSTRAINT=9, COMMENT=10, 
		HEX=11, STRING=12, SET=13, SYMBOL=14, WS=15;
	public const int
		RULE_prods = 0, RULE_prod = 1, RULE_lhs = 2, RULE_rhs = 3, RULE_symbol = 4, 
		RULE_alts = 5, RULE_alt = 6, RULE_element = 7, RULE_block = 8, RULE_atom = 9, 
		RULE_suffix = 10;
	public static readonly string[] ruleNames = {
		"prods", "prod", "lhs", "rhs", "symbol", "alts", "alt", "element", "block", 
		"atom", "suffix"
	};

	private static readonly string[] _LiteralNames = {
		null, "'::='", "'?'", "'|'", "'-'", "'+'", "'*'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "PPEQ", "Q", "VP", "M", "P", "S", "OP", "CP", "CONSTRAINT", "COMMENT", 
		"HEX", "STRING", "SET", "SYMBOL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "W3CebnfParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static W3CebnfParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public W3CebnfParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public W3CebnfParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProdsContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(W3CebnfParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProdContext[] prod() {
			return GetRuleContexts<ProdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProdContext prod(int i) {
			return GetRuleContext<ProdContext>(i);
		}
		public ProdsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prods; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IW3CebnfParserListener typedListener = listener as IW3CebnfParserListener;
			if (typedListener != null) typedListener.EnterProds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IW3CebnfParserListener typedListener = listener as IW3CebnfParserListener;
			if (typedListener != null) typedListener.ExitProds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IW3CebnfParserVisitor<TResult> typedVisitor = visitor as IW3CebnfParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProds(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProdsContext prods() {
		ProdsContext _localctx = new ProdsContext(Context, State);
		EnterRule(_localctx, 0, RULE_prods);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 22;
				prod();
				}
				}
				State = 25;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SYMBOL );
			State = 27;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProdContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public LhsContext lhs() {
			return GetRuleContext<LhsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PPEQ() { return GetToken(W3CebnfParser.PPEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RhsContext rhs() {
			return GetRuleContext<RhsContext>(0);
		}
		public ProdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IW3CebnfParserListener typedListener = listener as IW3CebnfParserListener;
			if (typedListener != null) typedListener.EnterProd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IW3CebnfParserListener typedListener = listener as IW3CebnfParserListener;
			if (typedListener != null) typedListener.ExitProd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IW3CebnfParserVisitor<TResult> typedVisitor = visitor as IW3CebnfParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProdContext prod() {
		ProdContext _localctx = new ProdContext(Context, State);
		EnterRule(_localctx, 2, RULE_prod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			lhs();
			State = 30;
			Match(PPEQ);
			State = 31;
			rhs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LhsContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		public LhsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lhs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IW3CebnfParserListener typedListener = listener as IW3CebnfParserListener;
			if (typedListener != null) typedListener.EnterLhs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IW3CebnfParserListener typedListener = listener as IW3CebnfParserListener;
			if (typedListener != null) typedListener.ExitLhs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IW3CebnfParserVisitor<TResult> typedVisitor = visitor as IW3CebnfParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLhs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LhsContext lhs() {
		LhsContext _localctx = new LhsContext(Context, State);
		EnterRule(_localctx, 4, RULE_lhs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			symbol();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RhsContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public AltsContext alts() {
			return GetRuleContext<AltsContext>(0);
		}
		public RhsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rhs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IW3CebnfParserListener typedListener = listener as IW3CebnfParserListener;
			if (typedListener != null) typedListener.EnterRhs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IW3CebnfParserListener typedListener = listener as IW3CebnfParserListener;
			if (typedListener != null) typedListener.ExitRhs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IW3CebnfParserVisitor<TResult> typedVisitor = visitor as IW3CebnfParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRhs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RhsContext rhs() {
		RhsContext _localctx = new RhsContext(Context, State);
		EnterRule(_localctx, 6, RULE_rhs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			alts();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMBOL() { return GetToken(W3CebnfParser.SYMBOL, 0); }
		public SymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IW3CebnfParserListener typedListener = listener as IW3CebnfParserListener;
			if (typedListener != null) typedListener.EnterSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IW3CebnfParserListener typedListener = listener as IW3CebnfParserListener;
			if (typedListener != null) typedListener.ExitSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IW3CebnfParserVisitor<TResult> typedVisitor = visitor as IW3CebnfParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolContext symbol() {
		SymbolContext _localctx = new SymbolContext(Context, State);
		EnterRule(_localctx, 8, RULE_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			Match(SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltsContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public AltContext[] alt() {
			return GetRuleContexts<AltContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltContext alt(int i) {
			return GetRuleContext<AltContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VP() { return GetTokens(W3CebnfParser.VP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VP(int i) {
			return GetToken(W3CebnfParser.VP, i);
		}
		public AltsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alts; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IW3CebnfParserListener typedListener = listener as IW3CebnfParserListener;
			if (typedListener != null) typedListener.EnterAlts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IW3CebnfParserListener typedListener = listener as IW3CebnfParserListener;
			if (typedListener != null) typedListener.ExitAlts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IW3CebnfParserVisitor<TResult> typedVisitor = visitor as IW3CebnfParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AltsContext alts() {
		AltsContext _localctx = new AltsContext(Context, State);
		EnterRule(_localctx, 10, RULE_alts);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			alt();
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==VP) {
				{
				{
				State = 40;
				Match(VP);
				State = 41;
				alt();
				}
				}
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public AltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IW3CebnfParserListener typedListener = listener as IW3CebnfParserListener;
			if (typedListener != null) typedListener.EnterAlt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IW3CebnfParserListener typedListener = listener as IW3CebnfParserListener;
			if (typedListener != null) typedListener.ExitAlt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IW3CebnfParserVisitor<TResult> typedVisitor = visitor as IW3CebnfParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AltContext alt() {
		AltContext _localctx = new AltContext(Context, State);
		EnterRule(_localctx, 12, RULE_alt);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 47;
					element();
					}
					} 
				}
				State = 52;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] M() { return GetTokens(W3CebnfParser.M); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode M(int i) {
			return GetToken(W3CebnfParser.M, i);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IW3CebnfParserListener typedListener = listener as IW3CebnfParserListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IW3CebnfParserListener typedListener = listener as IW3CebnfParserListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IW3CebnfParserVisitor<TResult> typedVisitor = visitor as IW3CebnfParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 14, RULE_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			block();
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==M) {
				{
				{
				State = 54;
				Match(M);
				State = 55;
				block();
				}
				}
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuffixContext suffix() {
			return GetRuleContext<SuffixContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IW3CebnfParserListener typedListener = listener as IW3CebnfParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IW3CebnfParserListener typedListener = listener as IW3CebnfParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IW3CebnfParserVisitor<TResult> typedVisitor = visitor as IW3CebnfParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 16, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			atom();
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Q) | (1L << P) | (1L << S))) != 0)) {
				{
				State = 62;
				suffix();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(W3CebnfParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(W3CebnfParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP() { return GetToken(W3CebnfParser.OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AltsContext alts() {
			return GetRuleContext<AltsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP() { return GetToken(W3CebnfParser.CP, 0); }
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IW3CebnfParserListener typedListener = listener as IW3CebnfParserListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IW3CebnfParserListener typedListener = listener as IW3CebnfParserListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IW3CebnfParserVisitor<TResult> typedVisitor = visitor as IW3CebnfParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 18, RULE_atom);
		try {
			State = 72;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 65;
				symbol();
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 66;
				Match(SET);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 67;
				Match(STRING);
				}
				break;
			case OP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 68;
				Match(OP);
				State = 69;
				alts();
				State = 70;
				Match(CP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuffixContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Q() { return GetTokens(W3CebnfParser.Q); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q(int i) {
			return GetToken(W3CebnfParser.Q, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode S() { return GetToken(W3CebnfParser.S, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode P() { return GetToken(W3CebnfParser.P, 0); }
		public SuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_suffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IW3CebnfParserListener typedListener = listener as IW3CebnfParserListener;
			if (typedListener != null) typedListener.EnterSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IW3CebnfParserListener typedListener = listener as IW3CebnfParserListener;
			if (typedListener != null) typedListener.ExitSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IW3CebnfParserVisitor<TResult> typedVisitor = visitor as IW3CebnfParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuffixContext suffix() {
		SuffixContext _localctx = new SuffixContext(Context, State);
		EnterRule(_localctx, 20, RULE_suffix);
		int _la;
		try {
			State = 86;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Q:
				EnterOuterAlt(_localctx, 1);
				{
				State = 74;
				Match(Q);
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Q) {
					{
					State = 75;
					Match(Q);
					}
				}

				}
				break;
			case S:
				EnterOuterAlt(_localctx, 2);
				{
				State = 78;
				Match(S);
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Q) {
					{
					State = 79;
					Match(Q);
					}
				}

				}
				break;
			case P:
				EnterOuterAlt(_localctx, 3);
				{
				State = 82;
				Match(P);
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Q) {
					{
					State = 83;
					Match(Q);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,15,89,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,4,0,24,8,0,11,0,12,0,25,1,0,1,0,1,1,
		1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,5,5,43,8,5,10,5,12,5,46,
		9,5,1,6,5,6,49,8,6,10,6,12,6,52,9,6,1,7,1,7,1,7,5,7,57,8,7,10,7,12,7,60,
		9,7,1,8,1,8,3,8,64,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,73,8,9,1,10,1,10,
		3,10,77,8,10,1,10,1,10,3,10,81,8,10,1,10,1,10,3,10,85,8,10,3,10,87,8,10,
		1,10,0,0,11,0,2,4,6,8,10,12,14,16,18,20,0,0,90,0,23,1,0,0,0,2,29,1,0,0,
		0,4,33,1,0,0,0,6,35,1,0,0,0,8,37,1,0,0,0,10,39,1,0,0,0,12,50,1,0,0,0,14,
		53,1,0,0,0,16,61,1,0,0,0,18,72,1,0,0,0,20,86,1,0,0,0,22,24,3,2,1,0,23,
		22,1,0,0,0,24,25,1,0,0,0,25,23,1,0,0,0,25,26,1,0,0,0,26,27,1,0,0,0,27,
		28,5,0,0,1,28,1,1,0,0,0,29,30,3,4,2,0,30,31,5,1,0,0,31,32,3,6,3,0,32,3,
		1,0,0,0,33,34,3,8,4,0,34,5,1,0,0,0,35,36,3,10,5,0,36,7,1,0,0,0,37,38,5,
		14,0,0,38,9,1,0,0,0,39,44,3,12,6,0,40,41,5,3,0,0,41,43,3,12,6,0,42,40,
		1,0,0,0,43,46,1,0,0,0,44,42,1,0,0,0,44,45,1,0,0,0,45,11,1,0,0,0,46,44,
		1,0,0,0,47,49,3,14,7,0,48,47,1,0,0,0,49,52,1,0,0,0,50,48,1,0,0,0,50,51,
		1,0,0,0,51,13,1,0,0,0,52,50,1,0,0,0,53,58,3,16,8,0,54,55,5,4,0,0,55,57,
		3,16,8,0,56,54,1,0,0,0,57,60,1,0,0,0,58,56,1,0,0,0,58,59,1,0,0,0,59,15,
		1,0,0,0,60,58,1,0,0,0,61,63,3,18,9,0,62,64,3,20,10,0,63,62,1,0,0,0,63,
		64,1,0,0,0,64,17,1,0,0,0,65,73,3,8,4,0,66,73,5,13,0,0,67,73,5,12,0,0,68,
		69,5,7,0,0,69,70,3,10,5,0,70,71,5,8,0,0,71,73,1,0,0,0,72,65,1,0,0,0,72,
		66,1,0,0,0,72,67,1,0,0,0,72,68,1,0,0,0,73,19,1,0,0,0,74,76,5,2,0,0,75,
		77,5,2,0,0,76,75,1,0,0,0,76,77,1,0,0,0,77,87,1,0,0,0,78,80,5,6,0,0,79,
		81,5,2,0,0,80,79,1,0,0,0,80,81,1,0,0,0,81,87,1,0,0,0,82,84,5,5,0,0,83,
		85,5,2,0,0,84,83,1,0,0,0,84,85,1,0,0,0,85,87,1,0,0,0,86,74,1,0,0,0,86,
		78,1,0,0,0,86,82,1,0,0,0,87,21,1,0,0,0,10,25,44,50,58,63,72,76,80,84,86
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace LanguageServer
