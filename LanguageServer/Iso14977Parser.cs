//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Iso14977Parser.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LanguageServer {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class Iso14977Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Al=1, Bl=2, Cl=3, Dl=4, El=5, Fl=6, Gl=7, Hl=8, Il=9, Jl=10, Kl=11, Ll=12, 
		Ml=13, Nl=14, Ol=15, Pl=16, Ql=17, Rl=18, Sl=19, Tl=20, Ul=21, Vl=22, 
		Wl=23, Xl=24, Yl=25, Zl=26, Au=27, Bu=28, Cu=29, Du=30, Eu=31, Fu=32, 
		Gu=33, Hu=34, Iu=35, Ju=36, Ku=37, Lu=38, Mu=39, Nu=40, Ou=41, Pu=42, 
		Qu=43, Ru=44, Su=45, Tu=46, Uu=47, Vu=48, Wu=49, Xu=50, Yu=51, Zu=52, 
		N0=53, N1=54, N2=55, N3=56, N4=57, N5=58, N6=59, N7=60, N8=61, N9=62, 
		COMMA=63, EQUAL=64, VBAR=65, FSLASH=66, EXCL=67, STARCP=68, CP=69, CB=70, 
		FSLASH_CP=71, CC=72, COLONCP=73, HYPHEN=74, SQ=75, FSQ=76, STAR=77, DQ=78, 
		QM=79, OPSTAR=80, OP=81, OB=82, CPSLASH=83, OC=84, OPCOLON=85, SEMI=86, 
		DOT=87, SPACE=88, COLON=89, PLUS=90, UNDERSCORE=91, PERCENT=92, AT=93, 
		AMP=94, POUND=95, DOLLAR=96, LT=97, GT=98, BSLASH=99, XOR=100, BQUOTE=101, 
		TILDE=102, TAB=103, NL=104, LF=105;
	public const int
		RULE_letter = 0, RULE_decimal_digit = 1, RULE_concatenate_symbol = 2, 
		RULE_defining_symbol = 3, RULE_definition_separator_symbol = 4, RULE_end_comment_symbol = 5, 
		RULE_end_group_symbol = 6, RULE_end_option_symbol = 7, RULE_end_repeat_symbol = 8, 
		RULE_except_symbol = 9, RULE_first_quote_symbol = 10, RULE_repetition_symbol = 11, 
		RULE_second_quote_symbol = 12, RULE_special_sequence_symbol = 13, RULE_start_comment_symbol = 14, 
		RULE_start_group_symbol = 15, RULE_start_option_symbol = 16, RULE_start_repeat_symbol = 17, 
		RULE_terminator_symbol = 18, RULE_other_character = 19, RULE_space_character = 20, 
		RULE_horizontal_tabulation_character = 21, RULE_new_line = 22, RULE_vertical_tabulation_character = 23, 
		RULE_form_feed = 24, RULE_terminal_character = 25, RULE_gap_free_symbol = 26, 
		RULE_terminal_string = 27, RULE_first_terminal_character = 28, RULE_second_terminal_character = 29, 
		RULE_gap_separator = 30, RULE_syntax1 = 31, RULE_commentless_symbol = 32, 
		RULE_integer = 33, RULE_meta_identifier = 34, RULE_meta_identifier_character = 35, 
		RULE_special_sequence = 36, RULE_special_sequence_character = 37, RULE_comment_symbol = 38, 
		RULE_bracketed_textual_comment = 39, RULE_syntax2 = 40, RULE_syntax3 = 41, 
		RULE_syntax_rule = 42, RULE_definitions_list = 43, RULE_single_definition = 44, 
		RULE_syntactic_term = 45, RULE_syntactic_exception = 46, RULE_syntactic_factor = 47, 
		RULE_syntactic_primary = 48, RULE_optional_sequence = 49, RULE_repeated_sequence = 50, 
		RULE_grouped_sequence = 51, RULE_empty_sequence = 52;
	public static readonly string[] ruleNames = {
		"letter", "decimal_digit", "concatenate_symbol", "defining_symbol", "definition_separator_symbol", 
		"end_comment_symbol", "end_group_symbol", "end_option_symbol", "end_repeat_symbol", 
		"except_symbol", "first_quote_symbol", "repetition_symbol", "second_quote_symbol", 
		"special_sequence_symbol", "start_comment_symbol", "start_group_symbol", 
		"start_option_symbol", "start_repeat_symbol", "terminator_symbol", "other_character", 
		"space_character", "horizontal_tabulation_character", "new_line", "vertical_tabulation_character", 
		"form_feed", "terminal_character", "gap_free_symbol", "terminal_string", 
		"first_terminal_character", "second_terminal_character", "gap_separator", 
		"syntax1", "commentless_symbol", "integer", "meta_identifier", "meta_identifier_character", 
		"special_sequence", "special_sequence_character", "comment_symbol", "bracketed_textual_comment", 
		"syntax2", "syntax3", "syntax_rule", "definitions_list", "single_definition", 
		"syntactic_term", "syntactic_exception", "syntactic_factor", "syntactic_primary", 
		"optional_sequence", "repeated_sequence", "grouped_sequence", "empty_sequence"
	};

	private static readonly string[] _LiteralNames = {
		null, "'a'", "'b'", "'c'", "'d'", "'e'", "'f'", "'g'", "'h'", "'i'", "'j'", 
		"'k'", "'l'", "'m'", "'n'", "'o'", "'p'", "'q'", "'r'", "'s'", "'t'", 
		"'u'", "'v'", "'w'", "'x'", "'y'", "'z'", "'A'", "'B'", "'C'", "'D'", 
		"'E'", "'F'", "'G'", "'H'", "'I'", "'J'", "'K'", "'L'", "'M'", "'N'", 
		"'O'", "'P'", "'Q'", "'R'", "'S'", "'T'", "'U'", "'V'", "'W'", "'X'", 
		"'Y'", "'Z'", "'0'", "'1'", "'2'", "'3'", "'4'", "'5'", "'6'", "'7'", 
		"'8'", "'9'", "','", "'='", "'|'", "'/'", "'!'", "'*)'", "')'", "']'", 
		"'/)'", "'}'", "':)'", "'-'", "'''", "'\u00EF\u00BF\u00BD'", "'*'", "'\"'", 
		"'?'", "'(*'", "'('", "'['", "'(/'", "'{'", "'(:'", "';'", "'.'", "' '", 
		"':'", "'+'", "'_'", "'%'", "'@'", "'&'", "'#'", "'$'", "'<'", "'>'", 
		"'\\'", "'^'", "'`'", "'~'", "'\t'", "'\n'", "'\r'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Al", "Bl", "Cl", "Dl", "El", "Fl", "Gl", "Hl", "Il", "Jl", "Kl", 
		"Ll", "Ml", "Nl", "Ol", "Pl", "Ql", "Rl", "Sl", "Tl", "Ul", "Vl", "Wl", 
		"Xl", "Yl", "Zl", "Au", "Bu", "Cu", "Du", "Eu", "Fu", "Gu", "Hu", "Iu", 
		"Ju", "Ku", "Lu", "Mu", "Nu", "Ou", "Pu", "Qu", "Ru", "Su", "Tu", "Uu", 
		"Vu", "Wu", "Xu", "Yu", "Zu", "N0", "N1", "N2", "N3", "N4", "N5", "N6", 
		"N7", "N8", "N9", "COMMA", "EQUAL", "VBAR", "FSLASH", "EXCL", "STARCP", 
		"CP", "CB", "FSLASH_CP", "CC", "COLONCP", "HYPHEN", "SQ", "FSQ", "STAR", 
		"DQ", "QM", "OPSTAR", "OP", "OB", "CPSLASH", "OC", "OPCOLON", "SEMI", 
		"DOT", "SPACE", "COLON", "PLUS", "UNDERSCORE", "PERCENT", "AT", "AMP", 
		"POUND", "DOLLAR", "LT", "GT", "BSLASH", "XOR", "BQUOTE", "TILDE", "TAB", 
		"NL", "LF"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Iso14977Parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static Iso14977Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Iso14977Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Iso14977Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class LetterContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Al() { return GetToken(Iso14977Parser.Al, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bl() { return GetToken(Iso14977Parser.Bl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Cl() { return GetToken(Iso14977Parser.Cl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dl() { return GetToken(Iso14977Parser.Dl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode El() { return GetToken(Iso14977Parser.El, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Fl() { return GetToken(Iso14977Parser.Fl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Gl() { return GetToken(Iso14977Parser.Gl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hl() { return GetToken(Iso14977Parser.Hl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Il() { return GetToken(Iso14977Parser.Il, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Jl() { return GetToken(Iso14977Parser.Jl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Kl() { return GetToken(Iso14977Parser.Kl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ll() { return GetToken(Iso14977Parser.Ll, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ml() { return GetToken(Iso14977Parser.Ml, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Nl() { return GetToken(Iso14977Parser.Nl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ol() { return GetToken(Iso14977Parser.Ol, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pu() { return GetToken(Iso14977Parser.Pu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ql() { return GetToken(Iso14977Parser.Ql, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rl() { return GetToken(Iso14977Parser.Rl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sl() { return GetToken(Iso14977Parser.Sl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tl() { return GetToken(Iso14977Parser.Tl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ul() { return GetToken(Iso14977Parser.Ul, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Vl() { return GetToken(Iso14977Parser.Vl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Wl() { return GetToken(Iso14977Parser.Wl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Xl() { return GetToken(Iso14977Parser.Xl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yl() { return GetToken(Iso14977Parser.Yl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Zl() { return GetToken(Iso14977Parser.Zl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Au() { return GetToken(Iso14977Parser.Au, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bu() { return GetToken(Iso14977Parser.Bu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Cu() { return GetToken(Iso14977Parser.Cu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Du() { return GetToken(Iso14977Parser.Du, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eu() { return GetToken(Iso14977Parser.Eu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Fu() { return GetToken(Iso14977Parser.Fu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Gu() { return GetToken(Iso14977Parser.Gu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hu() { return GetToken(Iso14977Parser.Hu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Iu() { return GetToken(Iso14977Parser.Iu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ju() { return GetToken(Iso14977Parser.Ju, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ku() { return GetToken(Iso14977Parser.Ku, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lu() { return GetToken(Iso14977Parser.Lu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mu() { return GetToken(Iso14977Parser.Mu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Nu() { return GetToken(Iso14977Parser.Nu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ou() { return GetToken(Iso14977Parser.Ou, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Qu() { return GetToken(Iso14977Parser.Qu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ru() { return GetToken(Iso14977Parser.Ru, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Su() { return GetToken(Iso14977Parser.Su, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tu() { return GetToken(Iso14977Parser.Tu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Uu() { return GetToken(Iso14977Parser.Uu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Vu() { return GetToken(Iso14977Parser.Vu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Wu() { return GetToken(Iso14977Parser.Wu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Xu() { return GetToken(Iso14977Parser.Xu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yu() { return GetToken(Iso14977Parser.Yu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Zu() { return GetToken(Iso14977Parser.Zu, 0); }
		public LetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterLetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitLetter(this);
		}
	}

	[RuleVersion(0)]
	public LetterContext letter() {
		LetterContext _localctx = new LetterContext(Context, State);
		EnterRule(_localctx, 0, RULE_letter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Al) | (1L << Bl) | (1L << Cl) | (1L << Dl) | (1L << El) | (1L << Fl) | (1L << Gl) | (1L << Hl) | (1L << Il) | (1L << Jl) | (1L << Kl) | (1L << Ll) | (1L << Ml) | (1L << Nl) | (1L << Ol) | (1L << Ql) | (1L << Rl) | (1L << Sl) | (1L << Tl) | (1L << Ul) | (1L << Vl) | (1L << Wl) | (1L << Xl) | (1L << Yl) | (1L << Zl) | (1L << Au) | (1L << Bu) | (1L << Cu) | (1L << Du) | (1L << Eu) | (1L << Fu) | (1L << Gu) | (1L << Hu) | (1L << Iu) | (1L << Ju) | (1L << Ku) | (1L << Lu) | (1L << Mu) | (1L << Nu) | (1L << Ou) | (1L << Pu) | (1L << Qu) | (1L << Ru) | (1L << Su) | (1L << Tu) | (1L << Uu) | (1L << Vu) | (1L << Wu) | (1L << Xu) | (1L << Yu) | (1L << Zu))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decimal_digitContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N0() { return GetToken(Iso14977Parser.N0, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N1() { return GetToken(Iso14977Parser.N1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N2() { return GetToken(Iso14977Parser.N2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N3() { return GetToken(Iso14977Parser.N3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N4() { return GetToken(Iso14977Parser.N4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N5() { return GetToken(Iso14977Parser.N5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N6() { return GetToken(Iso14977Parser.N6, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N7() { return GetToken(Iso14977Parser.N7, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N8() { return GetToken(Iso14977Parser.N8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N9() { return GetToken(Iso14977Parser.N9, 0); }
		public Decimal_digitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimal_digit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterDecimal_digit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitDecimal_digit(this);
		}
	}

	[RuleVersion(0)]
	public Decimal_digitContext decimal_digit() {
		Decimal_digitContext _localctx = new Decimal_digitContext(Context, State);
		EnterRule(_localctx, 2, RULE_decimal_digit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << N0) | (1L << N1) | (1L << N2) | (1L << N3) | (1L << N4) | (1L << N5) | (1L << N6) | (1L << N7) | (1L << N8) | (1L << N9))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concatenate_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Iso14977Parser.COMMA, 0); }
		public Concatenate_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concatenate_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterConcatenate_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitConcatenate_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Concatenate_symbolContext concatenate_symbol() {
		Concatenate_symbolContext _localctx = new Concatenate_symbolContext(Context, State);
		EnterRule(_localctx, 4, RULE_concatenate_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			Match(COMMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Defining_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(Iso14977Parser.EQUAL, 0); }
		public Defining_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defining_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterDefining_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitDefining_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Defining_symbolContext defining_symbol() {
		Defining_symbolContext _localctx = new Defining_symbolContext(Context, State);
		EnterRule(_localctx, 6, RULE_defining_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(EQUAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Definition_separator_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VBAR() { return GetToken(Iso14977Parser.VBAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FSLASH() { return GetToken(Iso14977Parser.FSLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCL() { return GetToken(Iso14977Parser.EXCL, 0); }
		public Definition_separator_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition_separator_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterDefinition_separator_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitDefinition_separator_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Definition_separator_symbolContext definition_separator_symbol() {
		Definition_separator_symbolContext _localctx = new Definition_separator_symbolContext(Context, State);
		EnterRule(_localctx, 8, RULE_definition_separator_symbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (VBAR - 65)) | (1L << (FSLASH - 65)) | (1L << (EXCL - 65)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_comment_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARCP() { return GetToken(Iso14977Parser.STARCP, 0); }
		public End_comment_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_comment_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterEnd_comment_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitEnd_comment_symbol(this);
		}
	}

	[RuleVersion(0)]
	public End_comment_symbolContext end_comment_symbol() {
		End_comment_symbolContext _localctx = new End_comment_symbolContext(Context, State);
		EnterRule(_localctx, 10, RULE_end_comment_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(STARCP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_group_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP() { return GetToken(Iso14977Parser.CP, 0); }
		public End_group_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_group_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterEnd_group_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitEnd_group_symbol(this);
		}
	}

	[RuleVersion(0)]
	public End_group_symbolContext end_group_symbol() {
		End_group_symbolContext _localctx = new End_group_symbolContext(Context, State);
		EnterRule(_localctx, 12, RULE_end_group_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			Match(CP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_option_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CB() { return GetToken(Iso14977Parser.CB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FSLASH_CP() { return GetToken(Iso14977Parser.FSLASH_CP, 0); }
		public End_option_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_option_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterEnd_option_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitEnd_option_symbol(this);
		}
	}

	[RuleVersion(0)]
	public End_option_symbolContext end_option_symbol() {
		End_option_symbolContext _localctx = new End_option_symbolContext(Context, State);
		EnterRule(_localctx, 14, RULE_end_option_symbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			_la = TokenStream.LA(1);
			if ( !(_la==CB || _la==FSLASH_CP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_repeat_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CC() { return GetToken(Iso14977Parser.CC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLONCP() { return GetToken(Iso14977Parser.COLONCP, 0); }
		public End_repeat_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_repeat_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterEnd_repeat_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitEnd_repeat_symbol(this);
		}
	}

	[RuleVersion(0)]
	public End_repeat_symbolContext end_repeat_symbol() {
		End_repeat_symbolContext _localctx = new End_repeat_symbolContext(Context, State);
		EnterRule(_localctx, 16, RULE_end_repeat_symbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			_la = TokenStream.LA(1);
			if ( !(_la==CC || _la==COLONCP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Except_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HYPHEN() { return GetToken(Iso14977Parser.HYPHEN, 0); }
		public Except_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_except_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterExcept_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitExcept_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Except_symbolContext except_symbol() {
		Except_symbolContext _localctx = new Except_symbolContext(Context, State);
		EnterRule(_localctx, 18, RULE_except_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			Match(HYPHEN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class First_quote_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQ() { return GetToken(Iso14977Parser.SQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FSQ() { return GetToken(Iso14977Parser.FSQ, 0); }
		public First_quote_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_first_quote_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterFirst_quote_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitFirst_quote_symbol(this);
		}
	}

	[RuleVersion(0)]
	public First_quote_symbolContext first_quote_symbol() {
		First_quote_symbolContext _localctx = new First_quote_symbolContext(Context, State);
		EnterRule(_localctx, 20, RULE_first_quote_symbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			_la = TokenStream.LA(1);
			if ( !(_la==SQ || _la==FSQ) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repetition_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Iso14977Parser.STAR, 0); }
		public Repetition_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repetition_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterRepetition_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitRepetition_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Repetition_symbolContext repetition_symbol() {
		Repetition_symbolContext _localctx = new Repetition_symbolContext(Context, State);
		EnterRule(_localctx, 22, RULE_repetition_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			Match(STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Second_quote_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DQ() { return GetToken(Iso14977Parser.DQ, 0); }
		public Second_quote_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_second_quote_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterSecond_quote_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitSecond_quote_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Second_quote_symbolContext second_quote_symbol() {
		Second_quote_symbolContext _localctx = new Second_quote_symbolContext(Context, State);
		EnterRule(_localctx, 24, RULE_second_quote_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			Match(DQ);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Special_sequence_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM() { return GetToken(Iso14977Parser.QM, 0); }
		public Special_sequence_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_special_sequence_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterSpecial_sequence_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitSpecial_sequence_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Special_sequence_symbolContext special_sequence_symbol() {
		Special_sequence_symbolContext _localctx = new Special_sequence_symbolContext(Context, State);
		EnterRule(_localctx, 26, RULE_special_sequence_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			Match(QM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_comment_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPSTAR() { return GetToken(Iso14977Parser.OPSTAR, 0); }
		public Start_comment_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_comment_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterStart_comment_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitStart_comment_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Start_comment_symbolContext start_comment_symbol() {
		Start_comment_symbolContext _localctx = new Start_comment_symbolContext(Context, State);
		EnterRule(_localctx, 28, RULE_start_comment_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			Match(OPSTAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_group_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP() { return GetToken(Iso14977Parser.OP, 0); }
		public Start_group_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_group_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterStart_group_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitStart_group_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Start_group_symbolContext start_group_symbol() {
		Start_group_symbolContext _localctx = new Start_group_symbolContext(Context, State);
		EnterRule(_localctx, 30, RULE_start_group_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			Match(OP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_option_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OB() { return GetToken(Iso14977Parser.OB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPSLASH() { return GetToken(Iso14977Parser.CPSLASH, 0); }
		public Start_option_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_option_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterStart_option_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitStart_option_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Start_option_symbolContext start_option_symbol() {
		Start_option_symbolContext _localctx = new Start_option_symbolContext(Context, State);
		EnterRule(_localctx, 32, RULE_start_option_symbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			_la = TokenStream.LA(1);
			if ( !(_la==OB || _la==CPSLASH) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_repeat_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OC() { return GetToken(Iso14977Parser.OC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPCOLON() { return GetToken(Iso14977Parser.OPCOLON, 0); }
		public Start_repeat_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_repeat_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterStart_repeat_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitStart_repeat_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Start_repeat_symbolContext start_repeat_symbol() {
		Start_repeat_symbolContext _localctx = new Start_repeat_symbolContext(Context, State);
		EnterRule(_localctx, 34, RULE_start_repeat_symbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			_la = TokenStream.LA(1);
			if ( !(_la==OC || _la==OPCOLON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Terminator_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Iso14977Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Iso14977Parser.DOT, 0); }
		public Terminator_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminator_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterTerminator_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitTerminator_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Terminator_symbolContext terminator_symbol() {
		Terminator_symbolContext _localctx = new Terminator_symbolContext(Context, State);
		EnterRule(_localctx, 36, RULE_terminator_symbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			_la = TokenStream.LA(1);
			if ( !(_la==SEMI || _la==DOT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Other_characterContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE() { return GetToken(Iso14977Parser.SPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Iso14977Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(Iso14977Parser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDERSCORE() { return GetToken(Iso14977Parser.UNDERSCORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(Iso14977Parser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(Iso14977Parser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(Iso14977Parser.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POUND() { return GetToken(Iso14977Parser.POUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(Iso14977Parser.DOLLAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(Iso14977Parser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(Iso14977Parser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BSLASH() { return GetToken(Iso14977Parser.BSLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(Iso14977Parser.XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BQUOTE() { return GetToken(Iso14977Parser.BQUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(Iso14977Parser.TILDE, 0); }
		public Other_characterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_other_character; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterOther_character(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitOther_character(this);
		}
	}

	[RuleVersion(0)]
	public Other_characterContext other_character() {
		Other_characterContext _localctx = new Other_characterContext(Context, State);
		EnterRule(_localctx, 38, RULE_other_character);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & ((1L << (SPACE - 88)) | (1L << (COLON - 88)) | (1L << (PLUS - 88)) | (1L << (UNDERSCORE - 88)) | (1L << (PERCENT - 88)) | (1L << (AT - 88)) | (1L << (AMP - 88)) | (1L << (POUND - 88)) | (1L << (DOLLAR - 88)) | (1L << (LT - 88)) | (1L << (GT - 88)) | (1L << (BSLASH - 88)) | (1L << (XOR - 88)) | (1L << (BQUOTE - 88)) | (1L << (TILDE - 88)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Space_characterContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE() { return GetToken(Iso14977Parser.SPACE, 0); }
		public Space_characterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_space_character; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterSpace_character(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitSpace_character(this);
		}
	}

	[RuleVersion(0)]
	public Space_characterContext space_character() {
		Space_characterContext _localctx = new Space_characterContext(Context, State);
		EnterRule(_localctx, 40, RULE_space_character);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(SPACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Horizontal_tabulation_characterContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAB() { return GetToken(Iso14977Parser.TAB, 0); }
		public Horizontal_tabulation_characterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_horizontal_tabulation_character; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterHorizontal_tabulation_character(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitHorizontal_tabulation_character(this);
		}
	}

	[RuleVersion(0)]
	public Horizontal_tabulation_characterContext horizontal_tabulation_character() {
		Horizontal_tabulation_characterContext _localctx = new Horizontal_tabulation_characterContext(Context, State);
		EnterRule(_localctx, 42, RULE_horizontal_tabulation_character);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			Match(TAB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class New_lineContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(Iso14977Parser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(Iso14977Parser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LF() { return GetTokens(Iso14977Parser.LF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LF(int i) {
			return GetToken(Iso14977Parser.LF, i);
		}
		public New_lineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_new_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterNew_line(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitNew_line(this);
		}
	}

	[RuleVersion(0)]
	public New_lineContext new_line() {
		New_lineContext _localctx = new New_lineContext(Context, State);
		EnterRule(_localctx, 44, RULE_new_line);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 150;
					_la = TokenStream.LA(1);
					if ( !(_la==NL || _la==LF) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 153;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vertical_tabulation_characterContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LF() { return GetToken(Iso14977Parser.LF, 0); }
		public Vertical_tabulation_characterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vertical_tabulation_character; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterVertical_tabulation_character(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitVertical_tabulation_character(this);
		}
	}

	[RuleVersion(0)]
	public Vertical_tabulation_characterContext vertical_tabulation_character() {
		Vertical_tabulation_characterContext _localctx = new Vertical_tabulation_characterContext(Context, State);
		EnterRule(_localctx, 46, RULE_vertical_tabulation_character);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			Match(LF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Form_feedContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(Iso14977Parser.NL, 0); }
		public Form_feedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_form_feed; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterForm_feed(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitForm_feed(this);
		}
	}

	[RuleVersion(0)]
	public Form_feedContext form_feed() {
		Form_feedContext _localctx = new Form_feedContext(Context, State);
		EnterRule(_localctx, 48, RULE_form_feed);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			Match(NL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Terminal_characterContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public LetterContext letter() {
			return GetRuleContext<LetterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decimal_digitContext decimal_digit() {
			return GetRuleContext<Decimal_digitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Concatenate_symbolContext concatenate_symbol() {
			return GetRuleContext<Concatenate_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Defining_symbolContext defining_symbol() {
			return GetRuleContext<Defining_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Definition_separator_symbolContext definition_separator_symbol() {
			return GetRuleContext<Definition_separator_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_comment_symbolContext end_comment_symbol() {
			return GetRuleContext<End_comment_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_group_symbolContext end_group_symbol() {
			return GetRuleContext<End_group_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_option_symbolContext end_option_symbol() {
			return GetRuleContext<End_option_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_repeat_symbolContext end_repeat_symbol() {
			return GetRuleContext<End_repeat_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Except_symbolContext except_symbol() {
			return GetRuleContext<Except_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public First_quote_symbolContext first_quote_symbol() {
			return GetRuleContext<First_quote_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Repetition_symbolContext repetition_symbol() {
			return GetRuleContext<Repetition_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Second_quote_symbolContext second_quote_symbol() {
			return GetRuleContext<Second_quote_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Special_sequence_symbolContext special_sequence_symbol() {
			return GetRuleContext<Special_sequence_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Start_comment_symbolContext start_comment_symbol() {
			return GetRuleContext<Start_comment_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Start_group_symbolContext start_group_symbol() {
			return GetRuleContext<Start_group_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Start_option_symbolContext start_option_symbol() {
			return GetRuleContext<Start_option_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Start_repeat_symbolContext start_repeat_symbol() {
			return GetRuleContext<Start_repeat_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Terminator_symbolContext terminator_symbol() {
			return GetRuleContext<Terminator_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Other_characterContext other_character() {
			return GetRuleContext<Other_characterContext>(0);
		}
		public Terminal_characterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminal_character; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterTerminal_character(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitTerminal_character(this);
		}
	}

	[RuleVersion(0)]
	public Terminal_characterContext terminal_character() {
		Terminal_characterContext _localctx = new Terminal_characterContext(Context, State);
		EnterRule(_localctx, 50, RULE_terminal_character);
		try {
			State = 179;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Al:
			case Bl:
			case Cl:
			case Dl:
			case El:
			case Fl:
			case Gl:
			case Hl:
			case Il:
			case Jl:
			case Kl:
			case Ll:
			case Ml:
			case Nl:
			case Ol:
			case Ql:
			case Rl:
			case Sl:
			case Tl:
			case Ul:
			case Vl:
			case Wl:
			case Xl:
			case Yl:
			case Zl:
			case Au:
			case Bu:
			case Cu:
			case Du:
			case Eu:
			case Fu:
			case Gu:
			case Hu:
			case Iu:
			case Ju:
			case Ku:
			case Lu:
			case Mu:
			case Nu:
			case Ou:
			case Pu:
			case Qu:
			case Ru:
			case Su:
			case Tu:
			case Uu:
			case Vu:
			case Wu:
			case Xu:
			case Yu:
			case Zu:
				EnterOuterAlt(_localctx, 1);
				{
				State = 159;
				letter();
				}
				break;
			case N0:
			case N1:
			case N2:
			case N3:
			case N4:
			case N5:
			case N6:
			case N7:
			case N8:
			case N9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 160;
				decimal_digit();
				}
				break;
			case COMMA:
				EnterOuterAlt(_localctx, 3);
				{
				State = 161;
				concatenate_symbol();
				}
				break;
			case EQUAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 162;
				defining_symbol();
				}
				break;
			case VBAR:
			case FSLASH:
			case EXCL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 163;
				definition_separator_symbol();
				}
				break;
			case STARCP:
				EnterOuterAlt(_localctx, 6);
				{
				State = 164;
				end_comment_symbol();
				}
				break;
			case CP:
				EnterOuterAlt(_localctx, 7);
				{
				State = 165;
				end_group_symbol();
				}
				break;
			case CB:
			case FSLASH_CP:
				EnterOuterAlt(_localctx, 8);
				{
				State = 166;
				end_option_symbol();
				}
				break;
			case CC:
			case COLONCP:
				EnterOuterAlt(_localctx, 9);
				{
				State = 167;
				end_repeat_symbol();
				}
				break;
			case HYPHEN:
				EnterOuterAlt(_localctx, 10);
				{
				State = 168;
				except_symbol();
				}
				break;
			case SQ:
			case FSQ:
				EnterOuterAlt(_localctx, 11);
				{
				State = 169;
				first_quote_symbol();
				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 12);
				{
				State = 170;
				repetition_symbol();
				}
				break;
			case DQ:
				EnterOuterAlt(_localctx, 13);
				{
				State = 171;
				second_quote_symbol();
				}
				break;
			case QM:
				EnterOuterAlt(_localctx, 14);
				{
				State = 172;
				special_sequence_symbol();
				}
				break;
			case OPSTAR:
				EnterOuterAlt(_localctx, 15);
				{
				State = 173;
				start_comment_symbol();
				}
				break;
			case OP:
				EnterOuterAlt(_localctx, 16);
				{
				State = 174;
				start_group_symbol();
				}
				break;
			case OB:
			case CPSLASH:
				EnterOuterAlt(_localctx, 17);
				{
				State = 175;
				start_option_symbol();
				}
				break;
			case OC:
			case OPCOLON:
				EnterOuterAlt(_localctx, 18);
				{
				State = 176;
				start_repeat_symbol();
				}
				break;
			case SEMI:
			case DOT:
				EnterOuterAlt(_localctx, 19);
				{
				State = 177;
				terminator_symbol();
				}
				break;
			case SPACE:
			case COLON:
			case PLUS:
			case UNDERSCORE:
			case PERCENT:
			case AT:
			case AMP:
			case POUND:
			case DOLLAR:
			case LT:
			case GT:
			case BSLASH:
			case XOR:
			case BQUOTE:
			case TILDE:
				EnterOuterAlt(_localctx, 20);
				{
				State = 178;
				other_character();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Gap_free_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Terminal_characterContext terminal_character() {
			return GetRuleContext<Terminal_characterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Terminal_stringContext terminal_string() {
			return GetRuleContext<Terminal_stringContext>(0);
		}
		public Gap_free_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gap_free_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterGap_free_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitGap_free_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Gap_free_symbolContext gap_free_symbol() {
		Gap_free_symbolContext _localctx = new Gap_free_symbolContext(Context, State);
		EnterRule(_localctx, 52, RULE_gap_free_symbol);
		try {
			State = 184;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 181;
				if (!( !(
				    InputStream.LA(1) == SQ
				    || InputStream.LA(1) == FSQ
				    || InputStream.LA(1) == DQ
				    ) )) throw new FailedPredicateException(this, " !(\n    InputStream.LA(1) == SQ\n    || InputStream.LA(1) == FSQ\n    || InputStream.LA(1) == DQ\n    ) ");
				State = 182;
				terminal_character();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 183;
				terminal_string();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Terminal_stringContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public First_quote_symbolContext[] first_quote_symbol() {
			return GetRuleContexts<First_quote_symbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public First_quote_symbolContext first_quote_symbol(int i) {
			return GetRuleContext<First_quote_symbolContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public First_terminal_characterContext[] first_terminal_character() {
			return GetRuleContexts<First_terminal_characterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public First_terminal_characterContext first_terminal_character(int i) {
			return GetRuleContext<First_terminal_characterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Second_quote_symbolContext[] second_quote_symbol() {
			return GetRuleContexts<Second_quote_symbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Second_quote_symbolContext second_quote_symbol(int i) {
			return GetRuleContext<Second_quote_symbolContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Second_terminal_characterContext[] second_terminal_character() {
			return GetRuleContexts<Second_terminal_characterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Second_terminal_characterContext second_terminal_character(int i) {
			return GetRuleContext<Second_terminal_characterContext>(i);
		}
		public Terminal_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminal_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterTerminal_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitTerminal_string(this);
		}
	}

	[RuleVersion(0)]
	public Terminal_stringContext terminal_string() {
		Terminal_stringContext _localctx = new Terminal_stringContext(Context, State);
		EnterRule(_localctx, 54, RULE_terminal_string);
		try {
			int _alt;
			State = 202;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SQ:
			case FSQ:
				EnterOuterAlt(_localctx, 1);
				{
				State = 186;
				first_quote_symbol();
				State = 188;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 187;
						first_terminal_character();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 190;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 192;
				first_quote_symbol();
				}
				break;
			case DQ:
				EnterOuterAlt(_localctx, 2);
				{
				State = 194;
				second_quote_symbol();
				State = 196;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 195;
						second_terminal_character();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 198;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 200;
				second_quote_symbol();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class First_terminal_characterContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Terminal_characterContext terminal_character() {
			return GetRuleContext<Terminal_characterContext>(0);
		}
		public First_terminal_characterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_first_terminal_character; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterFirst_terminal_character(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitFirst_terminal_character(this);
		}
	}

	[RuleVersion(0)]
	public First_terminal_characterContext first_terminal_character() {
		First_terminal_characterContext _localctx = new First_terminal_characterContext(Context, State);
		EnterRule(_localctx, 56, RULE_first_terminal_character);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			if (!( !(
			    InputStream.LA(1) == SQ
			    || InputStream.LA(1) == FSQ
			    ) )) throw new FailedPredicateException(this, " !(\n    InputStream.LA(1) == SQ\n    || InputStream.LA(1) == FSQ\n    ) ");
			State = 205;
			terminal_character();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Second_terminal_characterContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Terminal_characterContext terminal_character() {
			return GetRuleContext<Terminal_characterContext>(0);
		}
		public Second_terminal_characterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_second_terminal_character; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterSecond_terminal_character(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitSecond_terminal_character(this);
		}
	}

	[RuleVersion(0)]
	public Second_terminal_characterContext second_terminal_character() {
		Second_terminal_characterContext _localctx = new Second_terminal_characterContext(Context, State);
		EnterRule(_localctx, 58, RULE_second_terminal_character);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			if (!( !(
			    InputStream.LA(1) == DQ
			    ) )) throw new FailedPredicateException(this, " !(\n    InputStream.LA(1) == DQ\n    ) ");
			State = 208;
			terminal_character();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Gap_separatorContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Space_characterContext space_character() {
			return GetRuleContext<Space_characterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Horizontal_tabulation_characterContext horizontal_tabulation_character() {
			return GetRuleContext<Horizontal_tabulation_characterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public New_lineContext new_line() {
			return GetRuleContext<New_lineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Vertical_tabulation_characterContext vertical_tabulation_character() {
			return GetRuleContext<Vertical_tabulation_characterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Form_feedContext form_feed() {
			return GetRuleContext<Form_feedContext>(0);
		}
		public Gap_separatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gap_separator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterGap_separator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitGap_separator(this);
		}
	}

	[RuleVersion(0)]
	public Gap_separatorContext gap_separator() {
		Gap_separatorContext _localctx = new Gap_separatorContext(Context, State);
		EnterRule(_localctx, 60, RULE_gap_separator);
		try {
			State = 215;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 210;
				space_character();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 211;
				horizontal_tabulation_character();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 212;
				new_line();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 213;
				vertical_tabulation_character();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 214;
				form_feed();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Syntax1Context : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Iso14977Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Gap_separatorContext[] gap_separator() {
			return GetRuleContexts<Gap_separatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Gap_separatorContext gap_separator(int i) {
			return GetRuleContext<Gap_separatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Gap_free_symbolContext[] gap_free_symbol() {
			return GetRuleContexts<Gap_free_symbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Gap_free_symbolContext gap_free_symbol(int i) {
			return GetRuleContext<Gap_free_symbolContext>(i);
		}
		public Syntax1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syntax1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterSyntax1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitSyntax1(this);
		}
	}

	[RuleVersion(0)]
	public Syntax1Context syntax1() {
		Syntax1Context _localctx = new Syntax1Context(Context, State);
		EnterRule(_localctx, 62, RULE_syntax1);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 217;
					gap_separator();
					}
					} 
				}
				State = 222;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			State = 230;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 223;
					gap_free_symbol();
					State = 227;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 224;
							gap_separator();
							}
							} 
						}
						State = 229;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 232;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 234;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Commentless_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Terminal_characterContext terminal_character() {
			return GetRuleContext<Terminal_characterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Meta_identifierContext meta_identifier() {
			return GetRuleContext<Meta_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Terminal_stringContext terminal_string() {
			return GetRuleContext<Terminal_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Special_sequenceContext special_sequence() {
			return GetRuleContext<Special_sequenceContext>(0);
		}
		public Commentless_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentless_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterCommentless_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitCommentless_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Commentless_symbolContext commentless_symbol() {
		Commentless_symbolContext _localctx = new Commentless_symbolContext(Context, State);
		EnterRule(_localctx, 64, RULE_commentless_symbol);
		try {
			State = 242;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 236;
				if (!( !(
				    (InputStream.LA(1) >= Al && InputStream.LA(1) <= Zl)
				    || (InputStream.LA(1) >= Au && InputStream.LA(1) <= Zu)

				    || (InputStream.LA(1) >= N0 && InputStream.LA(1) <= N9)

				    || InputStream.LA(1) == SQ
				    || InputStream.LA(1) == FSQ

				    || InputStream.LA(1) == DQ

				    || InputStream.LA(1) == STARCP

				    || InputStream.LA(1) == OPSTAR

				    || InputStream.LA(1) == QM
				    || InputStream.LA(1) == COLON
				    || InputStream.LA(1) == PLUS
				    || InputStream.LA(1) == UNDERSCORE
				    || InputStream.LA(1) == PERCENT
				    || InputStream.LA(1) == AT
				    || InputStream.LA(1) == AMP
				    || InputStream.LA(1) == POUND
				    || InputStream.LA(1) == DOLLAR
				    || InputStream.LA(1) == POUND
				    || InputStream.LA(1) == LT
				    || InputStream.LA(1) == GT
				    || InputStream.LA(1) == BSLASH
				    || InputStream.LA(1) == XOR
				    || InputStream.LA(1) == BQUOTE
				    || InputStream.LA(1) == TILDE
				    ) )) throw new FailedPredicateException(this, " !(\n    (InputStream.LA(1) >= Al && InputStream.LA(1) <= Zl)\n    || (InputStream.LA(1) >= Au && InputStream.LA(1) <= Zu)\n\n    || (InputStream.LA(1) >= N0 && InputStream.LA(1) <= N9)\n\n    || InputStream.LA(1) == SQ\n    || InputStream.LA(1) == FSQ\n\n    || InputStream.LA(1) == DQ\n\n    || InputStream.LA(1) == STARCP\n\n    || InputStream.LA(1) == OPSTAR\n\n    || InputStream.LA(1) == QM\n    || InputStream.LA(1) == COLON\n    || InputStream.LA(1) == PLUS\n    || InputStream.LA(1) == UNDERSCORE\n    || InputStream.LA(1) == PERCENT\n    || InputStream.LA(1) == AT\n    || InputStream.LA(1) == AMP\n    || InputStream.LA(1) == POUND\n    || InputStream.LA(1) == DOLLAR\n    || InputStream.LA(1) == POUND\n    || InputStream.LA(1) == LT\n    || InputStream.LA(1) == GT\n    || InputStream.LA(1) == BSLASH\n    || InputStream.LA(1) == XOR\n    || InputStream.LA(1) == BQUOTE\n    || InputStream.LA(1) == TILDE\n    ) ");
				State = 237;
				terminal_character();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 238;
				meta_identifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 239;
				integer();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 240;
				terminal_string();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 241;
				special_sequence();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Decimal_digitContext[] decimal_digit() {
			return GetRuleContexts<Decimal_digitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decimal_digitContext decimal_digit(int i) {
			return GetRuleContext<Decimal_digitContext>(i);
		}
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitInteger(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 66, RULE_integer);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			decimal_digit();
			State = 248;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 245;
					decimal_digit();
					}
					} 
				}
				State = 250;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Meta_identifierContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public LetterContext letter() {
			return GetRuleContext<LetterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Meta_identifier_characterContext[] meta_identifier_character() {
			return GetRuleContexts<Meta_identifier_characterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Meta_identifier_characterContext meta_identifier_character(int i) {
			return GetRuleContext<Meta_identifier_characterContext>(i);
		}
		public Meta_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meta_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterMeta_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitMeta_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Meta_identifierContext meta_identifier() {
		Meta_identifierContext _localctx = new Meta_identifierContext(Context, State);
		EnterRule(_localctx, 68, RULE_meta_identifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			letter();
			State = 255;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 252;
					meta_identifier_character();
					}
					} 
				}
				State = 257;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Meta_identifier_characterContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public LetterContext letter() {
			return GetRuleContext<LetterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decimal_digitContext decimal_digit() {
			return GetRuleContext<Decimal_digitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Space_characterContext space_character() {
			return GetRuleContext<Space_characterContext>(0);
		}
		public Meta_identifier_characterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meta_identifier_character; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterMeta_identifier_character(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitMeta_identifier_character(this);
		}
	}

	[RuleVersion(0)]
	public Meta_identifier_characterContext meta_identifier_character() {
		Meta_identifier_characterContext _localctx = new Meta_identifier_characterContext(Context, State);
		EnterRule(_localctx, 70, RULE_meta_identifier_character);
		try {
			State = 261;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Al:
			case Bl:
			case Cl:
			case Dl:
			case El:
			case Fl:
			case Gl:
			case Hl:
			case Il:
			case Jl:
			case Kl:
			case Ll:
			case Ml:
			case Nl:
			case Ol:
			case Ql:
			case Rl:
			case Sl:
			case Tl:
			case Ul:
			case Vl:
			case Wl:
			case Xl:
			case Yl:
			case Zl:
			case Au:
			case Bu:
			case Cu:
			case Du:
			case Eu:
			case Fu:
			case Gu:
			case Hu:
			case Iu:
			case Ju:
			case Ku:
			case Lu:
			case Mu:
			case Nu:
			case Ou:
			case Pu:
			case Qu:
			case Ru:
			case Su:
			case Tu:
			case Uu:
			case Vu:
			case Wu:
			case Xu:
			case Yu:
			case Zu:
				EnterOuterAlt(_localctx, 1);
				{
				State = 258;
				letter();
				}
				break;
			case N0:
			case N1:
			case N2:
			case N3:
			case N4:
			case N5:
			case N6:
			case N7:
			case N8:
			case N9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 259;
				decimal_digit();
				}
				break;
			case SPACE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 260;
				space_character();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Special_sequenceContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Special_sequence_symbolContext[] special_sequence_symbol() {
			return GetRuleContexts<Special_sequence_symbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Special_sequence_symbolContext special_sequence_symbol(int i) {
			return GetRuleContext<Special_sequence_symbolContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Special_sequence_characterContext[] special_sequence_character() {
			return GetRuleContexts<Special_sequence_characterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Special_sequence_characterContext special_sequence_character(int i) {
			return GetRuleContext<Special_sequence_characterContext>(i);
		}
		public Special_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_special_sequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterSpecial_sequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitSpecial_sequence(this);
		}
	}

	[RuleVersion(0)]
	public Special_sequenceContext special_sequence() {
		Special_sequenceContext _localctx = new Special_sequenceContext(Context, State);
		EnterRule(_localctx, 72, RULE_special_sequence);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			special_sequence_symbol();
			State = 267;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 264;
					special_sequence_character();
					}
					} 
				}
				State = 269;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			State = 270;
			special_sequence_symbol();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Special_sequence_characterContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Terminal_characterContext terminal_character() {
			return GetRuleContext<Terminal_characterContext>(0);
		}
		public Special_sequence_characterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_special_sequence_character; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterSpecial_sequence_character(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitSpecial_sequence_character(this);
		}
	}

	[RuleVersion(0)]
	public Special_sequence_characterContext special_sequence_character() {
		Special_sequence_characterContext _localctx = new Special_sequence_characterContext(Context, State);
		EnterRule(_localctx, 74, RULE_special_sequence_character);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			if (!( !(
			    InputStream.LA(1) == QM
			    ) )) throw new FailedPredicateException(this, " !(\n    InputStream.LA(1) == QM\n    ) ");
			State = 273;
			terminal_character();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comment_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Bracketed_textual_commentContext bracketed_textual_comment() {
			return GetRuleContext<Bracketed_textual_commentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Other_characterContext other_character() {
			return GetRuleContext<Other_characterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Commentless_symbolContext commentless_symbol() {
			return GetRuleContext<Commentless_symbolContext>(0);
		}
		public Comment_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterComment_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitComment_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Comment_symbolContext comment_symbol() {
		Comment_symbolContext _localctx = new Comment_symbolContext(Context, State);
		EnterRule(_localctx, 76, RULE_comment_symbol);
		try {
			State = 278;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 275;
				bracketed_textual_comment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 276;
				other_character();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 277;
				commentless_symbol();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bracketed_textual_commentContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Start_comment_symbolContext start_comment_symbol() {
			return GetRuleContext<Start_comment_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_comment_symbolContext end_comment_symbol() {
			return GetRuleContext<End_comment_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comment_symbolContext[] comment_symbol() {
			return GetRuleContexts<Comment_symbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comment_symbolContext comment_symbol(int i) {
			return GetRuleContext<Comment_symbolContext>(i);
		}
		public Bracketed_textual_commentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracketed_textual_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterBracketed_textual_comment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitBracketed_textual_comment(this);
		}
	}

	[RuleVersion(0)]
	public Bracketed_textual_commentContext bracketed_textual_comment() {
		Bracketed_textual_commentContext _localctx = new Bracketed_textual_commentContext(Context, State);
		EnterRule(_localctx, 78, RULE_bracketed_textual_comment);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			start_comment_symbol();
			State = 284;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 281;
					comment_symbol();
					}
					} 
				}
				State = 286;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			State = 287;
			end_comment_symbol();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Syntax2Context : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Commentless_symbolContext[] commentless_symbol() {
			return GetRuleContexts<Commentless_symbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Commentless_symbolContext commentless_symbol(int i) {
			return GetRuleContext<Commentless_symbolContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Iso14977Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bracketed_textual_commentContext[] bracketed_textual_comment() {
			return GetRuleContexts<Bracketed_textual_commentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bracketed_textual_commentContext bracketed_textual_comment(int i) {
			return GetRuleContext<Bracketed_textual_commentContext>(i);
		}
		public Syntax2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syntax2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterSyntax2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitSyntax2(this);
		}
	}

	[RuleVersion(0)]
	public Syntax2Context syntax2() {
		Syntax2Context _localctx = new Syntax2Context(Context, State);
		EnterRule(_localctx, 80, RULE_syntax2);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 289;
					bracketed_textual_comment();
					}
					} 
				}
				State = 294;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			State = 295;
			commentless_symbol();
			State = 299;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 296;
					bracketed_textual_comment();
					}
					} 
				}
				State = 301;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			State = 311;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 302;
					commentless_symbol();
					State = 306;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 303;
							bracketed_textual_comment();
							}
							} 
						}
						State = 308;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
					}
					}
					} 
				}
				State = 313;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			State = 314;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Syntax3Context : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Syntax_ruleContext[] syntax_rule() {
			return GetRuleContexts<Syntax_ruleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Syntax_ruleContext syntax_rule(int i) {
			return GetRuleContext<Syntax_ruleContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Iso14977Parser.Eof, 0); }
		public Syntax3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syntax3; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterSyntax3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitSyntax3(this);
		}
	}

	[RuleVersion(0)]
	public Syntax3Context syntax3() {
		Syntax3Context _localctx = new Syntax3Context(Context, State);
		EnterRule(_localctx, 82, RULE_syntax3);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			syntax_rule();
			State = 320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Al) | (1L << Bl) | (1L << Cl) | (1L << Dl) | (1L << El) | (1L << Fl) | (1L << Gl) | (1L << Hl) | (1L << Il) | (1L << Jl) | (1L << Kl) | (1L << Ll) | (1L << Ml) | (1L << Nl) | (1L << Ol) | (1L << Ql) | (1L << Rl) | (1L << Sl) | (1L << Tl) | (1L << Ul) | (1L << Vl) | (1L << Wl) | (1L << Xl) | (1L << Yl) | (1L << Zl) | (1L << Au) | (1L << Bu) | (1L << Cu) | (1L << Du) | (1L << Eu) | (1L << Fu) | (1L << Gu) | (1L << Hu) | (1L << Iu) | (1L << Ju) | (1L << Ku) | (1L << Lu) | (1L << Mu) | (1L << Nu) | (1L << Ou) | (1L << Pu) | (1L << Qu) | (1L << Ru) | (1L << Su) | (1L << Tu) | (1L << Uu) | (1L << Vu) | (1L << Wu) | (1L << Xu) | (1L << Yu) | (1L << Zu))) != 0)) {
				{
				{
				State = 317;
				syntax_rule();
				}
				}
				State = 322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 323;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Syntax_ruleContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Meta_identifierContext meta_identifier() {
			return GetRuleContext<Meta_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Defining_symbolContext defining_symbol() {
			return GetRuleContext<Defining_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Definitions_listContext definitions_list() {
			return GetRuleContext<Definitions_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Terminator_symbolContext terminator_symbol() {
			return GetRuleContext<Terminator_symbolContext>(0);
		}
		public Syntax_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syntax_rule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterSyntax_rule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitSyntax_rule(this);
		}
	}

	[RuleVersion(0)]
	public Syntax_ruleContext syntax_rule() {
		Syntax_ruleContext _localctx = new Syntax_ruleContext(Context, State);
		EnterRule(_localctx, 84, RULE_syntax_rule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			meta_identifier();
			State = 326;
			defining_symbol();
			State = 327;
			definitions_list();
			State = 328;
			terminator_symbol();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Definitions_listContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Single_definitionContext[] single_definition() {
			return GetRuleContexts<Single_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Single_definitionContext single_definition(int i) {
			return GetRuleContext<Single_definitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Definition_separator_symbolContext[] definition_separator_symbol() {
			return GetRuleContexts<Definition_separator_symbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Definition_separator_symbolContext definition_separator_symbol(int i) {
			return GetRuleContext<Definition_separator_symbolContext>(i);
		}
		public Definitions_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definitions_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterDefinitions_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitDefinitions_list(this);
		}
	}

	[RuleVersion(0)]
	public Definitions_listContext definitions_list() {
		Definitions_listContext _localctx = new Definitions_listContext(Context, State);
		EnterRule(_localctx, 86, RULE_definitions_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			single_definition();
			State = 336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (VBAR - 65)) | (1L << (FSLASH - 65)) | (1L << (EXCL - 65)))) != 0)) {
				{
				{
				State = 331;
				definition_separator_symbol();
				State = 332;
				single_definition();
				}
				}
				State = 338;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_definitionContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Syntactic_termContext[] syntactic_term() {
			return GetRuleContexts<Syntactic_termContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Syntactic_termContext syntactic_term(int i) {
			return GetRuleContext<Syntactic_termContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Concatenate_symbolContext[] concatenate_symbol() {
			return GetRuleContexts<Concatenate_symbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Concatenate_symbolContext concatenate_symbol(int i) {
			return GetRuleContext<Concatenate_symbolContext>(i);
		}
		public Single_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterSingle_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitSingle_definition(this);
		}
	}

	[RuleVersion(0)]
	public Single_definitionContext single_definition() {
		Single_definitionContext _localctx = new Single_definitionContext(Context, State);
		EnterRule(_localctx, 88, RULE_single_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339;
			syntactic_term();
			State = 345;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 340;
				concatenate_symbol();
				State = 341;
				syntactic_term();
				}
				}
				State = 347;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Syntactic_termContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Syntactic_factorContext syntactic_factor() {
			return GetRuleContext<Syntactic_factorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Except_symbolContext except_symbol() {
			return GetRuleContext<Except_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Syntactic_exceptionContext syntactic_exception() {
			return GetRuleContext<Syntactic_exceptionContext>(0);
		}
		public Syntactic_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syntactic_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterSyntactic_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitSyntactic_term(this);
		}
	}

	[RuleVersion(0)]
	public Syntactic_termContext syntactic_term() {
		Syntactic_termContext _localctx = new Syntactic_termContext(Context, State);
		EnterRule(_localctx, 90, RULE_syntactic_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			syntactic_factor();
			State = 352;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HYPHEN) {
				{
				State = 349;
				except_symbol();
				State = 350;
				syntactic_exception();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Syntactic_exceptionContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Syntactic_factorContext syntactic_factor() {
			return GetRuleContext<Syntactic_factorContext>(0);
		}
		public Syntactic_exceptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syntactic_exception; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterSyntactic_exception(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitSyntactic_exception(this);
		}
	}

	[RuleVersion(0)]
	public Syntactic_exceptionContext syntactic_exception() {
		Syntactic_exceptionContext _localctx = new Syntactic_exceptionContext(Context, State);
		EnterRule(_localctx, 92, RULE_syntactic_exception);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			syntactic_factor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Syntactic_factorContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Syntactic_primaryContext syntactic_primary() {
			return GetRuleContext<Syntactic_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Repetition_symbolContext repetition_symbol() {
			return GetRuleContext<Repetition_symbolContext>(0);
		}
		public Syntactic_factorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syntactic_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterSyntactic_factor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitSyntactic_factor(this);
		}
	}

	[RuleVersion(0)]
	public Syntactic_factorContext syntactic_factor() {
		Syntactic_factorContext _localctx = new Syntactic_factorContext(Context, State);
		EnterRule(_localctx, 94, RULE_syntactic_factor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << N0) | (1L << N1) | (1L << N2) | (1L << N3) | (1L << N4) | (1L << N5) | (1L << N6) | (1L << N7) | (1L << N8) | (1L << N9))) != 0)) {
				{
				State = 356;
				integer();
				State = 357;
				repetition_symbol();
				}
			}

			State = 361;
			syntactic_primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Syntactic_primaryContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Optional_sequenceContext optional_sequence() {
			return GetRuleContext<Optional_sequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Repeated_sequenceContext repeated_sequence() {
			return GetRuleContext<Repeated_sequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Grouped_sequenceContext grouped_sequence() {
			return GetRuleContext<Grouped_sequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Meta_identifierContext meta_identifier() {
			return GetRuleContext<Meta_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Terminal_stringContext terminal_string() {
			return GetRuleContext<Terminal_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Special_sequenceContext special_sequence() {
			return GetRuleContext<Special_sequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Empty_sequenceContext empty_sequence() {
			return GetRuleContext<Empty_sequenceContext>(0);
		}
		public Syntactic_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syntactic_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterSyntactic_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitSyntactic_primary(this);
		}
	}

	[RuleVersion(0)]
	public Syntactic_primaryContext syntactic_primary() {
		Syntactic_primaryContext _localctx = new Syntactic_primaryContext(Context, State);
		EnterRule(_localctx, 96, RULE_syntactic_primary);
		try {
			State = 370;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OB:
			case CPSLASH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 363;
				optional_sequence();
				}
				break;
			case OC:
			case OPCOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 364;
				repeated_sequence();
				}
				break;
			case OP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 365;
				grouped_sequence();
				}
				break;
			case Al:
			case Bl:
			case Cl:
			case Dl:
			case El:
			case Fl:
			case Gl:
			case Hl:
			case Il:
			case Jl:
			case Kl:
			case Ll:
			case Ml:
			case Nl:
			case Ol:
			case Ql:
			case Rl:
			case Sl:
			case Tl:
			case Ul:
			case Vl:
			case Wl:
			case Xl:
			case Yl:
			case Zl:
			case Au:
			case Bu:
			case Cu:
			case Du:
			case Eu:
			case Fu:
			case Gu:
			case Hu:
			case Iu:
			case Ju:
			case Ku:
			case Lu:
			case Mu:
			case Nu:
			case Ou:
			case Pu:
			case Qu:
			case Ru:
			case Su:
			case Tu:
			case Uu:
			case Vu:
			case Wu:
			case Xu:
			case Yu:
			case Zu:
				EnterOuterAlt(_localctx, 4);
				{
				State = 366;
				meta_identifier();
				}
				break;
			case SQ:
			case FSQ:
			case DQ:
				EnterOuterAlt(_localctx, 5);
				{
				State = 367;
				terminal_string();
				}
				break;
			case QM:
				EnterOuterAlt(_localctx, 6);
				{
				State = 368;
				special_sequence();
				}
				break;
			case COMMA:
			case VBAR:
			case FSLASH:
			case EXCL:
			case CP:
			case CB:
			case FSLASH_CP:
			case CC:
			case COLONCP:
			case HYPHEN:
			case SEMI:
			case DOT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 369;
				empty_sequence();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Optional_sequenceContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Start_option_symbolContext start_option_symbol() {
			return GetRuleContext<Start_option_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Definitions_listContext definitions_list() {
			return GetRuleContext<Definitions_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_option_symbolContext end_option_symbol() {
			return GetRuleContext<End_option_symbolContext>(0);
		}
		public Optional_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optional_sequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterOptional_sequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitOptional_sequence(this);
		}
	}

	[RuleVersion(0)]
	public Optional_sequenceContext optional_sequence() {
		Optional_sequenceContext _localctx = new Optional_sequenceContext(Context, State);
		EnterRule(_localctx, 98, RULE_optional_sequence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			start_option_symbol();
			State = 373;
			definitions_list();
			State = 374;
			end_option_symbol();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeated_sequenceContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Start_repeat_symbolContext start_repeat_symbol() {
			return GetRuleContext<Start_repeat_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Definitions_listContext definitions_list() {
			return GetRuleContext<Definitions_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_repeat_symbolContext end_repeat_symbol() {
			return GetRuleContext<End_repeat_symbolContext>(0);
		}
		public Repeated_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeated_sequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterRepeated_sequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitRepeated_sequence(this);
		}
	}

	[RuleVersion(0)]
	public Repeated_sequenceContext repeated_sequence() {
		Repeated_sequenceContext _localctx = new Repeated_sequenceContext(Context, State);
		EnterRule(_localctx, 100, RULE_repeated_sequence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			start_repeat_symbol();
			State = 377;
			definitions_list();
			State = 378;
			end_repeat_symbol();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouped_sequenceContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Start_group_symbolContext start_group_symbol() {
			return GetRuleContext<Start_group_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Definitions_listContext definitions_list() {
			return GetRuleContext<Definitions_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_group_symbolContext end_group_symbol() {
			return GetRuleContext<End_group_symbolContext>(0);
		}
		public Grouped_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouped_sequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterGrouped_sequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitGrouped_sequence(this);
		}
	}

	[RuleVersion(0)]
	public Grouped_sequenceContext grouped_sequence() {
		Grouped_sequenceContext _localctx = new Grouped_sequenceContext(Context, State);
		EnterRule(_localctx, 102, RULE_grouped_sequence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380;
			start_group_symbol();
			State = 381;
			definitions_list();
			State = 382;
			end_group_symbol();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Empty_sequenceContext : AttributedParseTreeNode {
		public Empty_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty_sequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterEmpty_sequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitEmpty_sequence(this);
		}
	}

	[RuleVersion(0)]
	public Empty_sequenceContext empty_sequence() {
		Empty_sequenceContext _localctx = new Empty_sequenceContext(Context, State);
		EnterRule(_localctx, 104, RULE_empty_sequence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 26: return gap_free_symbol_sempred((Gap_free_symbolContext)_localctx, predIndex);
		case 28: return first_terminal_character_sempred((First_terminal_characterContext)_localctx, predIndex);
		case 29: return second_terminal_character_sempred((Second_terminal_characterContext)_localctx, predIndex);
		case 32: return commentless_symbol_sempred((Commentless_symbolContext)_localctx, predIndex);
		case 37: return special_sequence_character_sempred((Special_sequence_characterContext)_localctx, predIndex);
		}
		return true;
	}
	private bool gap_free_symbol_sempred(Gap_free_symbolContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return  !(
		    InputStream.LA(1) == SQ
		    || InputStream.LA(1) == FSQ
		    || InputStream.LA(1) == DQ
		    ) ;
		}
		return true;
	}
	private bool first_terminal_character_sempred(First_terminal_characterContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return  !(
		    InputStream.LA(1) == SQ
		    || InputStream.LA(1) == FSQ
		    ) ;
		}
		return true;
	}
	private bool second_terminal_character_sempred(Second_terminal_characterContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return  !(
		    InputStream.LA(1) == DQ
		    ) ;
		}
		return true;
	}
	private bool commentless_symbol_sempred(Commentless_symbolContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return  !(
		    (InputStream.LA(1) >= Al && InputStream.LA(1) <= Zl)
		    || (InputStream.LA(1) >= Au && InputStream.LA(1) <= Zu)

		    || (InputStream.LA(1) >= N0 && InputStream.LA(1) <= N9)

		    || InputStream.LA(1) == SQ
		    || InputStream.LA(1) == FSQ

		    || InputStream.LA(1) == DQ

		    || InputStream.LA(1) == STARCP

		    || InputStream.LA(1) == OPSTAR

		    || InputStream.LA(1) == QM
		    || InputStream.LA(1) == COLON
		    || InputStream.LA(1) == PLUS
		    || InputStream.LA(1) == UNDERSCORE
		    || InputStream.LA(1) == PERCENT
		    || InputStream.LA(1) == AT
		    || InputStream.LA(1) == AMP
		    || InputStream.LA(1) == POUND
		    || InputStream.LA(1) == DOLLAR
		    || InputStream.LA(1) == POUND
		    || InputStream.LA(1) == LT
		    || InputStream.LA(1) == GT
		    || InputStream.LA(1) == BSLASH
		    || InputStream.LA(1) == XOR
		    || InputStream.LA(1) == BQUOTE
		    || InputStream.LA(1) == TILDE
		    ) ;
		}
		return true;
	}
	private bool special_sequence_character_sempred(Special_sequence_characterContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return  !(
		    InputStream.LA(1) == QM
		    ) ;
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'k', '\x185', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x18', '\x6', '\x18', '\x9A', '\n', '\x18', '\r', 
		'\x18', '\xE', '\x18', '\x9B', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x5', '\x1B', '\xB6', '\n', '\x1B', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x5', '\x1C', '\xBB', '\n', '\x1C', '\x3', '\x1D', 
		'\x3', '\x1D', '\x6', '\x1D', '\xBF', '\n', '\x1D', '\r', '\x1D', '\xE', 
		'\x1D', '\xC0', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x6', '\x1D', '\xC7', '\n', '\x1D', '\r', '\x1D', '\xE', '\x1D', '\xC8', 
		'\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\xCD', '\n', '\x1D', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', 
		' ', '\xDA', '\n', ' ', '\x3', '!', '\a', '!', '\xDD', '\n', '!', '\f', 
		'!', '\xE', '!', '\xE0', '\v', '!', '\x3', '!', '\x3', '!', '\a', '!', 
		'\xE4', '\n', '!', '\f', '!', '\xE', '!', '\xE7', '\v', '!', '\x6', '!', 
		'\xE9', '\n', '!', '\r', '!', '\xE', '!', '\xEA', '\x3', '!', '\x3', '!', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x5', '\"', '\xF5', '\n', '\"', '\x3', '#', '\x3', '#', '\a', '#', 
		'\xF9', '\n', '#', '\f', '#', '\xE', '#', '\xFC', '\v', '#', '\x3', '$', 
		'\x3', '$', '\a', '$', '\x100', '\n', '$', '\f', '$', '\xE', '$', '\x103', 
		'\v', '$', '\x3', '%', '\x3', '%', '\x3', '%', '\x5', '%', '\x108', '\n', 
		'%', '\x3', '&', '\x3', '&', '\a', '&', '\x10C', '\n', '&', '\f', '&', 
		'\xE', '&', '\x10F', '\v', '&', '\x3', '&', '\x3', '&', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x5', '(', '\x119', 
		'\n', '(', '\x3', ')', '\x3', ')', '\a', ')', '\x11D', '\n', ')', '\f', 
		')', '\xE', ')', '\x120', '\v', ')', '\x3', ')', '\x3', ')', '\x3', '*', 
		'\a', '*', '\x125', '\n', '*', '\f', '*', '\xE', '*', '\x128', '\v', '*', 
		'\x3', '*', '\x3', '*', '\a', '*', '\x12C', '\n', '*', '\f', '*', '\xE', 
		'*', '\x12F', '\v', '*', '\x3', '*', '\x3', '*', '\a', '*', '\x133', '\n', 
		'*', '\f', '*', '\xE', '*', '\x136', '\v', '*', '\a', '*', '\x138', '\n', 
		'*', '\f', '*', '\xE', '*', '\x13B', '\v', '*', '\x3', '*', '\x3', '*', 
		'\x3', '+', '\x3', '+', '\a', '+', '\x141', '\n', '+', '\f', '+', '\xE', 
		'+', '\x144', '\v', '+', '\x3', '+', '\x3', '+', '\x3', ',', '\x3', ',', 
		'\x3', ',', '\x3', ',', '\x3', ',', '\x3', '-', '\x3', '-', '\x3', '-', 
		'\x3', '-', '\a', '-', '\x151', '\n', '-', '\f', '-', '\xE', '-', '\x154', 
		'\v', '-', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\a', '.', 
		'\x15A', '\n', '.', '\f', '.', '\xE', '.', '\x15D', '\v', '.', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x3', '/', '\x5', '/', '\x163', '\n', '/', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', 
		'\x5', '\x31', '\x16A', '\n', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x5', '\x32', '\x175', '\n', '\x32', '\x3', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x3', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x2', '\x2', 
		'\x37', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', 
		'@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 
		'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', '\x2', '\r', '\x4', 
		'\x2', '\x3', '\x11', '\x13', '\x36', '\x3', '\x2', '\x37', '@', '\x3', 
		'\x2', '\x43', '\x45', '\x3', '\x2', 'H', 'I', '\x3', '\x2', 'J', 'K', 
		'\x3', '\x2', 'M', 'N', '\x3', '\x2', 'T', 'U', '\x3', '\x2', 'V', 'W', 
		'\x3', '\x2', 'X', 'Y', '\x3', '\x2', 'Z', 'h', '\x3', '\x2', 'j', 'k', 
		'\x2', '\x189', '\x2', 'l', '\x3', '\x2', '\x2', '\x2', '\x4', 'n', '\x3', 
		'\x2', '\x2', '\x2', '\x6', 'p', '\x3', '\x2', '\x2', '\x2', '\b', 'r', 
		'\x3', '\x2', '\x2', '\x2', '\n', 't', '\x3', '\x2', '\x2', '\x2', '\f', 
		'v', '\x3', '\x2', '\x2', '\x2', '\xE', 'x', '\x3', '\x2', '\x2', '\x2', 
		'\x10', 'z', '\x3', '\x2', '\x2', '\x2', '\x12', '|', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '~', '\x3', '\x2', '\x2', '\x2', '\x16', '\x80', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\x82', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x86', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x88', '\x3', '\x2', '\x2', '\x2', ' ', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\x8C', '\x3', '\x2', '\x2', '\x2', '$', '\x8E', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x90', '\x3', '\x2', '\x2', '\x2', '(', 
		'\x92', '\x3', '\x2', '\x2', '\x2', '*', '\x94', '\x3', '\x2', '\x2', 
		'\x2', ',', '\x96', '\x3', '\x2', '\x2', '\x2', '.', '\x99', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x32', '\x9F', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\xB5', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\xBA', '\x3', '\x2', '\x2', '\x2', '\x38', '\xCC', '\x3', '\x2', 
		'\x2', '\x2', ':', '\xCE', '\x3', '\x2', '\x2', '\x2', '<', '\xD1', '\x3', 
		'\x2', '\x2', '\x2', '>', '\xD9', '\x3', '\x2', '\x2', '\x2', '@', '\xDE', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\xF4', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\xF6', '\x3', '\x2', '\x2', '\x2', '\x46', '\xFD', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x107', '\x3', '\x2', '\x2', '\x2', 'J', '\x109', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x112', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x118', '\x3', '\x2', '\x2', '\x2', 'P', '\x11A', '\x3', '\x2', 
		'\x2', '\x2', 'R', '\x126', '\x3', '\x2', '\x2', '\x2', 'T', '\x13E', 
		'\x3', '\x2', '\x2', '\x2', 'V', '\x147', '\x3', '\x2', '\x2', '\x2', 
		'X', '\x14C', '\x3', '\x2', '\x2', '\x2', 'Z', '\x155', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\x15E', '\x3', '\x2', '\x2', '\x2', '^', '\x164', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x169', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x174', '\x3', '\x2', '\x2', '\x2', '\x64', '\x176', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x17A', '\x3', '\x2', '\x2', '\x2', 'h', '\x17E', 
		'\x3', '\x2', '\x2', '\x2', 'j', '\x182', '\x3', '\x2', '\x2', '\x2', 
		'l', 'm', '\t', '\x2', '\x2', '\x2', 'm', '\x3', '\x3', '\x2', '\x2', 
		'\x2', 'n', 'o', '\t', '\x3', '\x2', '\x2', 'o', '\x5', '\x3', '\x2', 
		'\x2', '\x2', 'p', 'q', '\a', '\x41', '\x2', '\x2', 'q', '\a', '\x3', 
		'\x2', '\x2', '\x2', 'r', 's', '\a', '\x42', '\x2', '\x2', 's', '\t', 
		'\x3', '\x2', '\x2', '\x2', 't', 'u', '\t', '\x4', '\x2', '\x2', 'u', 
		'\v', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\a', '\x46', '\x2', '\x2', 
		'w', '\r', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\a', 'G', '\x2', '\x2', 
		'y', '\xF', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\t', '\x5', '\x2', 
		'\x2', '{', '\x11', '\x3', '\x2', '\x2', '\x2', '|', '}', '\t', '\x6', 
		'\x2', '\x2', '}', '\x13', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\a', 
		'L', '\x2', '\x2', '\x7F', '\x15', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'\x81', '\t', '\a', '\x2', '\x2', '\x81', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x83', '\a', 'O', '\x2', '\x2', '\x83', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x85', '\a', 'P', '\x2', '\x2', '\x85', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\a', 'Q', '\x2', 
		'\x2', '\x87', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\a', 
		'R', '\x2', '\x2', '\x89', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'\x8B', '\a', 'S', '\x2', '\x2', '\x8B', '!', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x8D', '\t', '\b', '\x2', '\x2', '\x8D', '#', '\x3', '\x2', '\x2', 
		'\x2', '\x8E', '\x8F', '\t', '\t', '\x2', '\x2', '\x8F', '%', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x91', '\t', '\n', '\x2', '\x2', '\x91', '\'', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\t', '\v', '\x2', '\x2', 
		'\x93', ')', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\a', 'Z', '\x2', 
		'\x2', '\x95', '+', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\a', 
		'i', '\x2', '\x2', '\x97', '-', '\x3', '\x2', '\x2', '\x2', '\x98', '\x9A', 
		'\t', '\f', '\x2', '\x2', '\x99', '\x98', '\x3', '\x2', '\x2', '\x2', 
		'\x9A', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x99', '\x3', '\x2', 
		'\x2', '\x2', '\x9B', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9C', '/', 
		'\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\a', 'k', '\x2', '\x2', '\x9E', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\a', 'j', '\x2', 
		'\x2', '\xA0', '\x33', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xB6', '\x5', 
		'\x2', '\x2', '\x2', '\xA2', '\xB6', '\x5', '\x4', '\x3', '\x2', '\xA3', 
		'\xB6', '\x5', '\x6', '\x4', '\x2', '\xA4', '\xB6', '\x5', '\b', '\x5', 
		'\x2', '\xA5', '\xB6', '\x5', '\n', '\x6', '\x2', '\xA6', '\xB6', '\x5', 
		'\f', '\a', '\x2', '\xA7', '\xB6', '\x5', '\xE', '\b', '\x2', '\xA8', 
		'\xB6', '\x5', '\x10', '\t', '\x2', '\xA9', '\xB6', '\x5', '\x12', '\n', 
		'\x2', '\xAA', '\xB6', '\x5', '\x14', '\v', '\x2', '\xAB', '\xB6', '\x5', 
		'\x16', '\f', '\x2', '\xAC', '\xB6', '\x5', '\x18', '\r', '\x2', '\xAD', 
		'\xB6', '\x5', '\x1A', '\xE', '\x2', '\xAE', '\xB6', '\x5', '\x1C', '\xF', 
		'\x2', '\xAF', '\xB6', '\x5', '\x1E', '\x10', '\x2', '\xB0', '\xB6', '\x5', 
		' ', '\x11', '\x2', '\xB1', '\xB6', '\x5', '\"', '\x12', '\x2', '\xB2', 
		'\xB6', '\x5', '$', '\x13', '\x2', '\xB3', '\xB6', '\x5', '&', '\x14', 
		'\x2', '\xB4', '\xB6', '\x5', '(', '\x15', '\x2', '\xB5', '\xA1', '\x3', 
		'\x2', '\x2', '\x2', '\xB5', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xB5', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', '\xB5', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xA6', '\x3', 
		'\x2', '\x2', '\x2', '\xB5', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xB5', 
		'\xA8', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\xB5', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\xB5', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xB5', 
		'\xAD', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xAE', '\x3', '\x2', '\x2', 
		'\x2', '\xB5', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB0', '\x3', 
		'\x2', '\x2', '\x2', '\xB5', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB5', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB3', '\x3', '\x2', '\x2', 
		'\x2', '\xB5', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB6', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\xB7', '\xB8', '\x6', '\x1C', '\x2', '\x2', '\xB8', 
		'\xBB', '\x5', '\x34', '\x1B', '\x2', '\xB9', '\xBB', '\x5', '\x38', '\x1D', 
		'\x2', '\xBA', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xB9', '\x3', 
		'\x2', '\x2', '\x2', '\xBB', '\x37', '\x3', '\x2', '\x2', '\x2', '\xBC', 
		'\xBE', '\x5', '\x16', '\f', '\x2', '\xBD', '\xBF', '\x5', ':', '\x1E', 
		'\x2', '\xBE', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC0', '\x3', 
		'\x2', '\x2', '\x2', '\xC0', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xC0', 
		'\xC1', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\x3', '\x2', '\x2', 
		'\x2', '\xC2', '\xC3', '\x5', '\x16', '\f', '\x2', '\xC3', '\xCD', '\x3', 
		'\x2', '\x2', '\x2', '\xC4', '\xC6', '\x5', '\x1A', '\xE', '\x2', '\xC5', 
		'\xC7', '\x5', '<', '\x1F', '\x2', '\xC6', '\xC5', '\x3', '\x2', '\x2', 
		'\x2', '\xC7', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC6', '\x3', 
		'\x2', '\x2', '\x2', '\xC8', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xC9', 
		'\xCA', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', '\x5', '\x1A', '\xE', 
		'\x2', '\xCB', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xBC', '\x3', 
		'\x2', '\x2', '\x2', '\xCC', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xCD', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', '\x6', '\x1E', '\x3', 
		'\x2', '\xCF', '\xD0', '\x5', '\x34', '\x1B', '\x2', '\xD0', ';', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xD2', '\x6', '\x1F', '\x4', '\x2', '\xD2', 
		'\xD3', '\x5', '\x34', '\x1B', '\x2', '\xD3', '=', '\x3', '\x2', '\x2', 
		'\x2', '\xD4', '\xDA', '\x5', '*', '\x16', '\x2', '\xD5', '\xDA', '\x5', 
		',', '\x17', '\x2', '\xD6', '\xDA', '\x5', '.', '\x18', '\x2', '\xD7', 
		'\xDA', '\x5', '\x30', '\x19', '\x2', '\xD8', '\xDA', '\x5', '\x32', '\x1A', 
		'\x2', '\xD9', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xD5', '\x3', 
		'\x2', '\x2', '\x2', '\xD9', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD9', 
		'\xD7', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xD8', '\x3', '\x2', '\x2', 
		'\x2', '\xDA', '?', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDD', '\x5', 
		'>', ' ', '\x2', '\xDC', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xE0', 
		'\x3', '\x2', '\x2', '\x2', '\xDE', '\xDC', '\x3', '\x2', '\x2', '\x2', 
		'\xDE', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE8', '\x3', '\x2', 
		'\x2', '\x2', '\xE0', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE5', 
		'\x5', '\x36', '\x1C', '\x2', '\xE2', '\xE4', '\x5', '>', ' ', '\x2', 
		'\xE3', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE7', '\x3', '\x2', 
		'\x2', '\x2', '\xE5', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', 
		'\x3', '\x2', '\x2', '\x2', '\xE6', '\xE9', '\x3', '\x2', '\x2', '\x2', 
		'\xE7', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE1', '\x3', '\x2', 
		'\x2', '\x2', '\xE9', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xE8', 
		'\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', '\x3', '\x2', '\x2', '\x2', 
		'\xEB', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', '\a', '\x2', 
		'\x2', '\x3', '\xED', '\x41', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', 
		'\x6', '\"', '\x5', '\x2', '\xEF', '\xF5', '\x5', '\x34', '\x1B', '\x2', 
		'\xF0', '\xF5', '\x5', '\x46', '$', '\x2', '\xF1', '\xF5', '\x5', '\x44', 
		'#', '\x2', '\xF2', '\xF5', '\x5', '\x38', '\x1D', '\x2', '\xF3', '\xF5', 
		'\x5', 'J', '&', '\x2', '\xF4', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xF4', 
		'\xF0', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF1', '\x3', '\x2', '\x2', 
		'\x2', '\xF4', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF3', '\x3', 
		'\x2', '\x2', '\x2', '\xF5', '\x43', '\x3', '\x2', '\x2', '\x2', '\xF6', 
		'\xFA', '\x5', '\x4', '\x3', '\x2', '\xF7', '\xF9', '\x5', '\x4', '\x3', 
		'\x2', '\xF8', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFC', '\x3', 
		'\x2', '\x2', '\x2', '\xFA', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xFA', 
		'\xFB', '\x3', '\x2', '\x2', '\x2', '\xFB', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\xFC', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFD', '\x101', '\x5', 
		'\x2', '\x2', '\x2', '\xFE', '\x100', '\x5', 'H', '%', '\x2', '\xFF', 
		'\xFE', '\x3', '\x2', '\x2', '\x2', '\x100', '\x103', '\x3', '\x2', '\x2', 
		'\x2', '\x101', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x101', '\x102', 
		'\x3', '\x2', '\x2', '\x2', '\x102', 'G', '\x3', '\x2', '\x2', '\x2', 
		'\x103', '\x101', '\x3', '\x2', '\x2', '\x2', '\x104', '\x108', '\x5', 
		'\x2', '\x2', '\x2', '\x105', '\x108', '\x5', '\x4', '\x3', '\x2', '\x106', 
		'\x108', '\x5', '*', '\x16', '\x2', '\x107', '\x104', '\x3', '\x2', '\x2', 
		'\x2', '\x107', '\x105', '\x3', '\x2', '\x2', '\x2', '\x107', '\x106', 
		'\x3', '\x2', '\x2', '\x2', '\x108', 'I', '\x3', '\x2', '\x2', '\x2', 
		'\x109', '\x10D', '\x5', '\x1C', '\xF', '\x2', '\x10A', '\x10C', '\x5', 
		'L', '\'', '\x2', '\x10B', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10C', 
		'\x10F', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10B', '\x3', '\x2', '\x2', 
		'\x2', '\x10D', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x110', 
		'\x3', '\x2', '\x2', '\x2', '\x10F', '\x10D', '\x3', '\x2', '\x2', '\x2', 
		'\x110', '\x111', '\x5', '\x1C', '\xF', '\x2', '\x111', 'K', '\x3', '\x2', 
		'\x2', '\x2', '\x112', '\x113', '\x6', '\'', '\x6', '\x2', '\x113', '\x114', 
		'\x5', '\x34', '\x1B', '\x2', '\x114', 'M', '\x3', '\x2', '\x2', '\x2', 
		'\x115', '\x119', '\x5', 'P', ')', '\x2', '\x116', '\x119', '\x5', '(', 
		'\x15', '\x2', '\x117', '\x119', '\x5', '\x42', '\"', '\x2', '\x118', 
		'\x115', '\x3', '\x2', '\x2', '\x2', '\x118', '\x116', '\x3', '\x2', '\x2', 
		'\x2', '\x118', '\x117', '\x3', '\x2', '\x2', '\x2', '\x119', 'O', '\x3', 
		'\x2', '\x2', '\x2', '\x11A', '\x11E', '\x5', '\x1E', '\x10', '\x2', '\x11B', 
		'\x11D', '\x5', 'N', '(', '\x2', '\x11C', '\x11B', '\x3', '\x2', '\x2', 
		'\x2', '\x11D', '\x120', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11C', 
		'\x3', '\x2', '\x2', '\x2', '\x11E', '\x11F', '\x3', '\x2', '\x2', '\x2', 
		'\x11F', '\x121', '\x3', '\x2', '\x2', '\x2', '\x120', '\x11E', '\x3', 
		'\x2', '\x2', '\x2', '\x121', '\x122', '\x5', '\f', '\a', '\x2', '\x122', 
		'Q', '\x3', '\x2', '\x2', '\x2', '\x123', '\x125', '\x5', 'P', ')', '\x2', 
		'\x124', '\x123', '\x3', '\x2', '\x2', '\x2', '\x125', '\x128', '\x3', 
		'\x2', '\x2', '\x2', '\x126', '\x124', '\x3', '\x2', '\x2', '\x2', '\x126', 
		'\x127', '\x3', '\x2', '\x2', '\x2', '\x127', '\x129', '\x3', '\x2', '\x2', 
		'\x2', '\x128', '\x126', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12D', 
		'\x5', '\x42', '\"', '\x2', '\x12A', '\x12C', '\x5', 'P', ')', '\x2', 
		'\x12B', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12F', '\x3', 
		'\x2', '\x2', '\x2', '\x12D', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x12D', 
		'\x12E', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x139', '\x3', '\x2', '\x2', 
		'\x2', '\x12F', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x130', '\x134', 
		'\x5', '\x42', '\"', '\x2', '\x131', '\x133', '\x5', 'P', ')', '\x2', 
		'\x132', '\x131', '\x3', '\x2', '\x2', '\x2', '\x133', '\x136', '\x3', 
		'\x2', '\x2', '\x2', '\x134', '\x132', '\x3', '\x2', '\x2', '\x2', '\x134', 
		'\x135', '\x3', '\x2', '\x2', '\x2', '\x135', '\x138', '\x3', '\x2', '\x2', 
		'\x2', '\x136', '\x134', '\x3', '\x2', '\x2', '\x2', '\x137', '\x130', 
		'\x3', '\x2', '\x2', '\x2', '\x138', '\x13B', '\x3', '\x2', '\x2', '\x2', 
		'\x139', '\x137', '\x3', '\x2', '\x2', '\x2', '\x139', '\x13A', '\x3', 
		'\x2', '\x2', '\x2', '\x13A', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13B', 
		'\x139', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13D', '\a', '\x2', '\x2', 
		'\x3', '\x13D', 'S', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x142', '\x5', 
		'V', ',', '\x2', '\x13F', '\x141', '\x5', 'V', ',', '\x2', '\x140', '\x13F', 
		'\x3', '\x2', '\x2', '\x2', '\x141', '\x144', '\x3', '\x2', '\x2', '\x2', 
		'\x142', '\x140', '\x3', '\x2', '\x2', '\x2', '\x142', '\x143', '\x3', 
		'\x2', '\x2', '\x2', '\x143', '\x145', '\x3', '\x2', '\x2', '\x2', '\x144', 
		'\x142', '\x3', '\x2', '\x2', '\x2', '\x145', '\x146', '\a', '\x2', '\x2', 
		'\x3', '\x146', 'U', '\x3', '\x2', '\x2', '\x2', '\x147', '\x148', '\x5', 
		'\x46', '$', '\x2', '\x148', '\x149', '\x5', '\b', '\x5', '\x2', '\x149', 
		'\x14A', '\x5', 'X', '-', '\x2', '\x14A', '\x14B', '\x5', '&', '\x14', 
		'\x2', '\x14B', 'W', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x152', '\x5', 
		'Z', '.', '\x2', '\x14D', '\x14E', '\x5', '\n', '\x6', '\x2', '\x14E', 
		'\x14F', '\x5', 'Z', '.', '\x2', '\x14F', '\x151', '\x3', '\x2', '\x2', 
		'\x2', '\x150', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x151', '\x154', 
		'\x3', '\x2', '\x2', '\x2', '\x152', '\x150', '\x3', '\x2', '\x2', '\x2', 
		'\x152', '\x153', '\x3', '\x2', '\x2', '\x2', '\x153', 'Y', '\x3', '\x2', 
		'\x2', '\x2', '\x154', '\x152', '\x3', '\x2', '\x2', '\x2', '\x155', '\x15B', 
		'\x5', '\\', '/', '\x2', '\x156', '\x157', '\x5', '\x6', '\x4', '\x2', 
		'\x157', '\x158', '\x5', '\\', '/', '\x2', '\x158', '\x15A', '\x3', '\x2', 
		'\x2', '\x2', '\x159', '\x156', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x15D', 
		'\x3', '\x2', '\x2', '\x2', '\x15B', '\x159', '\x3', '\x2', '\x2', '\x2', 
		'\x15B', '\x15C', '\x3', '\x2', '\x2', '\x2', '\x15C', '[', '\x3', '\x2', 
		'\x2', '\x2', '\x15D', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x162', 
		'\x5', '`', '\x31', '\x2', '\x15F', '\x160', '\x5', '\x14', '\v', '\x2', 
		'\x160', '\x161', '\x5', '^', '\x30', '\x2', '\x161', '\x163', '\x3', 
		'\x2', '\x2', '\x2', '\x162', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x162', 
		'\x163', '\x3', '\x2', '\x2', '\x2', '\x163', ']', '\x3', '\x2', '\x2', 
		'\x2', '\x164', '\x165', '\x5', '`', '\x31', '\x2', '\x165', '_', '\x3', 
		'\x2', '\x2', '\x2', '\x166', '\x167', '\x5', '\x44', '#', '\x2', '\x167', 
		'\x168', '\x5', '\x18', '\r', '\x2', '\x168', '\x16A', '\x3', '\x2', '\x2', 
		'\x2', '\x169', '\x166', '\x3', '\x2', '\x2', '\x2', '\x169', '\x16A', 
		'\x3', '\x2', '\x2', '\x2', '\x16A', '\x16B', '\x3', '\x2', '\x2', '\x2', 
		'\x16B', '\x16C', '\x5', '\x62', '\x32', '\x2', '\x16C', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x16D', '\x175', '\x5', '\x64', '\x33', '\x2', '\x16E', 
		'\x175', '\x5', '\x66', '\x34', '\x2', '\x16F', '\x175', '\x5', 'h', '\x35', 
		'\x2', '\x170', '\x175', '\x5', '\x46', '$', '\x2', '\x171', '\x175', 
		'\x5', '\x38', '\x1D', '\x2', '\x172', '\x175', '\x5', 'J', '&', '\x2', 
		'\x173', '\x175', '\x5', 'j', '\x36', '\x2', '\x174', '\x16D', '\x3', 
		'\x2', '\x2', '\x2', '\x174', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x174', 
		'\x16F', '\x3', '\x2', '\x2', '\x2', '\x174', '\x170', '\x3', '\x2', '\x2', 
		'\x2', '\x174', '\x171', '\x3', '\x2', '\x2', '\x2', '\x174', '\x172', 
		'\x3', '\x2', '\x2', '\x2', '\x174', '\x173', '\x3', '\x2', '\x2', '\x2', 
		'\x175', '\x63', '\x3', '\x2', '\x2', '\x2', '\x176', '\x177', '\x5', 
		'\"', '\x12', '\x2', '\x177', '\x178', '\x5', 'X', '-', '\x2', '\x178', 
		'\x179', '\x5', '\x10', '\t', '\x2', '\x179', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x17A', '\x17B', '\x5', '$', '\x13', '\x2', '\x17B', '\x17C', 
		'\x5', 'X', '-', '\x2', '\x17C', '\x17D', '\x5', '\x12', '\n', '\x2', 
		'\x17D', 'g', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x17F', '\x5', ' ', 
		'\x11', '\x2', '\x17F', '\x180', '\x5', 'X', '-', '\x2', '\x180', '\x181', 
		'\x5', '\xE', '\b', '\x2', '\x181', 'i', '\x3', '\x2', '\x2', '\x2', '\x182', 
		'\x183', '\x3', '\x2', '\x2', '\x2', '\x183', 'k', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', '\x9B', '\xB5', '\xBA', '\xC0', '\xC8', '\xCC', '\xD9', 
		'\xDE', '\xE5', '\xEA', '\xF4', '\xFA', '\x101', '\x107', '\x10D', '\x118', 
		'\x11E', '\x126', '\x12D', '\x134', '\x139', '\x142', '\x152', '\x15B', 
		'\x162', '\x169', '\x174',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace LanguageServer
