//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from BisonParser.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LanguageServer {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class BisonParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SC_EPILOGUE=1, PercentPercent=2, NONASSOC=3, CODE=4, PERCENT_DEBUG=5, 
		DEFAULT_PREC=6, DEFINE=7, DEFINES=8, DESTRUCTOR=9, DPREC=10, EMPTY_RULE=11, 
		EXPECT=12, EXPECT_RR=13, PERCENT_FILE_PREFIX=14, INITIAL_ACTION=15, GLR_PARSER=16, 
		LANGUAGE=17, PERCENT_LEFT=18, LEX=19, LOCATIONS=20, MERGE=21, NO_DEFAULT_PREC=22, 
		NO_LINES=23, PERCENT_NONASSOC=24, NONDETERMINISTIC_PARSER=25, NTERM=26, 
		PARAM=27, PARSE=28, PERCENT_PREC=29, PRECEDENCE=30, PRINTER=31, REQUIRE=32, 
		PERCENT_RIGHT=33, SKELETON=34, PERCENT_START=35, TOKEN=36, PERCENT_TOKEN=37, 
		TOKEN_TABLE=38, PERCENT_TYPE=39, PERCENT_UNION=40, VERBOSE=41, PERCENT_YACC=42, 
		PERCENT_PURE_PARSER=43, PERCENT_NAME_PREFIX=44, OBS_DEFAULT_PREC=45, OBS_PERCENT_ERROR_VERBOSE=46, 
		OBS_EXPECT_RR=47, OBS_PERCENT_FILE_PREFIX=48, OBS_FIXED_OUTPUT=49, OBS_NO_DEFAULT_PREC=50, 
		OBS_NO_LINES=51, OBS_OUTPUT=52, OBS_TOKEN_TABLE=53, BRACED_CODE=54, BRACED_PREDICATE=55, 
		BRACKETED_ID=56, CHAR=57, COLON=58, EQUAL=59, ID=60, PERCENT_PERCENT=61, 
		PIPE=62, SEMICOLON=63, TAG=64, TAG_ANY=65, TAG_NONE=66, STRING=67, INT=68, 
		LPAREN=69, RPAREN=70, BLOCK_COMMENT=71, LINE_COMMENT=72, WS=73, PROLOGUE=74, 
		EPILOGUE=75;
	public const int
		RULE_input = 0, RULE_prologue_declarations = 1, RULE_prologue_declaration = 2, 
		RULE_params = 3, RULE_grammar_declaration = 4, RULE_code_props_type = 5, 
		RULE_union_name = 6, RULE_symbol_declaration = 7, RULE_precedence_declarator = 8, 
		RULE_tag_opt = 9, RULE_generic_symlist = 10, RULE_generic_symlist_item = 11, 
		RULE_tag = 12, RULE_nterm_decls = 13, RULE_token_decls = 14, RULE_token_decl_1 = 15, 
		RULE_token_decl = 16, RULE_int_opt = 17, RULE_alias = 18, RULE_token_decls_for_prec = 19, 
		RULE_token_decl_for_prec_1 = 20, RULE_token_decl_for_prec = 21, RULE_symbol_decls = 22, 
		RULE_symbol_decl_1 = 23, RULE_bison_grammar = 24, RULE_rules_or_grammar_declaration = 25, 
		RULE_rules = 26, RULE_rhses_1 = 27, RULE_rhs = 28, RULE_named_ref_opt = 29, 
		RULE_variable = 30, RULE_value = 31, RULE_id = 32, RULE_symbol = 33, RULE_string_as_id = 34, 
		RULE_epilogue_opt = 35, RULE_actionBlock = 36;
	public static readonly string[] ruleNames = {
		"input", "prologue_declarations", "prologue_declaration", "params", "grammar_declaration", 
		"code_props_type", "union_name", "symbol_declaration", "precedence_declarator", 
		"tag_opt", "generic_symlist", "generic_symlist_item", "tag", "nterm_decls", 
		"token_decls", "token_decl_1", "token_decl", "int_opt", "alias", "token_decls_for_prec", 
		"token_decl_for_prec_1", "token_decl_for_prec", "symbol_decls", "symbol_decl_1", 
		"bison_grammar", "rules_or_grammar_declaration", "rules", "rhses_1", "rhs", 
		"named_ref_opt", "variable", "value", "id", "symbol", "string_as_id", 
		"epilogue_opt", "actionBlock"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'%%'", "'%binary'", "'%code'", "'%debug'", "'%default-prec'", 
		"'%define'", "'%defines'", "'%destructor'", "'%dprec'", "'%empty'", "'%expect'", 
		"'%expect-rr'", "'%file-prefix'", "'%initial-action'", "'%glr-parser'", 
		"'%language'", "'%left'", "'%lex-param'", "'%locations'", "'%merge'", 
		"'%no-default-prec'", "'%no-lines'", "'%nonassoc'", "'%nondeterministic-parser'", 
		"'%nterm'", "'%param'", "'%parse-param'", "'%prec'", "'%precedence'", 
		"'%printer'", "'%require'", "'%right'", "'%skeleton'", "'%start'", "'%term'", 
		"'%token'", null, "'%type'", "'%union'", "'%verbose'", "'%yacc'", null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "':'", "'='", null, null, "'|'", "';'", null, "'<*>'", "'<>'", 
		null, null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SC_EPILOGUE", "PercentPercent", "NONASSOC", "CODE", "PERCENT_DEBUG", 
		"DEFAULT_PREC", "DEFINE", "DEFINES", "DESTRUCTOR", "DPREC", "EMPTY_RULE", 
		"EXPECT", "EXPECT_RR", "PERCENT_FILE_PREFIX", "INITIAL_ACTION", "GLR_PARSER", 
		"LANGUAGE", "PERCENT_LEFT", "LEX", "LOCATIONS", "MERGE", "NO_DEFAULT_PREC", 
		"NO_LINES", "PERCENT_NONASSOC", "NONDETERMINISTIC_PARSER", "NTERM", "PARAM", 
		"PARSE", "PERCENT_PREC", "PRECEDENCE", "PRINTER", "REQUIRE", "PERCENT_RIGHT", 
		"SKELETON", "PERCENT_START", "TOKEN", "PERCENT_TOKEN", "TOKEN_TABLE", 
		"PERCENT_TYPE", "PERCENT_UNION", "VERBOSE", "PERCENT_YACC", "PERCENT_PURE_PARSER", 
		"PERCENT_NAME_PREFIX", "OBS_DEFAULT_PREC", "OBS_PERCENT_ERROR_VERBOSE", 
		"OBS_EXPECT_RR", "OBS_PERCENT_FILE_PREFIX", "OBS_FIXED_OUTPUT", "OBS_NO_DEFAULT_PREC", 
		"OBS_NO_LINES", "OBS_OUTPUT", "OBS_TOKEN_TABLE", "BRACED_CODE", "BRACED_PREDICATE", 
		"BRACKETED_ID", "CHAR", "COLON", "EQUAL", "ID", "PERCENT_PERCENT", "PIPE", 
		"SEMICOLON", "TAG", "TAG_ANY", "TAG_NONE", "STRING", "INT", "LPAREN", 
		"RPAREN", "BLOCK_COMMENT", "LINE_COMMENT", "WS", "PROLOGUE", "EPILOGUE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BisonParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static BisonParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BisonParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BisonParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InputContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Prologue_declarationsContext prologue_declarations() {
			return GetRuleContext<Prologue_declarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PercentPercent() { return GetToken(BisonParser.PercentPercent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bison_grammarContext bison_grammar() {
			return GetRuleContext<Bison_grammarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Epilogue_optContext epilogue_opt() {
			return GetRuleContext<Epilogue_optContext>(0);
		}
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterInput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitInput(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 0, RULE_input);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			prologue_declarations(0);
			State = 75;
			Match(PercentPercent);
			State = 76;
			bison_grammar(0);
			State = 77;
			epilogue_opt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prologue_declarationsContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Prologue_declarationsContext prologue_declarations() {
			return GetRuleContext<Prologue_declarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prologue_declarationContext prologue_declaration() {
			return GetRuleContext<Prologue_declarationContext>(0);
		}
		public Prologue_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prologue_declarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterPrologue_declarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitPrologue_declarations(this);
		}
	}

	[RuleVersion(0)]
	public Prologue_declarationsContext prologue_declarations() {
		return prologue_declarations(0);
	}

	private Prologue_declarationsContext prologue_declarations(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Prologue_declarationsContext _localctx = new Prologue_declarationsContext(Context, _parentState);
		Prologue_declarationsContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_prologue_declarations, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			}
			Context.Stop = TokenStream.LT(-1);
			State = 84;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Prologue_declarationsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_prologue_declarations);
					State = 80;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 81;
					prologue_declaration();
					}
					} 
				}
				State = 86;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Prologue_declarationContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Grammar_declarationContext grammar_declaration() {
			return GetRuleContext<Grammar_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROLOGUE() { return GetToken(BisonParser.PROLOGUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_DEBUG() { return GetToken(BisonParser.PERCENT_DEBUG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCATIONS() { return GetToken(BisonParser.LOCATIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(BisonParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINES() { return GetToken(BisonParser.DEFINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(BisonParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBS_PERCENT_ERROR_VERBOSE() { return GetToken(BisonParser.OBS_PERCENT_ERROR_VERBOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPECT() { return GetToken(BisonParser.EXPECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(BisonParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPECT_RR() { return GetToken(BisonParser.EXPECT_RR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_FILE_PREFIX() { return GetToken(BisonParser.PERCENT_FILE_PREFIX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLR_PARSER() { return GetToken(BisonParser.GLR_PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_ACTION() { return GetToken(BisonParser.INITIAL_ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext[] actionBlock() {
			return GetRuleContexts<ActionBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock(int i) {
			return GetRuleContext<ActionBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(BisonParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_NAME_PREFIX() { return GetToken(BisonParser.PERCENT_NAME_PREFIX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_LINES() { return GetToken(BisonParser.NO_LINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONDETERMINISTIC_PARSER() { return GetToken(BisonParser.NONDETERMINISTIC_PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBS_OUTPUT() { return GetToken(BisonParser.OBS_OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM() { return GetToken(BisonParser.PARAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_PURE_PARSER() { return GetToken(BisonParser.PERCENT_PURE_PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSE() { return GetToken(BisonParser.PARSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEX() { return GetToken(BisonParser.LEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE() { return GetToken(BisonParser.REQUIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKELETON() { return GetToken(BisonParser.SKELETON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_TABLE() { return GetToken(BisonParser.TOKEN_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBOSE() { return GetToken(BisonParser.VERBOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_YACC() { return GetToken(BisonParser.PERCENT_YACC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(BisonParser.SEMICOLON, 0); }
		public Prologue_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prologue_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterPrologue_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitPrologue_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Prologue_declarationContext prologue_declaration() {
		Prologue_declarationContext _localctx = new Prologue_declarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_prologue_declaration);
		try {
			int _alt;
			State = 135;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 87;
				grammar_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 88;
				Match(PROLOGUE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 89;
				Match(PERCENT_DEBUG);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 90;
				Match(LOCATIONS);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 91;
				Match(DEFINE);
				State = 92;
				variable();
				State = 93;
				value();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 95;
				Match(DEFINES);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 96;
				Match(DEFINES);
				State = 97;
				Match(STRING);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 98;
				Match(OBS_PERCENT_ERROR_VERBOSE);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 99;
				Match(EXPECT);
				State = 100;
				Match(INT);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 101;
				Match(EXPECT_RR);
				State = 102;
				Match(INT);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 103;
				Match(PERCENT_FILE_PREFIX);
				State = 104;
				Match(STRING);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 105;
				Match(GLR_PARSER);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 106;
				Match(INITIAL_ACTION);
				State = 107;
				actionBlock();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 108;
				Match(LANGUAGE);
				State = 109;
				Match(STRING);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 110;
				Match(PERCENT_NAME_PREFIX);
				State = 111;
				Match(STRING);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 112;
				Match(NO_LINES);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 113;
				Match(NONDETERMINISTIC_PARSER);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 114;
				Match(OBS_OUTPUT);
				State = 115;
				Match(STRING);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 116;
				Match(PARAM);
				State = 117;
				@params(0);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 118;
				Match(PERCENT_PURE_PARSER);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 119;
				Match(PARSE);
				State = 121;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 120;
						actionBlock();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 123;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 125;
				Match(LEX);
				State = 126;
				actionBlock();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 127;
				Match(REQUIRE);
				State = 128;
				Match(STRING);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 129;
				Match(SKELETON);
				State = 130;
				Match(STRING);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 131;
				Match(TOKEN_TABLE);
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 132;
				Match(VERBOSE);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 133;
				Match(PERCENT_YACC);
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 134;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitParams(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		return @params(0);
	}

	private ParamsContext @params(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ParamsContext _localctx = new ParamsContext(Context, _parentState);
		ParamsContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_params, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 138;
			actionBlock();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 144;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ParamsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_params);
					State = 140;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 141;
					actionBlock();
					}
					} 
				}
				State = 146;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Grammar_declarationContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_declarationContext symbol_declaration() {
			return GetRuleContext<Symbol_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_START() { return GetToken(BisonParser.PERCENT_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_props_typeContext code_props_type() {
			return GetRuleContext<Code_props_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_symlistContext generic_symlist() {
			return GetRuleContext<Generic_symlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_PREC() { return GetToken(BisonParser.DEFAULT_PREC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_DEFAULT_PREC() { return GetToken(BisonParser.NO_DEFAULT_PREC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODE() { return GetToken(BisonParser.CODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(BisonParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_UNION() { return GetToken(BisonParser.PERCENT_UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Union_nameContext union_name() {
			return GetRuleContext<Union_nameContext>(0);
		}
		public Grammar_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammar_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterGrammar_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitGrammar_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Grammar_declarationContext grammar_declaration() {
		Grammar_declarationContext _localctx = new Grammar_declarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_grammar_declaration);
		try {
			State = 165;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 147;
				symbol_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 148;
				Match(PERCENT_START);
				State = 149;
				symbol();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 150;
				code_props_type();
				State = 151;
				actionBlock();
				State = 152;
				generic_symlist(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 154;
				Match(DEFAULT_PREC);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 155;
				Match(NO_DEFAULT_PREC);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 156;
				Match(CODE);
				State = 157;
				actionBlock();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 158;
				Match(CODE);
				State = 159;
				Match(ID);
				State = 160;
				actionBlock();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 161;
				Match(PERCENT_UNION);
				State = 162;
				union_name();
				State = 163;
				actionBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_props_typeContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESTRUCTOR() { return GetToken(BisonParser.DESTRUCTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINTER() { return GetToken(BisonParser.PRINTER, 0); }
		public Code_props_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_props_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterCode_props_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitCode_props_type(this);
		}
	}

	[RuleVersion(0)]
	public Code_props_typeContext code_props_type() {
		Code_props_typeContext _localctx = new Code_props_typeContext(Context, State);
		EnterRule(_localctx, 10, RULE_code_props_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			_la = TokenStream.LA(1);
			if ( !(_la==DESTRUCTOR || _la==PRINTER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Union_nameContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(BisonParser.ID, 0); }
		public Union_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_union_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterUnion_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitUnion_name(this);
		}
	}

	[RuleVersion(0)]
	public Union_nameContext union_name() {
		Union_nameContext _localctx = new Union_nameContext(Context, State);
		EnterRule(_localctx, 12, RULE_union_name);
		try {
			State = 171;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BRACED_CODE:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 170;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_declarationContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTERM() { return GetToken(BisonParser.NTERM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nterm_declsContext nterm_decls() {
			return GetRuleContext<Nterm_declsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_TOKEN() { return GetToken(BisonParser.PERCENT_TOKEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Token_declsContext token_decls() {
			return GetRuleContext<Token_declsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_TYPE() { return GetToken(BisonParser.PERCENT_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_declsContext symbol_decls() {
			return GetRuleContext<Symbol_declsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Precedence_declaratorContext precedence_declarator() {
			return GetRuleContext<Precedence_declaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Token_decls_for_precContext token_decls_for_prec() {
			return GetRuleContext<Token_decls_for_precContext>(0);
		}
		public Symbol_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterSymbol_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitSymbol_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_declarationContext symbol_declaration() {
		Symbol_declarationContext _localctx = new Symbol_declarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_symbol_declaration);
		try {
			State = 182;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NTERM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 173;
				Match(NTERM);
				State = 174;
				nterm_decls();
				}
				break;
			case PERCENT_TOKEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 175;
				Match(PERCENT_TOKEN);
				State = 176;
				token_decls();
				}
				break;
			case PERCENT_TYPE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 177;
				Match(PERCENT_TYPE);
				State = 178;
				symbol_decls(0);
				}
				break;
			case PERCENT_LEFT:
			case PERCENT_NONASSOC:
			case PRECEDENCE:
			case PERCENT_RIGHT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 179;
				precedence_declarator();
				State = 180;
				token_decls_for_prec(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Precedence_declaratorContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_LEFT() { return GetToken(BisonParser.PERCENT_LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_RIGHT() { return GetToken(BisonParser.PERCENT_RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_NONASSOC() { return GetToken(BisonParser.PERCENT_NONASSOC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDENCE() { return GetToken(BisonParser.PRECEDENCE, 0); }
		public Precedence_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precedence_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterPrecedence_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitPrecedence_declarator(this);
		}
	}

	[RuleVersion(0)]
	public Precedence_declaratorContext precedence_declarator() {
		Precedence_declaratorContext _localctx = new Precedence_declaratorContext(Context, State);
		EnterRule(_localctx, 16, RULE_precedence_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PERCENT_LEFT) | (1L << PERCENT_NONASSOC) | (1L << PRECEDENCE) | (1L << PERCENT_RIGHT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tag_optContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG() { return GetToken(BisonParser.TAG, 0); }
		public Tag_optContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tag_opt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterTag_opt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitTag_opt(this);
		}
	}

	[RuleVersion(0)]
	public Tag_optContext tag_opt() {
		Tag_optContext _localctx = new Tag_optContext(Context, State);
		EnterRule(_localctx, 18, RULE_tag_opt);
		try {
			State = 188;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BRACED_CODE:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case TAG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 187;
				Match(TAG);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_symlistContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Generic_symlist_itemContext generic_symlist_item() {
			return GetRuleContext<Generic_symlist_itemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_symlistContext generic_symlist() {
			return GetRuleContext<Generic_symlistContext>(0);
		}
		public Generic_symlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_symlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterGeneric_symlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitGeneric_symlist(this);
		}
	}

	[RuleVersion(0)]
	public Generic_symlistContext generic_symlist() {
		return generic_symlist(0);
	}

	private Generic_symlistContext generic_symlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Generic_symlistContext _localctx = new Generic_symlistContext(Context, _parentState);
		Generic_symlistContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_generic_symlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 191;
			generic_symlist_item();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 197;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Generic_symlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_generic_symlist);
					State = 193;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 194;
					generic_symlist_item();
					}
					} 
				}
				State = 199;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Generic_symlist_itemContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagContext tag() {
			return GetRuleContext<TagContext>(0);
		}
		public Generic_symlist_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_symlist_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterGeneric_symlist_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitGeneric_symlist_item(this);
		}
	}

	[RuleVersion(0)]
	public Generic_symlist_itemContext generic_symlist_item() {
		Generic_symlist_itemContext _localctx = new Generic_symlist_itemContext(Context, State);
		EnterRule(_localctx, 22, RULE_generic_symlist_item);
		try {
			State = 202;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
			case ID:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 200;
				symbol();
				}
				break;
			case TAG:
			case TAG_ANY:
			case TAG_NONE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 201;
				tag();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG() { return GetToken(BisonParser.TAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG_ANY() { return GetToken(BisonParser.TAG_ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG_NONE() { return GetToken(BisonParser.TAG_NONE, 0); }
		public TagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterTag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitTag(this);
		}
	}

	[RuleVersion(0)]
	public TagContext tag() {
		TagContext _localctx = new TagContext(Context, State);
		EnterRule(_localctx, 24, RULE_tag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TAG - 64)) | (1L << (TAG_ANY - 64)) | (1L << (TAG_NONE - 64)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nterm_declsContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Token_declsContext token_decls() {
			return GetRuleContext<Token_declsContext>(0);
		}
		public Nterm_declsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nterm_decls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterNterm_decls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitNterm_decls(this);
		}
	}

	[RuleVersion(0)]
	public Nterm_declsContext nterm_decls() {
		Nterm_declsContext _localctx = new Nterm_declsContext(Context, State);
		EnterRule(_localctx, 26, RULE_nterm_decls);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			token_decls();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Token_declsContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Token_decl_1Context[] token_decl_1() {
			return GetRuleContexts<Token_decl_1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Token_decl_1Context token_decl_1(int i) {
			return GetRuleContext<Token_decl_1Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TAG() { return GetTokens(BisonParser.TAG); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG(int i) {
			return GetToken(BisonParser.TAG, i);
		}
		public Token_declsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_token_decls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterToken_decls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitToken_decls(this);
		}
	}

	[RuleVersion(0)]
	public Token_declsContext token_decls() {
		Token_declsContext _localctx = new Token_declsContext(Context, State);
		EnterRule(_localctx, 28, RULE_token_decls);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
			case ID:
				{
				}
				break;
			case TAG:
				{
				State = 209;
				Match(TAG);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 212;
			token_decl_1();
			State = 217;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 213;
					Match(TAG);
					State = 214;
					token_decl_1();
					}
					} 
				}
				State = 219;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Token_decl_1Context : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Token_declContext[] token_decl() {
			return GetRuleContexts<Token_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Token_declContext token_decl(int i) {
			return GetRuleContext<Token_declContext>(i);
		}
		public Token_decl_1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_token_decl_1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterToken_decl_1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitToken_decl_1(this);
		}
	}

	[RuleVersion(0)]
	public Token_decl_1Context token_decl_1() {
		Token_decl_1Context _localctx = new Token_decl_1Context(Context, State);
		EnterRule(_localctx, 30, RULE_token_decl_1);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			token_decl();
			State = 224;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 221;
					token_decl();
					}
					} 
				}
				State = 226;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Token_declContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Int_optContext int_opt() {
			return GetRuleContext<Int_optContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BisonParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BisonParser.RPAREN, 0); }
		public Token_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_token_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterToken_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitToken_decl(this);
		}
	}

	[RuleVersion(0)]
	public Token_declContext token_decl() {
		Token_declContext _localctx = new Token_declContext(Context, State);
		EnterRule(_localctx, 32, RULE_token_decl);
		try {
			State = 238;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 227;
				id();
				State = 228;
				int_opt();
				State = 229;
				alias();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 231;
				id();
				State = 232;
				id();
				State = 233;
				Match(LPAREN);
				State = 234;
				id();
				State = 235;
				Match(RPAREN);
				State = 236;
				alias();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_optContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(BisonParser.INT, 0); }
		public Int_optContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_opt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterInt_opt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitInt_opt(this);
		}
	}

	[RuleVersion(0)]
	public Int_optContext int_opt() {
		Int_optContext _localctx = new Int_optContext(Context, State);
		EnterRule(_localctx, 34, RULE_int_opt);
		try {
			State = 242;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 241;
				Match(INT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public String_as_idContext string_as_id() {
			return GetRuleContext<String_as_idContext>(0);
		}
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitAlias(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 36, RULE_alias);
		try {
			State = 246;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 245;
				string_as_id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Token_decls_for_precContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Token_decl_for_prec_1Context token_decl_for_prec_1() {
			return GetRuleContext<Token_decl_for_prec_1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG() { return GetToken(BisonParser.TAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Token_decls_for_precContext token_decls_for_prec() {
			return GetRuleContext<Token_decls_for_precContext>(0);
		}
		public Token_decls_for_precContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_token_decls_for_prec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterToken_decls_for_prec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitToken_decls_for_prec(this);
		}
	}

	[RuleVersion(0)]
	public Token_decls_for_precContext token_decls_for_prec() {
		return token_decls_for_prec(0);
	}

	private Token_decls_for_precContext token_decls_for_prec(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Token_decls_for_precContext _localctx = new Token_decls_for_precContext(Context, _parentState);
		Token_decls_for_precContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_token_decls_for_prec, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
			case ID:
			case STRING:
				{
				State = 249;
				token_decl_for_prec_1(0);
				}
				break;
			case TAG:
				{
				State = 250;
				Match(TAG);
				State = 251;
				token_decl_for_prec_1(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 259;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Token_decls_for_precContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_token_decls_for_prec);
					State = 254;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 255;
					Match(TAG);
					State = 256;
					token_decl_for_prec_1(0);
					}
					} 
				}
				State = 261;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Token_decl_for_prec_1Context : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Token_decl_for_precContext token_decl_for_prec() {
			return GetRuleContext<Token_decl_for_precContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Token_decl_for_prec_1Context token_decl_for_prec_1() {
			return GetRuleContext<Token_decl_for_prec_1Context>(0);
		}
		public Token_decl_for_prec_1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_token_decl_for_prec_1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterToken_decl_for_prec_1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitToken_decl_for_prec_1(this);
		}
	}

	[RuleVersion(0)]
	public Token_decl_for_prec_1Context token_decl_for_prec_1() {
		return token_decl_for_prec_1(0);
	}

	private Token_decl_for_prec_1Context token_decl_for_prec_1(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Token_decl_for_prec_1Context _localctx = new Token_decl_for_prec_1Context(Context, _parentState);
		Token_decl_for_prec_1Context _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_token_decl_for_prec_1, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 263;
			token_decl_for_prec();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 269;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Token_decl_for_prec_1Context(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_token_decl_for_prec_1);
					State = 265;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 266;
					token_decl_for_prec();
					}
					} 
				}
				State = 271;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Token_decl_for_precContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Int_optContext int_opt() {
			return GetRuleContext<Int_optContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_as_idContext string_as_id() {
			return GetRuleContext<String_as_idContext>(0);
		}
		public Token_decl_for_precContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_token_decl_for_prec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterToken_decl_for_prec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitToken_decl_for_prec(this);
		}
	}

	[RuleVersion(0)]
	public Token_decl_for_precContext token_decl_for_prec() {
		Token_decl_for_precContext _localctx = new Token_decl_for_precContext(Context, State);
		EnterRule(_localctx, 42, RULE_token_decl_for_prec);
		try {
			State = 276;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 272;
				id();
				State = 273;
				int_opt();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 275;
				string_as_id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_declsContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_decl_1Context symbol_decl_1() {
			return GetRuleContext<Symbol_decl_1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG() { return GetToken(BisonParser.TAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_declsContext symbol_decls() {
			return GetRuleContext<Symbol_declsContext>(0);
		}
		public Symbol_declsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_decls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterSymbol_decls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitSymbol_decls(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_declsContext symbol_decls() {
		return symbol_decls(0);
	}

	private Symbol_declsContext symbol_decls(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Symbol_declsContext _localctx = new Symbol_declsContext(Context, _parentState);
		Symbol_declsContext _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_symbol_decls, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
			case ID:
			case STRING:
				{
				State = 279;
				symbol_decl_1(0);
				}
				break;
			case TAG:
				{
				State = 280;
				Match(TAG);
				State = 281;
				symbol_decl_1(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 289;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Symbol_declsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_symbol_decls);
					State = 284;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 285;
					Match(TAG);
					State = 286;
					symbol_decl_1(0);
					}
					} 
				}
				State = 291;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Symbol_decl_1Context : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_decl_1Context symbol_decl_1() {
			return GetRuleContext<Symbol_decl_1Context>(0);
		}
		public Symbol_decl_1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_decl_1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterSymbol_decl_1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitSymbol_decl_1(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_decl_1Context symbol_decl_1() {
		return symbol_decl_1(0);
	}

	private Symbol_decl_1Context symbol_decl_1(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Symbol_decl_1Context _localctx = new Symbol_decl_1Context(Context, _parentState);
		Symbol_decl_1Context _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_symbol_decl_1, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 293;
			symbol();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 299;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Symbol_decl_1Context(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_symbol_decl_1);
					State = 295;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 296;
					symbol();
					}
					} 
				}
				State = 301;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Bison_grammarContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rules_or_grammar_declarationContext rules_or_grammar_declaration() {
			return GetRuleContext<Rules_or_grammar_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bison_grammarContext bison_grammar() {
			return GetRuleContext<Bison_grammarContext>(0);
		}
		public Bison_grammarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bison_grammar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterBison_grammar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitBison_grammar(this);
		}
	}

	[RuleVersion(0)]
	public Bison_grammarContext bison_grammar() {
		return bison_grammar(0);
	}

	private Bison_grammarContext bison_grammar(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Bison_grammarContext _localctx = new Bison_grammarContext(Context, _parentState);
		Bison_grammarContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_bison_grammar, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 303;
			rules_or_grammar_declaration();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 309;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Bison_grammarContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_bison_grammar);
					State = 305;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 306;
					rules_or_grammar_declaration();
					}
					} 
				}
				State = 311;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Rules_or_grammar_declarationContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RulesContext rules() {
			return GetRuleContext<RulesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Grammar_declarationContext grammar_declaration() {
			return GetRuleContext<Grammar_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(BisonParser.SEMICOLON, 0); }
		public Rules_or_grammar_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rules_or_grammar_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterRules_or_grammar_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitRules_or_grammar_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Rules_or_grammar_declarationContext rules_or_grammar_declaration() {
		Rules_or_grammar_declarationContext _localctx = new Rules_or_grammar_declarationContext(Context, State);
		EnterRule(_localctx, 50, RULE_rules_or_grammar_declaration);
		try {
			State = 316;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 312;
				rules();
				}
				break;
			case CODE:
			case DEFAULT_PREC:
			case DESTRUCTOR:
			case PERCENT_LEFT:
			case NO_DEFAULT_PREC:
			case PERCENT_NONASSOC:
			case NTERM:
			case PRECEDENCE:
			case PRINTER:
			case PERCENT_RIGHT:
			case PERCENT_START:
			case PERCENT_TOKEN:
			case PERCENT_TYPE:
			case PERCENT_UNION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 313;
				grammar_declaration();
				State = 314;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_ref_optContext named_ref_opt() {
			return GetRuleContext<Named_ref_optContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BisonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rhses_1Context rhses_1() {
			return GetRuleContext<Rhses_1Context>(0);
		}
		public RulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rules; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterRules(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitRules(this);
		}
	}

	[RuleVersion(0)]
	public RulesContext rules() {
		RulesContext _localctx = new RulesContext(Context, State);
		EnterRule(_localctx, 52, RULE_rules);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318;
			id();
			State = 319;
			named_ref_opt();
			State = 320;
			Match(COLON);
			State = 321;
			rhses_1();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rhses_1Context : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RhsContext[] rhs() {
			return GetRuleContexts<RhsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RhsContext rhs(int i) {
			return GetRuleContext<RhsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(BisonParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PIPE() { return GetTokens(BisonParser.PIPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE(int i) {
			return GetToken(BisonParser.PIPE, i);
		}
		public Rhses_1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rhses_1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterRhses_1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitRhses_1(this);
		}
	}

	[RuleVersion(0)]
	public Rhses_1Context rhses_1() {
		Rhses_1Context _localctx = new Rhses_1Context(Context, State);
		EnterRule(_localctx, 54, RULE_rhses_1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			rhs(0);
			State = 328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PIPE) {
				{
				{
				State = 324;
				Match(PIPE);
				State = 325;
				rhs(0);
				}
				}
				State = 330;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 331;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RhsContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RhsContext rhs() {
			return GetRuleContext<RhsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_ref_optContext named_ref_opt() {
			return GetRuleContext<Named_ref_optContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Tag_optContext tag_opt() {
			return GetRuleContext<Tag_optContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRACED_PREDICATE() { return GetToken(BisonParser.BRACED_PREDICATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY_RULE() { return GetToken(BisonParser.EMPTY_RULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_PREC() { return GetToken(BisonParser.PERCENT_PREC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DPREC() { return GetToken(BisonParser.DPREC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(BisonParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(BisonParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG() { return GetToken(BisonParser.TAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPECT() { return GetToken(BisonParser.EXPECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPECT_RR() { return GetToken(BisonParser.EXPECT_RR, 0); }
		public RhsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rhs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterRhs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitRhs(this);
		}
	}

	[RuleVersion(0)]
	public RhsContext rhs() {
		return rhs(0);
	}

	private RhsContext rhs(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RhsContext _localctx = new RhsContext(Context, _parentState);
		RhsContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_rhs, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			}
			Context.Stop = TokenStream.LT(-1);
			State = 364;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 362;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
					case 1:
						{
						_localctx = new RhsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_rhs);
						State = 334;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 335;
						symbol();
						State = 336;
						named_ref_opt();
						}
						break;
					case 2:
						{
						_localctx = new RhsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_rhs);
						State = 338;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 339;
						tag_opt();
						State = 340;
						actionBlock();
						State = 341;
						named_ref_opt();
						}
						break;
					case 3:
						{
						_localctx = new RhsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_rhs);
						State = 343;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 344;
						Match(BRACED_PREDICATE);
						}
						break;
					case 4:
						{
						_localctx = new RhsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_rhs);
						State = 345;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 346;
						Match(EMPTY_RULE);
						}
						break;
					case 5:
						{
						_localctx = new RhsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_rhs);
						State = 347;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 348;
						Match(PERCENT_PREC);
						State = 349;
						symbol();
						}
						break;
					case 6:
						{
						_localctx = new RhsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_rhs);
						State = 350;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 351;
						Match(DPREC);
						State = 352;
						Match(INT);
						}
						break;
					case 7:
						{
						_localctx = new RhsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_rhs);
						State = 353;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 354;
						Match(MERGE);
						State = 355;
						Match(TAG);
						}
						break;
					case 8:
						{
						_localctx = new RhsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_rhs);
						State = 356;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 357;
						Match(EXPECT);
						State = 358;
						Match(INT);
						}
						break;
					case 9:
						{
						_localctx = new RhsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_rhs);
						State = 359;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 360;
						Match(EXPECT_RR);
						State = 361;
						Match(INT);
						}
						break;
					}
					} 
				}
				State = 366;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Named_ref_optContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRACKETED_ID() { return GetToken(BisonParser.BRACKETED_ID, 0); }
		public Named_ref_optContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_ref_opt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterNamed_ref_opt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitNamed_ref_opt(this);
		}
	}

	[RuleVersion(0)]
	public Named_ref_optContext named_ref_opt() {
		Named_ref_optContext _localctx = new Named_ref_optContext(Context, State);
		EnterRule(_localctx, 58, RULE_named_ref_opt);
		try {
			State = 369;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 368;
				Match(BRACKETED_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(BisonParser.ID, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 60, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(BisonParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(BisonParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 62, RULE_value);
		try {
			State = 377;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 374;
				Match(ID);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 375;
				Match(STRING);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 376;
				actionBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(BisonParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(BisonParser.CHAR, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 64, RULE_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379;
			_la = TokenStream.LA(1);
			if ( !(_la==CHAR || _la==ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_as_idContext string_as_id() {
			return GetRuleContext<String_as_idContext>(0);
		}
		public SymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitSymbol(this);
		}
	}

	[RuleVersion(0)]
	public SymbolContext symbol() {
		SymbolContext _localctx = new SymbolContext(Context, State);
		EnterRule(_localctx, 66, RULE_symbol);
		try {
			State = 383;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 381;
				id();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 382;
				string_as_id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_as_idContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(BisonParser.STRING, 0); }
		public String_as_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_as_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterString_as_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitString_as_id(this);
		}
	}

	[RuleVersion(0)]
	public String_as_idContext string_as_id() {
		String_as_idContext _localctx = new String_as_idContext(Context, State);
		EnterRule(_localctx, 68, RULE_string_as_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Epilogue_optContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PercentPercent() { return GetToken(BisonParser.PercentPercent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPILOGUE() { return GetToken(BisonParser.EPILOGUE, 0); }
		public Epilogue_optContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_epilogue_opt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterEpilogue_opt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitEpilogue_opt(this);
		}
	}

	[RuleVersion(0)]
	public Epilogue_optContext epilogue_opt() {
		Epilogue_optContext _localctx = new Epilogue_optContext(Context, State);
		EnterRule(_localctx, 70, RULE_epilogue_opt);
		int _la;
		try {
			State = 392;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Eof:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case PercentPercent:
				EnterOuterAlt(_localctx, 2);
				{
				State = 388;
				Match(PercentPercent);
				State = 390;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EPILOGUE) {
					{
					State = 389;
					Match(EPILOGUE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionBlockContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRACED_CODE() { return GetToken(BisonParser.BRACED_CODE, 0); }
		public ActionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterActionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitActionBlock(this);
		}
	}

	[RuleVersion(0)]
	public ActionBlockContext actionBlock() {
		ActionBlockContext _localctx = new ActionBlockContext(Context, State);
		EnterRule(_localctx, 72, RULE_actionBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394;
			Match(BRACED_CODE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return prologue_declarations_sempred((Prologue_declarationsContext)_localctx, predIndex);
		case 3: return params_sempred((ParamsContext)_localctx, predIndex);
		case 10: return generic_symlist_sempred((Generic_symlistContext)_localctx, predIndex);
		case 19: return token_decls_for_prec_sempred((Token_decls_for_precContext)_localctx, predIndex);
		case 20: return token_decl_for_prec_1_sempred((Token_decl_for_prec_1Context)_localctx, predIndex);
		case 22: return symbol_decls_sempred((Symbol_declsContext)_localctx, predIndex);
		case 23: return symbol_decl_1_sempred((Symbol_decl_1Context)_localctx, predIndex);
		case 24: return bison_grammar_sempred((Bison_grammarContext)_localctx, predIndex);
		case 28: return rhs_sempred((RhsContext)_localctx, predIndex);
		}
		return true;
	}
	private bool prologue_declarations_sempred(Prologue_declarationsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool params_sempred(ParamsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool generic_symlist_sempred(Generic_symlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool token_decls_for_prec_sempred(Token_decls_for_precContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 1);
		}
		return true;
	}
	private bool token_decl_for_prec_1_sempred(Token_decl_for_prec_1Context _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool symbol_decls_sempred(Symbol_declsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool symbol_decl_1_sempred(Symbol_decl_1Context _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool bison_grammar_sempred(Bison_grammarContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 1);
		}
		return true;
	}
	private bool rhs_sempred(RhsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 9);
		case 9: return Precpred(Context, 8);
		case 10: return Precpred(Context, 7);
		case 11: return Precpred(Context, 6);
		case 12: return Precpred(Context, 5);
		case 13: return Precpred(Context, 4);
		case 14: return Precpred(Context, 3);
		case 15: return Precpred(Context, 2);
		case 16: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'M', '\x18F', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 'U', '\n', 
		'\x3', '\f', '\x3', '\xE', '\x3', 'X', '\v', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x6', '\x4', '|', '\n', '\x4', '\r', 
		'\x4', '\xE', '\x4', '}', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', '\x8A', '\n', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x91', 
		'\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x94', '\v', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\xA8', '\n', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\xAE', '\n', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xB9', 
		'\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x5', 
		'\v', '\xBF', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\a', '\f', '\xC6', '\n', '\f', '\f', '\f', '\xE', 
		'\f', '\xC9', '\v', '\f', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xCD', 
		'\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x5', '\x10', '\xD5', '\n', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\xDA', '\n', '\x10', '\f', 
		'\x10', '\xE', '\x10', '\xDD', '\v', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\a', '\x11', '\xE1', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\xE4', 
		'\v', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\xF1', '\n', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x5', '\x13', '\xF5', '\n', '\x13', '\x3', '\x14', 
		'\x3', '\x14', '\x5', '\x14', '\xF9', '\n', '\x14', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\xFF', '\n', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', '\x104', '\n', 
		'\x15', '\f', '\x15', '\xE', '\x15', '\x107', '\v', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', 
		'\x10E', '\n', '\x16', '\f', '\x16', '\xE', '\x16', '\x111', '\v', '\x16', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', 
		'\x117', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x5', '\x18', '\x11D', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\a', '\x18', '\x122', '\n', '\x18', '\f', '\x18', '\xE', 
		'\x18', '\x125', '\v', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\a', '\x19', '\x12C', '\n', '\x19', '\f', 
		'\x19', '\xE', '\x19', '\x12F', '\v', '\x19', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\x136', '\n', 
		'\x1A', '\f', '\x1A', '\xE', '\x1A', '\x139', '\v', '\x1A', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x13F', '\n', 
		'\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\a', '\x1D', '\x149', 
		'\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', '\x14C', '\v', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\a', '\x1E', '\x16D', '\n', '\x1E', '\f', '\x1E', '\xE', '\x1E', 
		'\x170', '\v', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x174', 
		'\n', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x5', '!', '\x17C', '\n', '!', '\x3', '\"', '\x3', '\"', 
		'\x3', '#', '\x3', '#', '\x5', '#', '\x182', '\n', '#', '\x3', '$', '\x3', 
		'$', '\x3', '%', '\x3', '%', '\x3', '%', '\x5', '%', '\x189', '\n', '%', 
		'\x5', '%', '\x18B', '\n', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\x2', 
		'\v', '\x4', '\b', '\x16', '(', '*', '.', '\x30', '\x32', ':', '\'', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', 
		'\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', 
		'\x46', 'H', 'J', '\x2', '\x6', '\x4', '\x2', '\v', '\v', '!', '!', '\x6', 
		'\x2', '\x14', '\x14', '\x1A', '\x1A', ' ', ' ', '#', '#', '\x3', '\x2', 
		'\x42', '\x44', '\x4', '\x2', ';', ';', '>', '>', '\x2', '\x1B5', '\x2', 
		'L', '\x3', '\x2', '\x2', '\x2', '\x4', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x89', '\x3', '\x2', '\x2', '\x2', '\b', '\x8B', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\xA7', '\x3', '\x2', '\x2', '\x2', '\f', '\xA9', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\xAD', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\xB8', '\x3', '\x2', '\x2', '\x2', '\x12', '\xBA', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\xBE', '\x3', '\x2', '\x2', '\x2', '\x16', '\xC0', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\xCC', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\xCE', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xD0', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\xD4', '\x3', '\x2', '\x2', '\x2', ' ', '\xDE', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\xF0', '\x3', '\x2', '\x2', '\x2', 
		'$', '\xF4', '\x3', '\x2', '\x2', '\x2', '&', '\xF8', '\x3', '\x2', '\x2', 
		'\x2', '(', '\xFE', '\x3', '\x2', '\x2', '\x2', '*', '\x108', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x116', '\x3', '\x2', '\x2', '\x2', '.', '\x11C', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x126', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x130', '\x3', '\x2', '\x2', '\x2', '\x34', '\x13E', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x140', '\x3', '\x2', '\x2', '\x2', '\x38', '\x145', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x14F', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x173', '\x3', '\x2', '\x2', '\x2', '>', '\x175', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x42', '\x17D', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x181', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x183', '\x3', '\x2', '\x2', '\x2', 'H', '\x18A', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x18C', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x5', 
		'\x4', '\x3', '\x2', 'M', 'N', '\a', '\x4', '\x2', '\x2', 'N', 'O', '\x5', 
		'\x32', '\x1A', '\x2', 'O', 'P', '\x5', 'H', '%', '\x2', 'P', '\x3', '\x3', 
		'\x2', '\x2', '\x2', 'Q', 'V', '\b', '\x3', '\x1', '\x2', 'R', 'S', '\f', 
		'\x3', '\x2', '\x2', 'S', 'U', '\x5', '\x6', '\x4', '\x2', 'T', 'R', '\x3', 
		'\x2', '\x2', '\x2', 'U', 'X', '\x3', '\x2', '\x2', '\x2', 'V', 'T', '\x3', 
		'\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', '\x2', 'W', '\x5', 
		'\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 'Y', 
		'\x8A', '\x5', '\n', '\x6', '\x2', 'Z', '\x8A', '\a', 'L', '\x2', '\x2', 
		'[', '\x8A', '\a', '\a', '\x2', '\x2', '\\', '\x8A', '\a', '\x16', '\x2', 
		'\x2', ']', '^', '\a', '\t', '\x2', '\x2', '^', '_', '\x5', '>', ' ', 
		'\x2', '_', '`', '\x5', '@', '!', '\x2', '`', '\x8A', '\x3', '\x2', '\x2', 
		'\x2', '\x61', '\x8A', '\a', '\n', '\x2', '\x2', '\x62', '\x63', '\a', 
		'\n', '\x2', '\x2', '\x63', '\x8A', '\a', '\x45', '\x2', '\x2', '\x64', 
		'\x8A', '\a', '\x30', '\x2', '\x2', '\x65', '\x66', '\a', '\xE', '\x2', 
		'\x2', '\x66', '\x8A', '\a', '\x46', '\x2', '\x2', 'g', 'h', '\a', '\xF', 
		'\x2', '\x2', 'h', '\x8A', '\a', '\x46', '\x2', '\x2', 'i', 'j', '\a', 
		'\x10', '\x2', '\x2', 'j', '\x8A', '\a', '\x45', '\x2', '\x2', 'k', '\x8A', 
		'\a', '\x12', '\x2', '\x2', 'l', 'm', '\a', '\x11', '\x2', '\x2', 'm', 
		'\x8A', '\x5', 'J', '&', '\x2', 'n', 'o', '\a', '\x13', '\x2', '\x2', 
		'o', '\x8A', '\a', '\x45', '\x2', '\x2', 'p', 'q', '\a', '.', '\x2', '\x2', 
		'q', '\x8A', '\a', '\x45', '\x2', '\x2', 'r', '\x8A', '\a', '\x19', '\x2', 
		'\x2', 's', '\x8A', '\a', '\x1B', '\x2', '\x2', 't', 'u', '\a', '\x36', 
		'\x2', '\x2', 'u', '\x8A', '\a', '\x45', '\x2', '\x2', 'v', 'w', '\a', 
		'\x1D', '\x2', '\x2', 'w', '\x8A', '\x5', '\b', '\x5', '\x2', 'x', '\x8A', 
		'\a', '-', '\x2', '\x2', 'y', '{', '\a', '\x1E', '\x2', '\x2', 'z', '|', 
		'\x5', 'J', '&', '\x2', '{', 'z', '\x3', '\x2', '\x2', '\x2', '|', '}', 
		'\x3', '\x2', '\x2', '\x2', '}', '{', '\x3', '\x2', '\x2', '\x2', '}', 
		'~', '\x3', '\x2', '\x2', '\x2', '~', '\x8A', '\x3', '\x2', '\x2', '\x2', 
		'\x7F', '\x80', '\a', '\x15', '\x2', '\x2', '\x80', '\x8A', '\x5', 'J', 
		'&', '\x2', '\x81', '\x82', '\a', '\"', '\x2', '\x2', '\x82', '\x8A', 
		'\a', '\x45', '\x2', '\x2', '\x83', '\x84', '\a', '$', '\x2', '\x2', '\x84', 
		'\x8A', '\a', '\x45', '\x2', '\x2', '\x85', '\x8A', '\a', '(', '\x2', 
		'\x2', '\x86', '\x8A', '\a', '+', '\x2', '\x2', '\x87', '\x8A', '\a', 
		',', '\x2', '\x2', '\x88', '\x8A', '\a', '\x41', '\x2', '\x2', '\x89', 
		'Y', '\x3', '\x2', '\x2', '\x2', '\x89', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'\x89', '[', '\x3', '\x2', '\x2', '\x2', '\x89', '\\', '\x3', '\x2', '\x2', 
		'\x2', '\x89', ']', '\x3', '\x2', '\x2', '\x2', '\x89', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x89', '\x62', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\x64', '\x3', '\x2', '\x2', '\x2', '\x89', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x89', 'g', '\x3', '\x2', '\x2', '\x2', '\x89', 'i', '\x3', '\x2', 
		'\x2', '\x2', '\x89', 'k', '\x3', '\x2', '\x2', '\x2', '\x89', 'l', '\x3', 
		'\x2', '\x2', '\x2', '\x89', 'n', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'p', '\x3', '\x2', '\x2', '\x2', '\x89', 'r', '\x3', '\x2', '\x2', '\x2', 
		'\x89', 's', '\x3', '\x2', '\x2', '\x2', '\x89', 't', '\x3', '\x2', '\x2', 
		'\x2', '\x89', 'v', '\x3', '\x2', '\x2', '\x2', '\x89', 'x', '\x3', '\x2', 
		'\x2', '\x2', '\x89', 'y', '\x3', '\x2', '\x2', '\x2', '\x89', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x89', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\x89', '\x83', '\x3', '\x2', '\x2', '\x2', '\x89', '\x85', '\x3', '\x2', 
		'\x2', '\x2', '\x89', '\x86', '\x3', '\x2', '\x2', '\x2', '\x89', '\x87', 
		'\x3', '\x2', '\x2', '\x2', '\x89', '\x88', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\a', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\b', '\x5', 
		'\x1', '\x2', '\x8C', '\x8D', '\x5', 'J', '&', '\x2', '\x8D', '\x92', 
		'\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\f', '\x4', '\x2', '\x2', 
		'\x8F', '\x91', '\x5', 'J', '&', '\x2', '\x90', '\x8E', '\x3', '\x2', 
		'\x2', '\x2', '\x91', '\x94', '\x3', '\x2', '\x2', '\x2', '\x92', '\x90', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x3', '\x2', '\x2', '\x2', 
		'\x93', '\t', '\x3', '\x2', '\x2', '\x2', '\x94', '\x92', '\x3', '\x2', 
		'\x2', '\x2', '\x95', '\xA8', '\x5', '\x10', '\t', '\x2', '\x96', '\x97', 
		'\a', '%', '\x2', '\x2', '\x97', '\xA8', '\x5', '\x44', '#', '\x2', '\x98', 
		'\x99', '\x5', '\f', '\a', '\x2', '\x99', '\x9A', '\x5', 'J', '&', '\x2', 
		'\x9A', '\x9B', '\x5', '\x16', '\f', '\x2', '\x9B', '\xA8', '\x3', '\x2', 
		'\x2', '\x2', '\x9C', '\xA8', '\a', '\b', '\x2', '\x2', '\x9D', '\xA8', 
		'\a', '\x18', '\x2', '\x2', '\x9E', '\x9F', '\a', '\x6', '\x2', '\x2', 
		'\x9F', '\xA8', '\x5', 'J', '&', '\x2', '\xA0', '\xA1', '\a', '\x6', '\x2', 
		'\x2', '\xA1', '\xA2', '\a', '>', '\x2', '\x2', '\xA2', '\xA8', '\x5', 
		'J', '&', '\x2', '\xA3', '\xA4', '\a', '*', '\x2', '\x2', '\xA4', '\xA5', 
		'\x5', '\xE', '\b', '\x2', '\xA5', '\xA6', '\x5', 'J', '&', '\x2', '\xA6', 
		'\xA8', '\x3', '\x2', '\x2', '\x2', '\xA7', '\x95', '\x3', '\x2', '\x2', 
		'\x2', '\xA7', '\x96', '\x3', '\x2', '\x2', '\x2', '\xA7', '\x98', '\x3', 
		'\x2', '\x2', '\x2', '\xA7', '\x9C', '\x3', '\x2', '\x2', '\x2', '\xA7', 
		'\x9D', '\x3', '\x2', '\x2', '\x2', '\xA7', '\x9E', '\x3', '\x2', '\x2', 
		'\x2', '\xA7', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\xA8', '\v', '\x3', '\x2', '\x2', '\x2', '\xA9', 
		'\xAA', '\t', '\x2', '\x2', '\x2', '\xAA', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\xAB', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAE', '\a', 
		'>', '\x2', '\x2', '\xAD', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAD', 
		'\xAC', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\xAF', '\xB0', '\a', '\x1C', '\x2', '\x2', '\xB0', '\xB9', '\x5', 
		'\x1C', '\xF', '\x2', '\xB1', '\xB2', '\a', '\'', '\x2', '\x2', '\xB2', 
		'\xB9', '\x5', '\x1E', '\x10', '\x2', '\xB3', '\xB4', '\a', ')', '\x2', 
		'\x2', '\xB4', '\xB9', '\x5', '.', '\x18', '\x2', '\xB5', '\xB6', '\x5', 
		'\x12', '\n', '\x2', '\xB6', '\xB7', '\x5', '(', '\x15', '\x2', '\xB7', 
		'\xB9', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '\xB8', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xB8', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB9', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\t', '\x3', '\x2', 
		'\x2', '\xBB', '\x13', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\xBD', '\xBF', '\a', '\x42', '\x2', '\x2', '\xBE', 
		'\xBC', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBD', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\x15', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC1', '\b', 
		'\f', '\x1', '\x2', '\xC1', '\xC2', '\x5', '\x18', '\r', '\x2', '\xC2', 
		'\xC7', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\f', '\x3', '\x2', 
		'\x2', '\xC4', '\xC6', '\x5', '\x18', '\r', '\x2', '\xC5', '\xC3', '\x3', 
		'\x2', '\x2', '\x2', '\xC6', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xC7', 
		'\xC5', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '\x17', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xC7', '\x3', 
		'\x2', '\x2', '\x2', '\xCA', '\xCD', '\x5', '\x44', '#', '\x2', '\xCB', 
		'\xCD', '\x5', '\x1A', '\xE', '\x2', '\xCC', '\xCA', '\x3', '\x2', '\x2', 
		'\x2', '\xCC', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCD', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\xCE', '\xCF', '\t', '\x4', '\x2', '\x2', '\xCF', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', '\x5', '\x1E', '\x10', 
		'\x2', '\xD1', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD5', '\x3', 
		'\x2', '\x2', '\x2', '\xD3', '\xD5', '\a', '\x42', '\x2', '\x2', '\xD4', 
		'\xD2', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\xD5', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xDB', '\x5', 
		' ', '\x11', '\x2', '\xD7', '\xD8', '\a', '\x42', '\x2', '\x2', '\xD8', 
		'\xDA', '\x5', ' ', '\x11', '\x2', '\xD9', '\xD7', '\x3', '\x2', '\x2', 
		'\x2', '\xDA', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xD9', '\x3', 
		'\x2', '\x2', '\x2', '\xDB', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDC', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDB', '\x3', '\x2', '\x2', 
		'\x2', '\xDE', '\xE2', '\x5', '\"', '\x12', '\x2', '\xDF', '\xE1', '\x5', 
		'\"', '\x12', '\x2', '\xE0', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE1', 
		'\xE4', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE0', '\x3', '\x2', '\x2', 
		'\x2', '\xE2', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE3', '!', '\x3', 
		'\x2', '\x2', '\x2', '\xE4', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE5', 
		'\xE6', '\x5', '\x42', '\"', '\x2', '\xE6', '\xE7', '\x5', '$', '\x13', 
		'\x2', '\xE7', '\xE8', '\x5', '&', '\x14', '\x2', '\xE8', '\xF1', '\x3', 
		'\x2', '\x2', '\x2', '\xE9', '\xEA', '\x5', '\x42', '\"', '\x2', '\xEA', 
		'\xEB', '\x5', '\x42', '\"', '\x2', '\xEB', '\xEC', '\a', 'G', '\x2', 
		'\x2', '\xEC', '\xED', '\x5', '\x42', '\"', '\x2', '\xED', '\xEE', '\a', 
		'H', '\x2', '\x2', '\xEE', '\xEF', '\x5', '&', '\x14', '\x2', '\xEF', 
		'\xF1', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xE5', '\x3', '\x2', '\x2', 
		'\x2', '\xF0', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xF1', '#', '\x3', 
		'\x2', '\x2', '\x2', '\xF2', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF3', 
		'\xF5', '\a', '\x46', '\x2', '\x2', '\xF4', '\xF2', '\x3', '\x2', '\x2', 
		'\x2', '\xF4', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF5', '%', '\x3', 
		'\x2', '\x2', '\x2', '\xF6', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xF7', 
		'\xF9', '\x5', '\x46', '$', '\x2', '\xF8', '\xF6', '\x3', '\x2', '\x2', 
		'\x2', '\xF8', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF9', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\xFA', '\xFB', '\b', '\x15', '\x1', '\x2', '\xFB', 
		'\xFF', '\x5', '*', '\x16', '\x2', '\xFC', '\xFD', '\a', '\x42', '\x2', 
		'\x2', '\xFD', '\xFF', '\x5', '*', '\x16', '\x2', '\xFE', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '\xFE', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFF', 
		'\x105', '\x3', '\x2', '\x2', '\x2', '\x100', '\x101', '\f', '\x3', '\x2', 
		'\x2', '\x101', '\x102', '\a', '\x42', '\x2', '\x2', '\x102', '\x104', 
		'\x5', '*', '\x16', '\x2', '\x103', '\x100', '\x3', '\x2', '\x2', '\x2', 
		'\x104', '\x107', '\x3', '\x2', '\x2', '\x2', '\x105', '\x103', '\x3', 
		'\x2', '\x2', '\x2', '\x105', '\x106', '\x3', '\x2', '\x2', '\x2', '\x106', 
		')', '\x3', '\x2', '\x2', '\x2', '\x107', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x108', '\x109', '\b', '\x16', '\x1', '\x2', '\x109', '\x10A', 
		'\x5', ',', '\x17', '\x2', '\x10A', '\x10F', '\x3', '\x2', '\x2', '\x2', 
		'\x10B', '\x10C', '\f', '\x3', '\x2', '\x2', '\x10C', '\x10E', '\x5', 
		',', '\x17', '\x2', '\x10D', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10E', 
		'\x111', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x10D', '\x3', '\x2', '\x2', 
		'\x2', '\x10F', '\x110', '\x3', '\x2', '\x2', '\x2', '\x110', '+', '\x3', 
		'\x2', '\x2', '\x2', '\x111', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x112', 
		'\x113', '\x5', '\x42', '\"', '\x2', '\x113', '\x114', '\x5', '$', '\x13', 
		'\x2', '\x114', '\x117', '\x3', '\x2', '\x2', '\x2', '\x115', '\x117', 
		'\x5', '\x46', '$', '\x2', '\x116', '\x112', '\x3', '\x2', '\x2', '\x2', 
		'\x116', '\x115', '\x3', '\x2', '\x2', '\x2', '\x117', '-', '\x3', '\x2', 
		'\x2', '\x2', '\x118', '\x119', '\b', '\x18', '\x1', '\x2', '\x119', '\x11D', 
		'\x5', '\x30', '\x19', '\x2', '\x11A', '\x11B', '\a', '\x42', '\x2', '\x2', 
		'\x11B', '\x11D', '\x5', '\x30', '\x19', '\x2', '\x11C', '\x118', '\x3', 
		'\x2', '\x2', '\x2', '\x11C', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x11D', 
		'\x123', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11F', '\f', '\x3', '\x2', 
		'\x2', '\x11F', '\x120', '\a', '\x42', '\x2', '\x2', '\x120', '\x122', 
		'\x5', '\x30', '\x19', '\x2', '\x121', '\x11E', '\x3', '\x2', '\x2', '\x2', 
		'\x122', '\x125', '\x3', '\x2', '\x2', '\x2', '\x123', '\x121', '\x3', 
		'\x2', '\x2', '\x2', '\x123', '\x124', '\x3', '\x2', '\x2', '\x2', '\x124', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x125', '\x123', '\x3', '\x2', '\x2', 
		'\x2', '\x126', '\x127', '\b', '\x19', '\x1', '\x2', '\x127', '\x128', 
		'\x5', '\x44', '#', '\x2', '\x128', '\x12D', '\x3', '\x2', '\x2', '\x2', 
		'\x129', '\x12A', '\f', '\x3', '\x2', '\x2', '\x12A', '\x12C', '\x5', 
		'\x44', '#', '\x2', '\x12B', '\x129', '\x3', '\x2', '\x2', '\x2', '\x12C', 
		'\x12F', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12B', '\x3', '\x2', '\x2', 
		'\x2', '\x12D', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x12F', '\x12D', '\x3', '\x2', '\x2', '\x2', 
		'\x130', '\x131', '\b', '\x1A', '\x1', '\x2', '\x131', '\x132', '\x5', 
		'\x34', '\x1B', '\x2', '\x132', '\x137', '\x3', '\x2', '\x2', '\x2', '\x133', 
		'\x134', '\f', '\x3', '\x2', '\x2', '\x134', '\x136', '\x5', '\x34', '\x1B', 
		'\x2', '\x135', '\x133', '\x3', '\x2', '\x2', '\x2', '\x136', '\x139', 
		'\x3', '\x2', '\x2', '\x2', '\x137', '\x135', '\x3', '\x2', '\x2', '\x2', 
		'\x137', '\x138', '\x3', '\x2', '\x2', '\x2', '\x138', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x139', '\x137', '\x3', '\x2', '\x2', '\x2', '\x13A', 
		'\x13F', '\x5', '\x36', '\x1C', '\x2', '\x13B', '\x13C', '\x5', '\n', 
		'\x6', '\x2', '\x13C', '\x13D', '\a', '\x41', '\x2', '\x2', '\x13D', '\x13F', 
		'\x3', '\x2', '\x2', '\x2', '\x13E', '\x13A', '\x3', '\x2', '\x2', '\x2', 
		'\x13E', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x140', '\x141', '\x5', '\x42', '\"', '\x2', '\x141', 
		'\x142', '\x5', '<', '\x1F', '\x2', '\x142', '\x143', '\a', '<', '\x2', 
		'\x2', '\x143', '\x144', '\x5', '\x38', '\x1D', '\x2', '\x144', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x145', '\x14A', '\x5', ':', '\x1E', '\x2', 
		'\x146', '\x147', '\a', '@', '\x2', '\x2', '\x147', '\x149', '\x5', ':', 
		'\x1E', '\x2', '\x148', '\x146', '\x3', '\x2', '\x2', '\x2', '\x149', 
		'\x14C', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x148', '\x3', '\x2', '\x2', 
		'\x2', '\x14A', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x14D', 
		'\x3', '\x2', '\x2', '\x2', '\x14C', '\x14A', '\x3', '\x2', '\x2', '\x2', 
		'\x14D', '\x14E', '\a', '\x41', '\x2', '\x2', '\x14E', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x14F', '\x16E', '\b', '\x1E', '\x1', '\x2', '\x150', 
		'\x151', '\f', '\v', '\x2', '\x2', '\x151', '\x152', '\x5', '\x44', '#', 
		'\x2', '\x152', '\x153', '\x5', '<', '\x1F', '\x2', '\x153', '\x16D', 
		'\x3', '\x2', '\x2', '\x2', '\x154', '\x155', '\f', '\n', '\x2', '\x2', 
		'\x155', '\x156', '\x5', '\x14', '\v', '\x2', '\x156', '\x157', '\x5', 
		'J', '&', '\x2', '\x157', '\x158', '\x5', '<', '\x1F', '\x2', '\x158', 
		'\x16D', '\x3', '\x2', '\x2', '\x2', '\x159', '\x15A', '\f', '\t', '\x2', 
		'\x2', '\x15A', '\x16D', '\a', '\x39', '\x2', '\x2', '\x15B', '\x15C', 
		'\f', '\b', '\x2', '\x2', '\x15C', '\x16D', '\a', '\r', '\x2', '\x2', 
		'\x15D', '\x15E', '\f', '\a', '\x2', '\x2', '\x15E', '\x15F', '\a', '\x1F', 
		'\x2', '\x2', '\x15F', '\x16D', '\x5', '\x44', '#', '\x2', '\x160', '\x161', 
		'\f', '\x6', '\x2', '\x2', '\x161', '\x162', '\a', '\f', '\x2', '\x2', 
		'\x162', '\x16D', '\a', '\x46', '\x2', '\x2', '\x163', '\x164', '\f', 
		'\x5', '\x2', '\x2', '\x164', '\x165', '\a', '\x17', '\x2', '\x2', '\x165', 
		'\x16D', '\a', '\x42', '\x2', '\x2', '\x166', '\x167', '\f', '\x4', '\x2', 
		'\x2', '\x167', '\x168', '\a', '\xE', '\x2', '\x2', '\x168', '\x16D', 
		'\a', '\x46', '\x2', '\x2', '\x169', '\x16A', '\f', '\x3', '\x2', '\x2', 
		'\x16A', '\x16B', '\a', '\xF', '\x2', '\x2', '\x16B', '\x16D', '\a', '\x46', 
		'\x2', '\x2', '\x16C', '\x150', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x154', 
		'\x3', '\x2', '\x2', '\x2', '\x16C', '\x159', '\x3', '\x2', '\x2', '\x2', 
		'\x16C', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x15D', '\x3', 
		'\x2', '\x2', '\x2', '\x16C', '\x160', '\x3', '\x2', '\x2', '\x2', '\x16C', 
		'\x163', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x166', '\x3', '\x2', '\x2', 
		'\x2', '\x16C', '\x169', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x170', 
		'\x3', '\x2', '\x2', '\x2', '\x16E', '\x16C', '\x3', '\x2', '\x2', '\x2', 
		'\x16E', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x16F', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x170', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x171', '\x174', 
		'\x3', '\x2', '\x2', '\x2', '\x172', '\x174', '\a', ':', '\x2', '\x2', 
		'\x173', '\x171', '\x3', '\x2', '\x2', '\x2', '\x173', '\x172', '\x3', 
		'\x2', '\x2', '\x2', '\x174', '=', '\x3', '\x2', '\x2', '\x2', '\x175', 
		'\x176', '\a', '>', '\x2', '\x2', '\x176', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x177', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x178', '\x17C', '\a', 
		'>', '\x2', '\x2', '\x179', '\x17C', '\a', '\x45', '\x2', '\x2', '\x17A', 
		'\x17C', '\x5', 'J', '&', '\x2', '\x17B', '\x177', '\x3', '\x2', '\x2', 
		'\x2', '\x17B', '\x178', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x179', 
		'\x3', '\x2', '\x2', '\x2', '\x17B', '\x17A', '\x3', '\x2', '\x2', '\x2', 
		'\x17C', '\x41', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x17E', '\t', '\x5', 
		'\x2', '\x2', '\x17E', '\x43', '\x3', '\x2', '\x2', '\x2', '\x17F', '\x182', 
		'\x5', '\x42', '\"', '\x2', '\x180', '\x182', '\x5', '\x46', '$', '\x2', 
		'\x181', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x181', '\x180', '\x3', 
		'\x2', '\x2', '\x2', '\x182', '\x45', '\x3', '\x2', '\x2', '\x2', '\x183', 
		'\x184', '\a', '\x45', '\x2', '\x2', '\x184', 'G', '\x3', '\x2', '\x2', 
		'\x2', '\x185', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x186', '\x188', 
		'\a', '\x4', '\x2', '\x2', '\x187', '\x189', '\a', 'M', '\x2', '\x2', 
		'\x188', '\x187', '\x3', '\x2', '\x2', '\x2', '\x188', '\x189', '\x3', 
		'\x2', '\x2', '\x2', '\x189', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x18A', 
		'\x185', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x186', '\x3', '\x2', '\x2', 
		'\x2', '\x18B', 'I', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x18D', '\a', 
		'\x38', '\x2', '\x2', '\x18D', 'K', '\x3', '\x2', '\x2', '\x2', '#', 'V', 
		'}', '\x89', '\x92', '\xA7', '\xAD', '\xB8', '\xBE', '\xC7', '\xCC', '\xD4', 
		'\xDB', '\xE2', '\xF0', '\xF4', '\xF8', '\xFE', '\x105', '\x10F', '\x116', 
		'\x11C', '\x123', '\x12D', '\x137', '\x13E', '\x14A', '\x16C', '\x16E', 
		'\x173', '\x17B', '\x181', '\x188', '\x18A',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace LanguageServer
