//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from BisonParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LanguageServer {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class BisonParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SC_EPILOGUE=1, PercentPercent=2, NONASSOC=3, CODE=4, PERCENT_DEBUG=5, 
		DEFAULT_PREC=6, DEFINE=7, DEFINES=8, DESTRUCTOR=9, DPREC=10, EMPTY_RULE=11, 
		EXPECT=12, EXPECT_RR=13, PERCENT_FILE_PREFIX=14, INITIAL_ACTION=15, GLR_PARSER=16, 
		LANGUAGE=17, PERCENT_LEFT=18, LEX=19, LOCATIONS=20, MERGE=21, NO_DEFAULT_PREC=22, 
		NO_LINES=23, PERCENT_NONASSOC=24, NONDETERMINISTIC_PARSER=25, NTERM=26, 
		PARAM=27, PARSE=28, PERCENT_PREC=29, PRECEDENCE=30, PRINTER=31, REQUIRE=32, 
		PERCENT_RIGHT=33, SKELETON=34, PERCENT_START=35, TOKEN=36, PERCENT_TOKEN=37, 
		TOKEN_TABLE=38, PERCENT_TYPE=39, PERCENT_UNION=40, VERBOSE=41, PERCENT_YACC=42, 
		PERCENT_PURE_PARSER=43, PERCENT_NAME_PREFIX=44, OBS_DEFAULT_PREC=45, OBS_PERCENT_ERROR_VERBOSE=46, 
		OBS_EXPECT_RR=47, OBS_PERCENT_FILE_PREFIX=48, OBS_FIXED_OUTPUT=49, OBS_NO_DEFAULT_PREC=50, 
		OBS_NO_LINES=51, OBS_OUTPUT=52, OBS_TOKEN_TABLE=53, BRACED_CODE=54, BRACED_PREDICATE=55, 
		BRACKETED_ID=56, CHAR=57, COLON=58, EQUAL=59, ID=60, PERCENT_PERCENT=61, 
		PIPE=62, SEMICOLON=63, TAG=64, TAG_ANY=65, TAG_NONE=66, STRING=67, INT=68, 
		LPAREN=69, RPAREN=70, BLOCK_COMMENT=71, LINE_COMMENT=72, WS=73, PROLOGUE=74, 
		EPILOGUE=75;
	public const int
		RULE_input = 0, RULE_prologue_declarations = 1, RULE_prologue_declaration = 2, 
		RULE_params = 3, RULE_grammar_declaration = 4, RULE_code_props_type = 5, 
		RULE_union_name = 6, RULE_symbol_declaration = 7, RULE_precedence_declarator = 8, 
		RULE_tag_opt = 9, RULE_generic_symlist = 10, RULE_generic_symlist_item = 11, 
		RULE_tag = 12, RULE_nterm_decls = 13, RULE_token_decls = 14, RULE_token_decl_1 = 15, 
		RULE_token_decl = 16, RULE_int_opt = 17, RULE_alias = 18, RULE_token_decls_for_prec = 19, 
		RULE_token_decl_for_prec_1 = 20, RULE_token_decl_for_prec = 21, RULE_symbol_decls = 22, 
		RULE_symbol_decl_1 = 23, RULE_bison_grammar = 24, RULE_rules_or_grammar_declaration = 25, 
		RULE_rules = 26, RULE_rhses_1 = 27, RULE_rhs = 28, RULE_named_ref_opt = 29, 
		RULE_variable = 30, RULE_value = 31, RULE_id = 32, RULE_symbol = 33, RULE_string_as_id = 34, 
		RULE_epilogue_opt = 35, RULE_actionBlock = 36;
	public static readonly string[] ruleNames = {
		"input", "prologue_declarations", "prologue_declaration", "params", "grammar_declaration", 
		"code_props_type", "union_name", "symbol_declaration", "precedence_declarator", 
		"tag_opt", "generic_symlist", "generic_symlist_item", "tag", "nterm_decls", 
		"token_decls", "token_decl_1", "token_decl", "int_opt", "alias", "token_decls_for_prec", 
		"token_decl_for_prec_1", "token_decl_for_prec", "symbol_decls", "symbol_decl_1", 
		"bison_grammar", "rules_or_grammar_declaration", "rules", "rhses_1", "rhs", 
		"named_ref_opt", "variable", "value", "id", "symbol", "string_as_id", 
		"epilogue_opt", "actionBlock"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'%%'", "'%binary'", "'%code'", "'%debug'", "'%default-prec'", 
		"'%define'", "'%defines'", "'%destructor'", "'%dprec'", "'%empty'", "'%expect'", 
		"'%expect-rr'", "'%file-prefix'", "'%initial-action'", "'%glr-parser'", 
		"'%language'", "'%left'", "'%lex-param'", "'%locations'", "'%merge'", 
		"'%no-default-prec'", "'%no-lines'", "'%nonassoc'", "'%nondeterministic-parser'", 
		"'%nterm'", "'%param'", "'%parse-param'", "'%prec'", "'%precedence'", 
		"'%printer'", "'%require'", "'%right'", "'%skeleton'", "'%start'", "'%term'", 
		"'%token'", null, "'%type'", "'%union'", "'%verbose'", "'%yacc'", null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "':'", "'='", null, null, "'|'", "';'", null, "'<*>'", "'<>'", 
		null, null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SC_EPILOGUE", "PercentPercent", "NONASSOC", "CODE", "PERCENT_DEBUG", 
		"DEFAULT_PREC", "DEFINE", "DEFINES", "DESTRUCTOR", "DPREC", "EMPTY_RULE", 
		"EXPECT", "EXPECT_RR", "PERCENT_FILE_PREFIX", "INITIAL_ACTION", "GLR_PARSER", 
		"LANGUAGE", "PERCENT_LEFT", "LEX", "LOCATIONS", "MERGE", "NO_DEFAULT_PREC", 
		"NO_LINES", "PERCENT_NONASSOC", "NONDETERMINISTIC_PARSER", "NTERM", "PARAM", 
		"PARSE", "PERCENT_PREC", "PRECEDENCE", "PRINTER", "REQUIRE", "PERCENT_RIGHT", 
		"SKELETON", "PERCENT_START", "TOKEN", "PERCENT_TOKEN", "TOKEN_TABLE", 
		"PERCENT_TYPE", "PERCENT_UNION", "VERBOSE", "PERCENT_YACC", "PERCENT_PURE_PARSER", 
		"PERCENT_NAME_PREFIX", "OBS_DEFAULT_PREC", "OBS_PERCENT_ERROR_VERBOSE", 
		"OBS_EXPECT_RR", "OBS_PERCENT_FILE_PREFIX", "OBS_FIXED_OUTPUT", "OBS_NO_DEFAULT_PREC", 
		"OBS_NO_LINES", "OBS_OUTPUT", "OBS_TOKEN_TABLE", "BRACED_CODE", "BRACED_PREDICATE", 
		"BRACKETED_ID", "CHAR", "COLON", "EQUAL", "ID", "PERCENT_PERCENT", "PIPE", 
		"SEMICOLON", "TAG", "TAG_ANY", "TAG_NONE", "STRING", "INT", "LPAREN", 
		"RPAREN", "BLOCK_COMMENT", "LINE_COMMENT", "WS", "PROLOGUE", "EPILOGUE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BisonParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BisonParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BisonParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BisonParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InputContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Prologue_declarationsContext prologue_declarations() {
			return GetRuleContext<Prologue_declarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PercentPercent() { return GetToken(BisonParser.PercentPercent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bison_grammarContext bison_grammar() {
			return GetRuleContext<Bison_grammarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Epilogue_optContext epilogue_opt() {
			return GetRuleContext<Epilogue_optContext>(0);
		}
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterInput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitInput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 0, RULE_input);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			prologue_declarations(0);
			State = 75;
			Match(PercentPercent);
			State = 76;
			bison_grammar(0);
			State = 77;
			epilogue_opt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prologue_declarationsContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Prologue_declarationsContext prologue_declarations() {
			return GetRuleContext<Prologue_declarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prologue_declarationContext prologue_declaration() {
			return GetRuleContext<Prologue_declarationContext>(0);
		}
		public Prologue_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prologue_declarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterPrologue_declarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitPrologue_declarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrologue_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Prologue_declarationsContext prologue_declarations() {
		return prologue_declarations(0);
	}

	private Prologue_declarationsContext prologue_declarations(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Prologue_declarationsContext _localctx = new Prologue_declarationsContext(Context, _parentState);
		Prologue_declarationsContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_prologue_declarations, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			}
			Context.Stop = TokenStream.LT(-1);
			State = 84;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Prologue_declarationsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_prologue_declarations);
					State = 80;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 81;
					prologue_declaration();
					}
					} 
				}
				State = 86;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Prologue_declarationContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Grammar_declarationContext grammar_declaration() {
			return GetRuleContext<Grammar_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROLOGUE() { return GetToken(BisonParser.PROLOGUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_DEBUG() { return GetToken(BisonParser.PERCENT_DEBUG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCATIONS() { return GetToken(BisonParser.LOCATIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(BisonParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINES() { return GetToken(BisonParser.DEFINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(BisonParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBS_PERCENT_ERROR_VERBOSE() { return GetToken(BisonParser.OBS_PERCENT_ERROR_VERBOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPECT() { return GetToken(BisonParser.EXPECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(BisonParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPECT_RR() { return GetToken(BisonParser.EXPECT_RR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_FILE_PREFIX() { return GetToken(BisonParser.PERCENT_FILE_PREFIX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLR_PARSER() { return GetToken(BisonParser.GLR_PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_ACTION() { return GetToken(BisonParser.INITIAL_ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext[] actionBlock() {
			return GetRuleContexts<ActionBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock(int i) {
			return GetRuleContext<ActionBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(BisonParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_NAME_PREFIX() { return GetToken(BisonParser.PERCENT_NAME_PREFIX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_LINES() { return GetToken(BisonParser.NO_LINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONDETERMINISTIC_PARSER() { return GetToken(BisonParser.NONDETERMINISTIC_PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBS_OUTPUT() { return GetToken(BisonParser.OBS_OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM() { return GetToken(BisonParser.PARAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_PURE_PARSER() { return GetToken(BisonParser.PERCENT_PURE_PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSE() { return GetToken(BisonParser.PARSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEX() { return GetToken(BisonParser.LEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE() { return GetToken(BisonParser.REQUIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKELETON() { return GetToken(BisonParser.SKELETON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_TABLE() { return GetToken(BisonParser.TOKEN_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBOSE() { return GetToken(BisonParser.VERBOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_YACC() { return GetToken(BisonParser.PERCENT_YACC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(BisonParser.SEMICOLON, 0); }
		public Prologue_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prologue_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterPrologue_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitPrologue_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrologue_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Prologue_declarationContext prologue_declaration() {
		Prologue_declarationContext _localctx = new Prologue_declarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_prologue_declaration);
		try {
			int _alt;
			State = 135;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 87;
				grammar_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 88;
				Match(PROLOGUE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 89;
				Match(PERCENT_DEBUG);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 90;
				Match(LOCATIONS);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 91;
				Match(DEFINE);
				State = 92;
				variable();
				State = 93;
				value();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 95;
				Match(DEFINES);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 96;
				Match(DEFINES);
				State = 97;
				Match(STRING);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 98;
				Match(OBS_PERCENT_ERROR_VERBOSE);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 99;
				Match(EXPECT);
				State = 100;
				Match(INT);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 101;
				Match(EXPECT_RR);
				State = 102;
				Match(INT);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 103;
				Match(PERCENT_FILE_PREFIX);
				State = 104;
				Match(STRING);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 105;
				Match(GLR_PARSER);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 106;
				Match(INITIAL_ACTION);
				State = 107;
				actionBlock();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 108;
				Match(LANGUAGE);
				State = 109;
				Match(STRING);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 110;
				Match(PERCENT_NAME_PREFIX);
				State = 111;
				Match(STRING);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 112;
				Match(NO_LINES);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 113;
				Match(NONDETERMINISTIC_PARSER);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 114;
				Match(OBS_OUTPUT);
				State = 115;
				Match(STRING);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 116;
				Match(PARAM);
				State = 117;
				@params(0);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 118;
				Match(PERCENT_PURE_PARSER);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 119;
				Match(PARSE);
				State = 121;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 120;
						actionBlock();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 123;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 125;
				Match(LEX);
				State = 126;
				actionBlock();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 127;
				Match(REQUIRE);
				State = 128;
				Match(STRING);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 129;
				Match(SKELETON);
				State = 130;
				Match(STRING);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 131;
				Match(TOKEN_TABLE);
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 132;
				Match(VERBOSE);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 133;
				Match(PERCENT_YACC);
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 134;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		return @params(0);
	}

	private ParamsContext @params(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ParamsContext _localctx = new ParamsContext(Context, _parentState);
		ParamsContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_params, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 138;
			actionBlock();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 144;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ParamsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_params);
					State = 140;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 141;
					actionBlock();
					}
					} 
				}
				State = 146;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Grammar_declarationContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_declarationContext symbol_declaration() {
			return GetRuleContext<Symbol_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_START() { return GetToken(BisonParser.PERCENT_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_props_typeContext code_props_type() {
			return GetRuleContext<Code_props_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_symlistContext generic_symlist() {
			return GetRuleContext<Generic_symlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_PREC() { return GetToken(BisonParser.DEFAULT_PREC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_DEFAULT_PREC() { return GetToken(BisonParser.NO_DEFAULT_PREC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODE() { return GetToken(BisonParser.CODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(BisonParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_UNION() { return GetToken(BisonParser.PERCENT_UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Union_nameContext union_name() {
			return GetRuleContext<Union_nameContext>(0);
		}
		public Grammar_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammar_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterGrammar_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitGrammar_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrammar_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grammar_declarationContext grammar_declaration() {
		Grammar_declarationContext _localctx = new Grammar_declarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_grammar_declaration);
		try {
			State = 165;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 147;
				symbol_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 148;
				Match(PERCENT_START);
				State = 149;
				symbol();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 150;
				code_props_type();
				State = 151;
				actionBlock();
				State = 152;
				generic_symlist(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 154;
				Match(DEFAULT_PREC);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 155;
				Match(NO_DEFAULT_PREC);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 156;
				Match(CODE);
				State = 157;
				actionBlock();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 158;
				Match(CODE);
				State = 159;
				Match(ID);
				State = 160;
				actionBlock();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 161;
				Match(PERCENT_UNION);
				State = 162;
				union_name();
				State = 163;
				actionBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_props_typeContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESTRUCTOR() { return GetToken(BisonParser.DESTRUCTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINTER() { return GetToken(BisonParser.PRINTER, 0); }
		public Code_props_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_props_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterCode_props_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitCode_props_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode_props_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Code_props_typeContext code_props_type() {
		Code_props_typeContext _localctx = new Code_props_typeContext(Context, State);
		EnterRule(_localctx, 10, RULE_code_props_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			_la = TokenStream.LA(1);
			if ( !(_la==DESTRUCTOR || _la==PRINTER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Union_nameContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(BisonParser.ID, 0); }
		public Union_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_union_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterUnion_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitUnion_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnion_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Union_nameContext union_name() {
		Union_nameContext _localctx = new Union_nameContext(Context, State);
		EnterRule(_localctx, 12, RULE_union_name);
		try {
			State = 171;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BRACED_CODE:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 170;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_declarationContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTERM() { return GetToken(BisonParser.NTERM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nterm_declsContext nterm_decls() {
			return GetRuleContext<Nterm_declsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_TOKEN() { return GetToken(BisonParser.PERCENT_TOKEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Token_declsContext token_decls() {
			return GetRuleContext<Token_declsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_TYPE() { return GetToken(BisonParser.PERCENT_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_declsContext symbol_decls() {
			return GetRuleContext<Symbol_declsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Precedence_declaratorContext precedence_declarator() {
			return GetRuleContext<Precedence_declaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Token_decls_for_precContext token_decls_for_prec() {
			return GetRuleContext<Token_decls_for_precContext>(0);
		}
		public Symbol_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterSymbol_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitSymbol_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_declarationContext symbol_declaration() {
		Symbol_declarationContext _localctx = new Symbol_declarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_symbol_declaration);
		try {
			State = 182;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NTERM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 173;
				Match(NTERM);
				State = 174;
				nterm_decls();
				}
				break;
			case PERCENT_TOKEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 175;
				Match(PERCENT_TOKEN);
				State = 176;
				token_decls();
				}
				break;
			case PERCENT_TYPE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 177;
				Match(PERCENT_TYPE);
				State = 178;
				symbol_decls(0);
				}
				break;
			case PERCENT_LEFT:
			case PERCENT_NONASSOC:
			case PRECEDENCE:
			case PERCENT_RIGHT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 179;
				precedence_declarator();
				State = 180;
				token_decls_for_prec(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Precedence_declaratorContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_LEFT() { return GetToken(BisonParser.PERCENT_LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_RIGHT() { return GetToken(BisonParser.PERCENT_RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_NONASSOC() { return GetToken(BisonParser.PERCENT_NONASSOC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDENCE() { return GetToken(BisonParser.PRECEDENCE, 0); }
		public Precedence_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precedence_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterPrecedence_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitPrecedence_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecedence_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Precedence_declaratorContext precedence_declarator() {
		Precedence_declaratorContext _localctx = new Precedence_declaratorContext(Context, State);
		EnterRule(_localctx, 16, RULE_precedence_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PERCENT_LEFT) | (1L << PERCENT_NONASSOC) | (1L << PRECEDENCE) | (1L << PERCENT_RIGHT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tag_optContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG() { return GetToken(BisonParser.TAG, 0); }
		public Tag_optContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tag_opt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterTag_opt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitTag_opt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTag_opt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tag_optContext tag_opt() {
		Tag_optContext _localctx = new Tag_optContext(Context, State);
		EnterRule(_localctx, 18, RULE_tag_opt);
		try {
			State = 188;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BRACED_CODE:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case TAG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 187;
				Match(TAG);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_symlistContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Generic_symlist_itemContext generic_symlist_item() {
			return GetRuleContext<Generic_symlist_itemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_symlistContext generic_symlist() {
			return GetRuleContext<Generic_symlistContext>(0);
		}
		public Generic_symlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_symlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterGeneric_symlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitGeneric_symlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_symlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_symlistContext generic_symlist() {
		return generic_symlist(0);
	}

	private Generic_symlistContext generic_symlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Generic_symlistContext _localctx = new Generic_symlistContext(Context, _parentState);
		Generic_symlistContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_generic_symlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 191;
			generic_symlist_item();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 197;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Generic_symlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_generic_symlist);
					State = 193;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 194;
					generic_symlist_item();
					}
					} 
				}
				State = 199;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Generic_symlist_itemContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagContext tag() {
			return GetRuleContext<TagContext>(0);
		}
		public Generic_symlist_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_symlist_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterGeneric_symlist_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitGeneric_symlist_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_symlist_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_symlist_itemContext generic_symlist_item() {
		Generic_symlist_itemContext _localctx = new Generic_symlist_itemContext(Context, State);
		EnterRule(_localctx, 22, RULE_generic_symlist_item);
		try {
			State = 202;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
			case ID:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 200;
				symbol();
				}
				break;
			case TAG:
			case TAG_ANY:
			case TAG_NONE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 201;
				tag();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG() { return GetToken(BisonParser.TAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG_ANY() { return GetToken(BisonParser.TAG_ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG_NONE() { return GetToken(BisonParser.TAG_NONE, 0); }
		public TagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterTag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitTag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagContext tag() {
		TagContext _localctx = new TagContext(Context, State);
		EnterRule(_localctx, 24, RULE_tag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TAG - 64)) | (1L << (TAG_ANY - 64)) | (1L << (TAG_NONE - 64)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nterm_declsContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Token_declsContext token_decls() {
			return GetRuleContext<Token_declsContext>(0);
		}
		public Nterm_declsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nterm_decls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterNterm_decls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitNterm_decls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNterm_decls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Nterm_declsContext nterm_decls() {
		Nterm_declsContext _localctx = new Nterm_declsContext(Context, State);
		EnterRule(_localctx, 26, RULE_nterm_decls);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			token_decls();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Token_declsContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Token_decl_1Context[] token_decl_1() {
			return GetRuleContexts<Token_decl_1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Token_decl_1Context token_decl_1(int i) {
			return GetRuleContext<Token_decl_1Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TAG() { return GetTokens(BisonParser.TAG); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG(int i) {
			return GetToken(BisonParser.TAG, i);
		}
		public Token_declsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_token_decls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterToken_decls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitToken_decls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToken_decls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Token_declsContext token_decls() {
		Token_declsContext _localctx = new Token_declsContext(Context, State);
		EnterRule(_localctx, 28, RULE_token_decls);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
			case ID:
				{
				}
				break;
			case TAG:
				{
				State = 209;
				Match(TAG);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 212;
			token_decl_1();
			State = 217;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 213;
					Match(TAG);
					State = 214;
					token_decl_1();
					}
					} 
				}
				State = 219;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Token_decl_1Context : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Token_declContext[] token_decl() {
			return GetRuleContexts<Token_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Token_declContext token_decl(int i) {
			return GetRuleContext<Token_declContext>(i);
		}
		public Token_decl_1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_token_decl_1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterToken_decl_1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitToken_decl_1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToken_decl_1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Token_decl_1Context token_decl_1() {
		Token_decl_1Context _localctx = new Token_decl_1Context(Context, State);
		EnterRule(_localctx, 30, RULE_token_decl_1);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			token_decl();
			State = 224;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 221;
					token_decl();
					}
					} 
				}
				State = 226;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Token_declContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Int_optContext int_opt() {
			return GetRuleContext<Int_optContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BisonParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BisonParser.RPAREN, 0); }
		public Token_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_token_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterToken_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitToken_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToken_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Token_declContext token_decl() {
		Token_declContext _localctx = new Token_declContext(Context, State);
		EnterRule(_localctx, 32, RULE_token_decl);
		try {
			State = 238;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 227;
				id();
				State = 228;
				int_opt();
				State = 229;
				alias();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 231;
				id();
				State = 232;
				id();
				State = 233;
				Match(LPAREN);
				State = 234;
				id();
				State = 235;
				Match(RPAREN);
				State = 236;
				alias();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_optContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(BisonParser.INT, 0); }
		public Int_optContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_opt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterInt_opt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitInt_opt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt_opt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Int_optContext int_opt() {
		Int_optContext _localctx = new Int_optContext(Context, State);
		EnterRule(_localctx, 34, RULE_int_opt);
		try {
			State = 242;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 241;
				Match(INT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public String_as_idContext string_as_id() {
			return GetRuleContext<String_as_idContext>(0);
		}
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 36, RULE_alias);
		try {
			State = 246;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 245;
				string_as_id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Token_decls_for_precContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Token_decl_for_prec_1Context token_decl_for_prec_1() {
			return GetRuleContext<Token_decl_for_prec_1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG() { return GetToken(BisonParser.TAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Token_decls_for_precContext token_decls_for_prec() {
			return GetRuleContext<Token_decls_for_precContext>(0);
		}
		public Token_decls_for_precContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_token_decls_for_prec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterToken_decls_for_prec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitToken_decls_for_prec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToken_decls_for_prec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Token_decls_for_precContext token_decls_for_prec() {
		return token_decls_for_prec(0);
	}

	private Token_decls_for_precContext token_decls_for_prec(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Token_decls_for_precContext _localctx = new Token_decls_for_precContext(Context, _parentState);
		Token_decls_for_precContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_token_decls_for_prec, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
			case ID:
			case STRING:
				{
				State = 249;
				token_decl_for_prec_1(0);
				}
				break;
			case TAG:
				{
				State = 250;
				Match(TAG);
				State = 251;
				token_decl_for_prec_1(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 259;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Token_decls_for_precContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_token_decls_for_prec);
					State = 254;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 255;
					Match(TAG);
					State = 256;
					token_decl_for_prec_1(0);
					}
					} 
				}
				State = 261;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Token_decl_for_prec_1Context : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Token_decl_for_precContext token_decl_for_prec() {
			return GetRuleContext<Token_decl_for_precContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Token_decl_for_prec_1Context token_decl_for_prec_1() {
			return GetRuleContext<Token_decl_for_prec_1Context>(0);
		}
		public Token_decl_for_prec_1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_token_decl_for_prec_1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterToken_decl_for_prec_1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitToken_decl_for_prec_1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToken_decl_for_prec_1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Token_decl_for_prec_1Context token_decl_for_prec_1() {
		return token_decl_for_prec_1(0);
	}

	private Token_decl_for_prec_1Context token_decl_for_prec_1(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Token_decl_for_prec_1Context _localctx = new Token_decl_for_prec_1Context(Context, _parentState);
		Token_decl_for_prec_1Context _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_token_decl_for_prec_1, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 263;
			token_decl_for_prec();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 269;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Token_decl_for_prec_1Context(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_token_decl_for_prec_1);
					State = 265;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 266;
					token_decl_for_prec();
					}
					} 
				}
				State = 271;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Token_decl_for_precContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Int_optContext int_opt() {
			return GetRuleContext<Int_optContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_as_idContext string_as_id() {
			return GetRuleContext<String_as_idContext>(0);
		}
		public Token_decl_for_precContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_token_decl_for_prec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterToken_decl_for_prec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitToken_decl_for_prec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToken_decl_for_prec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Token_decl_for_precContext token_decl_for_prec() {
		Token_decl_for_precContext _localctx = new Token_decl_for_precContext(Context, State);
		EnterRule(_localctx, 42, RULE_token_decl_for_prec);
		try {
			State = 276;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 272;
				id();
				State = 273;
				int_opt();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 275;
				string_as_id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_declsContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_decl_1Context symbol_decl_1() {
			return GetRuleContext<Symbol_decl_1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG() { return GetToken(BisonParser.TAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_declsContext symbol_decls() {
			return GetRuleContext<Symbol_declsContext>(0);
		}
		public Symbol_declsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_decls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterSymbol_decls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitSymbol_decls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol_decls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_declsContext symbol_decls() {
		return symbol_decls(0);
	}

	private Symbol_declsContext symbol_decls(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Symbol_declsContext _localctx = new Symbol_declsContext(Context, _parentState);
		Symbol_declsContext _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_symbol_decls, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
			case ID:
			case STRING:
				{
				State = 279;
				symbol_decl_1(0);
				}
				break;
			case TAG:
				{
				State = 280;
				Match(TAG);
				State = 281;
				symbol_decl_1(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 289;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Symbol_declsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_symbol_decls);
					State = 284;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 285;
					Match(TAG);
					State = 286;
					symbol_decl_1(0);
					}
					} 
				}
				State = 291;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Symbol_decl_1Context : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_decl_1Context symbol_decl_1() {
			return GetRuleContext<Symbol_decl_1Context>(0);
		}
		public Symbol_decl_1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_decl_1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterSymbol_decl_1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitSymbol_decl_1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol_decl_1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_decl_1Context symbol_decl_1() {
		return symbol_decl_1(0);
	}

	private Symbol_decl_1Context symbol_decl_1(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Symbol_decl_1Context _localctx = new Symbol_decl_1Context(Context, _parentState);
		Symbol_decl_1Context _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_symbol_decl_1, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 293;
			symbol();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 299;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Symbol_decl_1Context(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_symbol_decl_1);
					State = 295;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 296;
					symbol();
					}
					} 
				}
				State = 301;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Bison_grammarContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rules_or_grammar_declarationContext rules_or_grammar_declaration() {
			return GetRuleContext<Rules_or_grammar_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bison_grammarContext bison_grammar() {
			return GetRuleContext<Bison_grammarContext>(0);
		}
		public Bison_grammarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bison_grammar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterBison_grammar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitBison_grammar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBison_grammar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bison_grammarContext bison_grammar() {
		return bison_grammar(0);
	}

	private Bison_grammarContext bison_grammar(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Bison_grammarContext _localctx = new Bison_grammarContext(Context, _parentState);
		Bison_grammarContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_bison_grammar, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 303;
			rules_or_grammar_declaration();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 309;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Bison_grammarContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_bison_grammar);
					State = 305;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 306;
					rules_or_grammar_declaration();
					}
					} 
				}
				State = 311;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Rules_or_grammar_declarationContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RulesContext rules() {
			return GetRuleContext<RulesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Grammar_declarationContext grammar_declaration() {
			return GetRuleContext<Grammar_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(BisonParser.SEMICOLON, 0); }
		public Rules_or_grammar_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rules_or_grammar_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterRules_or_grammar_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitRules_or_grammar_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRules_or_grammar_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rules_or_grammar_declarationContext rules_or_grammar_declaration() {
		Rules_or_grammar_declarationContext _localctx = new Rules_or_grammar_declarationContext(Context, State);
		EnterRule(_localctx, 50, RULE_rules_or_grammar_declaration);
		try {
			State = 316;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 312;
				rules();
				}
				break;
			case CODE:
			case DEFAULT_PREC:
			case DESTRUCTOR:
			case PERCENT_LEFT:
			case NO_DEFAULT_PREC:
			case PERCENT_NONASSOC:
			case NTERM:
			case PRECEDENCE:
			case PRINTER:
			case PERCENT_RIGHT:
			case PERCENT_START:
			case PERCENT_TOKEN:
			case PERCENT_TYPE:
			case PERCENT_UNION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 313;
				grammar_declaration();
				State = 314;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_ref_optContext named_ref_opt() {
			return GetRuleContext<Named_ref_optContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BisonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rhses_1Context rhses_1() {
			return GetRuleContext<Rhses_1Context>(0);
		}
		public RulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rules; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterRules(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitRules(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRules(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulesContext rules() {
		RulesContext _localctx = new RulesContext(Context, State);
		EnterRule(_localctx, 52, RULE_rules);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318;
			id();
			State = 319;
			named_ref_opt();
			State = 320;
			Match(COLON);
			State = 321;
			rhses_1();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rhses_1Context : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RhsContext[] rhs() {
			return GetRuleContexts<RhsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RhsContext rhs(int i) {
			return GetRuleContext<RhsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(BisonParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PIPE() { return GetTokens(BisonParser.PIPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE(int i) {
			return GetToken(BisonParser.PIPE, i);
		}
		public Rhses_1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rhses_1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterRhses_1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitRhses_1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRhses_1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rhses_1Context rhses_1() {
		Rhses_1Context _localctx = new Rhses_1Context(Context, State);
		EnterRule(_localctx, 54, RULE_rhses_1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			rhs(0);
			State = 328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PIPE) {
				{
				{
				State = 324;
				Match(PIPE);
				State = 325;
				rhs(0);
				}
				}
				State = 330;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 331;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RhsContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RhsContext rhs() {
			return GetRuleContext<RhsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_ref_optContext named_ref_opt() {
			return GetRuleContext<Named_ref_optContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Tag_optContext tag_opt() {
			return GetRuleContext<Tag_optContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRACED_PREDICATE() { return GetToken(BisonParser.BRACED_PREDICATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY_RULE() { return GetToken(BisonParser.EMPTY_RULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_PREC() { return GetToken(BisonParser.PERCENT_PREC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DPREC() { return GetToken(BisonParser.DPREC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(BisonParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(BisonParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG() { return GetToken(BisonParser.TAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPECT() { return GetToken(BisonParser.EXPECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPECT_RR() { return GetToken(BisonParser.EXPECT_RR, 0); }
		public RhsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rhs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterRhs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitRhs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRhs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RhsContext rhs() {
		return rhs(0);
	}

	private RhsContext rhs(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RhsContext _localctx = new RhsContext(Context, _parentState);
		RhsContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_rhs, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			}
			Context.Stop = TokenStream.LT(-1);
			State = 364;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 362;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
					case 1:
						{
						_localctx = new RhsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_rhs);
						State = 334;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 335;
						symbol();
						State = 336;
						named_ref_opt();
						}
						break;
					case 2:
						{
						_localctx = new RhsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_rhs);
						State = 338;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 339;
						tag_opt();
						State = 340;
						actionBlock();
						State = 341;
						named_ref_opt();
						}
						break;
					case 3:
						{
						_localctx = new RhsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_rhs);
						State = 343;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 344;
						Match(BRACED_PREDICATE);
						}
						break;
					case 4:
						{
						_localctx = new RhsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_rhs);
						State = 345;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 346;
						Match(EMPTY_RULE);
						}
						break;
					case 5:
						{
						_localctx = new RhsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_rhs);
						State = 347;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 348;
						Match(PERCENT_PREC);
						State = 349;
						symbol();
						}
						break;
					case 6:
						{
						_localctx = new RhsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_rhs);
						State = 350;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 351;
						Match(DPREC);
						State = 352;
						Match(INT);
						}
						break;
					case 7:
						{
						_localctx = new RhsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_rhs);
						State = 353;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 354;
						Match(MERGE);
						State = 355;
						Match(TAG);
						}
						break;
					case 8:
						{
						_localctx = new RhsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_rhs);
						State = 356;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 357;
						Match(EXPECT);
						State = 358;
						Match(INT);
						}
						break;
					case 9:
						{
						_localctx = new RhsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_rhs);
						State = 359;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 360;
						Match(EXPECT_RR);
						State = 361;
						Match(INT);
						}
						break;
					}
					} 
				}
				State = 366;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Named_ref_optContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRACKETED_ID() { return GetToken(BisonParser.BRACKETED_ID, 0); }
		public Named_ref_optContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_ref_opt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterNamed_ref_opt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitNamed_ref_opt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamed_ref_opt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Named_ref_optContext named_ref_opt() {
		Named_ref_optContext _localctx = new Named_ref_optContext(Context, State);
		EnterRule(_localctx, 58, RULE_named_ref_opt);
		try {
			State = 369;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 368;
				Match(BRACKETED_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(BisonParser.ID, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 60, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(BisonParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(BisonParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 62, RULE_value);
		try {
			State = 377;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 374;
				Match(ID);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 375;
				Match(STRING);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 376;
				actionBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(BisonParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(BisonParser.CHAR, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 64, RULE_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379;
			_la = TokenStream.LA(1);
			if ( !(_la==CHAR || _la==ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_as_idContext string_as_id() {
			return GetRuleContext<String_as_idContext>(0);
		}
		public SymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolContext symbol() {
		SymbolContext _localctx = new SymbolContext(Context, State);
		EnterRule(_localctx, 66, RULE_symbol);
		try {
			State = 383;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 381;
				id();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 382;
				string_as_id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_as_idContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(BisonParser.STRING, 0); }
		public String_as_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_as_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterString_as_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitString_as_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_as_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_as_idContext string_as_id() {
		String_as_idContext _localctx = new String_as_idContext(Context, State);
		EnterRule(_localctx, 68, RULE_string_as_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Epilogue_optContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PercentPercent() { return GetToken(BisonParser.PercentPercent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPILOGUE() { return GetToken(BisonParser.EPILOGUE, 0); }
		public Epilogue_optContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_epilogue_opt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterEpilogue_opt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitEpilogue_opt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEpilogue_opt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Epilogue_optContext epilogue_opt() {
		Epilogue_optContext _localctx = new Epilogue_optContext(Context, State);
		EnterRule(_localctx, 70, RULE_epilogue_opt);
		int _la;
		try {
			State = 392;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Eof:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case PercentPercent:
				EnterOuterAlt(_localctx, 2);
				{
				State = 388;
				Match(PercentPercent);
				State = 390;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EPILOGUE) {
					{
					State = 389;
					Match(EPILOGUE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionBlockContext : AntlrTreeEditing.AntlrDOM.ObserverParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRACED_CODE() { return GetToken(BisonParser.BRACED_CODE, 0); }
		public ActionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterActionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitActionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBisonParserVisitor<TResult> typedVisitor = visitor as IBisonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionBlockContext actionBlock() {
		ActionBlockContext _localctx = new ActionBlockContext(Context, State);
		EnterRule(_localctx, 72, RULE_actionBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394;
			Match(BRACED_CODE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return prologue_declarations_sempred((Prologue_declarationsContext)_localctx, predIndex);
		case 3: return params_sempred((ParamsContext)_localctx, predIndex);
		case 10: return generic_symlist_sempred((Generic_symlistContext)_localctx, predIndex);
		case 19: return token_decls_for_prec_sempred((Token_decls_for_precContext)_localctx, predIndex);
		case 20: return token_decl_for_prec_1_sempred((Token_decl_for_prec_1Context)_localctx, predIndex);
		case 22: return symbol_decls_sempred((Symbol_declsContext)_localctx, predIndex);
		case 23: return symbol_decl_1_sempred((Symbol_decl_1Context)_localctx, predIndex);
		case 24: return bison_grammar_sempred((Bison_grammarContext)_localctx, predIndex);
		case 28: return rhs_sempred((RhsContext)_localctx, predIndex);
		}
		return true;
	}
	private bool prologue_declarations_sempred(Prologue_declarationsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool params_sempred(ParamsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool generic_symlist_sempred(Generic_symlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool token_decls_for_prec_sempred(Token_decls_for_precContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 1);
		}
		return true;
	}
	private bool token_decl_for_prec_1_sempred(Token_decl_for_prec_1Context _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool symbol_decls_sempred(Symbol_declsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool symbol_decl_1_sempred(Symbol_decl_1Context _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool bison_grammar_sempred(Bison_grammarContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 1);
		}
		return true;
	}
	private bool rhs_sempred(RhsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 9);
		case 9: return Precpred(Context, 8);
		case 10: return Precpred(Context, 7);
		case 11: return Precpred(Context, 6);
		case 12: return Precpred(Context, 5);
		case 13: return Precpred(Context, 4);
		case 14: return Precpred(Context, 3);
		case 15: return Precpred(Context, 2);
		case 16: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,75,397,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,5,1,83,8,1,10,1,12,1,86,9,1,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,4,2,
		122,8,2,11,2,12,2,123,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,136,
		8,2,1,3,1,3,1,3,1,3,1,3,5,3,143,8,3,10,3,12,3,146,9,3,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,166,8,4,1,
		5,1,5,1,6,1,6,3,6,172,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,183,
		8,7,1,8,1,8,1,9,1,9,3,9,189,8,9,1,10,1,10,1,10,1,10,1,10,5,10,196,8,10,
		10,10,12,10,199,9,10,1,11,1,11,3,11,203,8,11,1,12,1,12,1,13,1,13,1,14,
		1,14,3,14,211,8,14,1,14,1,14,1,14,5,14,216,8,14,10,14,12,14,219,9,14,1,
		15,1,15,5,15,223,8,15,10,15,12,15,226,9,15,1,16,1,16,1,16,1,16,1,16,1,
		16,1,16,1,16,1,16,1,16,1,16,3,16,239,8,16,1,17,1,17,3,17,243,8,17,1,18,
		1,18,3,18,247,8,18,1,19,1,19,1,19,1,19,3,19,253,8,19,1,19,1,19,1,19,5,
		19,258,8,19,10,19,12,19,261,9,19,1,20,1,20,1,20,1,20,1,20,5,20,268,8,20,
		10,20,12,20,271,9,20,1,21,1,21,1,21,1,21,3,21,277,8,21,1,22,1,22,1,22,
		1,22,3,22,283,8,22,1,22,1,22,1,22,5,22,288,8,22,10,22,12,22,291,9,22,1,
		23,1,23,1,23,1,23,1,23,5,23,298,8,23,10,23,12,23,301,9,23,1,24,1,24,1,
		24,1,24,1,24,5,24,308,8,24,10,24,12,24,311,9,24,1,25,1,25,1,25,1,25,3,
		25,317,8,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,5,27,327,8,27,10,27,
		12,27,330,9,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
		1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
		1,28,1,28,1,28,1,28,1,28,1,28,5,28,363,8,28,10,28,12,28,366,9,28,1,29,
		1,29,3,29,370,8,29,1,30,1,30,1,31,1,31,1,31,1,31,3,31,378,8,31,1,32,1,
		32,1,33,1,33,3,33,384,8,33,1,34,1,34,1,35,1,35,1,35,3,35,391,8,35,3,35,
		393,8,35,1,36,1,36,1,36,0,9,2,6,20,38,40,44,46,48,56,37,0,2,4,6,8,10,12,
		14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
		62,64,66,68,70,72,0,4,2,0,9,9,31,31,4,0,18,18,24,24,30,30,33,33,1,0,64,
		66,2,0,57,57,60,60,435,0,74,1,0,0,0,2,79,1,0,0,0,4,135,1,0,0,0,6,137,1,
		0,0,0,8,165,1,0,0,0,10,167,1,0,0,0,12,171,1,0,0,0,14,182,1,0,0,0,16,184,
		1,0,0,0,18,188,1,0,0,0,20,190,1,0,0,0,22,202,1,0,0,0,24,204,1,0,0,0,26,
		206,1,0,0,0,28,210,1,0,0,0,30,220,1,0,0,0,32,238,1,0,0,0,34,242,1,0,0,
		0,36,246,1,0,0,0,38,252,1,0,0,0,40,262,1,0,0,0,42,276,1,0,0,0,44,282,1,
		0,0,0,46,292,1,0,0,0,48,302,1,0,0,0,50,316,1,0,0,0,52,318,1,0,0,0,54,323,
		1,0,0,0,56,333,1,0,0,0,58,369,1,0,0,0,60,371,1,0,0,0,62,377,1,0,0,0,64,
		379,1,0,0,0,66,383,1,0,0,0,68,385,1,0,0,0,70,392,1,0,0,0,72,394,1,0,0,
		0,74,75,3,2,1,0,75,76,5,2,0,0,76,77,3,48,24,0,77,78,3,70,35,0,78,1,1,0,
		0,0,79,84,6,1,-1,0,80,81,10,1,0,0,81,83,3,4,2,0,82,80,1,0,0,0,83,86,1,
		0,0,0,84,82,1,0,0,0,84,85,1,0,0,0,85,3,1,0,0,0,86,84,1,0,0,0,87,136,3,
		8,4,0,88,136,5,74,0,0,89,136,5,5,0,0,90,136,5,20,0,0,91,92,5,7,0,0,92,
		93,3,60,30,0,93,94,3,62,31,0,94,136,1,0,0,0,95,136,5,8,0,0,96,97,5,8,0,
		0,97,136,5,67,0,0,98,136,5,46,0,0,99,100,5,12,0,0,100,136,5,68,0,0,101,
		102,5,13,0,0,102,136,5,68,0,0,103,104,5,14,0,0,104,136,5,67,0,0,105,136,
		5,16,0,0,106,107,5,15,0,0,107,136,3,72,36,0,108,109,5,17,0,0,109,136,5,
		67,0,0,110,111,5,44,0,0,111,136,5,67,0,0,112,136,5,23,0,0,113,136,5,25,
		0,0,114,115,5,52,0,0,115,136,5,67,0,0,116,117,5,27,0,0,117,136,3,6,3,0,
		118,136,5,43,0,0,119,121,5,28,0,0,120,122,3,72,36,0,121,120,1,0,0,0,122,
		123,1,0,0,0,123,121,1,0,0,0,123,124,1,0,0,0,124,136,1,0,0,0,125,126,5,
		19,0,0,126,136,3,72,36,0,127,128,5,32,0,0,128,136,5,67,0,0,129,130,5,34,
		0,0,130,136,5,67,0,0,131,136,5,38,0,0,132,136,5,41,0,0,133,136,5,42,0,
		0,134,136,5,63,0,0,135,87,1,0,0,0,135,88,1,0,0,0,135,89,1,0,0,0,135,90,
		1,0,0,0,135,91,1,0,0,0,135,95,1,0,0,0,135,96,1,0,0,0,135,98,1,0,0,0,135,
		99,1,0,0,0,135,101,1,0,0,0,135,103,1,0,0,0,135,105,1,0,0,0,135,106,1,0,
		0,0,135,108,1,0,0,0,135,110,1,0,0,0,135,112,1,0,0,0,135,113,1,0,0,0,135,
		114,1,0,0,0,135,116,1,0,0,0,135,118,1,0,0,0,135,119,1,0,0,0,135,125,1,
		0,0,0,135,127,1,0,0,0,135,129,1,0,0,0,135,131,1,0,0,0,135,132,1,0,0,0,
		135,133,1,0,0,0,135,134,1,0,0,0,136,5,1,0,0,0,137,138,6,3,-1,0,138,139,
		3,72,36,0,139,144,1,0,0,0,140,141,10,2,0,0,141,143,3,72,36,0,142,140,1,
		0,0,0,143,146,1,0,0,0,144,142,1,0,0,0,144,145,1,0,0,0,145,7,1,0,0,0,146,
		144,1,0,0,0,147,166,3,14,7,0,148,149,5,35,0,0,149,166,3,66,33,0,150,151,
		3,10,5,0,151,152,3,72,36,0,152,153,3,20,10,0,153,166,1,0,0,0,154,166,5,
		6,0,0,155,166,5,22,0,0,156,157,5,4,0,0,157,166,3,72,36,0,158,159,5,4,0,
		0,159,160,5,60,0,0,160,166,3,72,36,0,161,162,5,40,0,0,162,163,3,12,6,0,
		163,164,3,72,36,0,164,166,1,0,0,0,165,147,1,0,0,0,165,148,1,0,0,0,165,
		150,1,0,0,0,165,154,1,0,0,0,165,155,1,0,0,0,165,156,1,0,0,0,165,158,1,
		0,0,0,165,161,1,0,0,0,166,9,1,0,0,0,167,168,7,0,0,0,168,11,1,0,0,0,169,
		172,1,0,0,0,170,172,5,60,0,0,171,169,1,0,0,0,171,170,1,0,0,0,172,13,1,
		0,0,0,173,174,5,26,0,0,174,183,3,26,13,0,175,176,5,37,0,0,176,183,3,28,
		14,0,177,178,5,39,0,0,178,183,3,44,22,0,179,180,3,16,8,0,180,181,3,38,
		19,0,181,183,1,0,0,0,182,173,1,0,0,0,182,175,1,0,0,0,182,177,1,0,0,0,182,
		179,1,0,0,0,183,15,1,0,0,0,184,185,7,1,0,0,185,17,1,0,0,0,186,189,1,0,
		0,0,187,189,5,64,0,0,188,186,1,0,0,0,188,187,1,0,0,0,189,19,1,0,0,0,190,
		191,6,10,-1,0,191,192,3,22,11,0,192,197,1,0,0,0,193,194,10,1,0,0,194,196,
		3,22,11,0,195,193,1,0,0,0,196,199,1,0,0,0,197,195,1,0,0,0,197,198,1,0,
		0,0,198,21,1,0,0,0,199,197,1,0,0,0,200,203,3,66,33,0,201,203,3,24,12,0,
		202,200,1,0,0,0,202,201,1,0,0,0,203,23,1,0,0,0,204,205,7,2,0,0,205,25,
		1,0,0,0,206,207,3,28,14,0,207,27,1,0,0,0,208,211,1,0,0,0,209,211,5,64,
		0,0,210,208,1,0,0,0,210,209,1,0,0,0,211,212,1,0,0,0,212,217,3,30,15,0,
		213,214,5,64,0,0,214,216,3,30,15,0,215,213,1,0,0,0,216,219,1,0,0,0,217,
		215,1,0,0,0,217,218,1,0,0,0,218,29,1,0,0,0,219,217,1,0,0,0,220,224,3,32,
		16,0,221,223,3,32,16,0,222,221,1,0,0,0,223,226,1,0,0,0,224,222,1,0,0,0,
		224,225,1,0,0,0,225,31,1,0,0,0,226,224,1,0,0,0,227,228,3,64,32,0,228,229,
		3,34,17,0,229,230,3,36,18,0,230,239,1,0,0,0,231,232,3,64,32,0,232,233,
		3,64,32,0,233,234,5,69,0,0,234,235,3,64,32,0,235,236,5,70,0,0,236,237,
		3,36,18,0,237,239,1,0,0,0,238,227,1,0,0,0,238,231,1,0,0,0,239,33,1,0,0,
		0,240,243,1,0,0,0,241,243,5,68,0,0,242,240,1,0,0,0,242,241,1,0,0,0,243,
		35,1,0,0,0,244,247,1,0,0,0,245,247,3,68,34,0,246,244,1,0,0,0,246,245,1,
		0,0,0,247,37,1,0,0,0,248,249,6,19,-1,0,249,253,3,40,20,0,250,251,5,64,
		0,0,251,253,3,40,20,0,252,248,1,0,0,0,252,250,1,0,0,0,253,259,1,0,0,0,
		254,255,10,1,0,0,255,256,5,64,0,0,256,258,3,40,20,0,257,254,1,0,0,0,258,
		261,1,0,0,0,259,257,1,0,0,0,259,260,1,0,0,0,260,39,1,0,0,0,261,259,1,0,
		0,0,262,263,6,20,-1,0,263,264,3,42,21,0,264,269,1,0,0,0,265,266,10,1,0,
		0,266,268,3,42,21,0,267,265,1,0,0,0,268,271,1,0,0,0,269,267,1,0,0,0,269,
		270,1,0,0,0,270,41,1,0,0,0,271,269,1,0,0,0,272,273,3,64,32,0,273,274,3,
		34,17,0,274,277,1,0,0,0,275,277,3,68,34,0,276,272,1,0,0,0,276,275,1,0,
		0,0,277,43,1,0,0,0,278,279,6,22,-1,0,279,283,3,46,23,0,280,281,5,64,0,
		0,281,283,3,46,23,0,282,278,1,0,0,0,282,280,1,0,0,0,283,289,1,0,0,0,284,
		285,10,1,0,0,285,286,5,64,0,0,286,288,3,46,23,0,287,284,1,0,0,0,288,291,
		1,0,0,0,289,287,1,0,0,0,289,290,1,0,0,0,290,45,1,0,0,0,291,289,1,0,0,0,
		292,293,6,23,-1,0,293,294,3,66,33,0,294,299,1,0,0,0,295,296,10,1,0,0,296,
		298,3,66,33,0,297,295,1,0,0,0,298,301,1,0,0,0,299,297,1,0,0,0,299,300,
		1,0,0,0,300,47,1,0,0,0,301,299,1,0,0,0,302,303,6,24,-1,0,303,304,3,50,
		25,0,304,309,1,0,0,0,305,306,10,1,0,0,306,308,3,50,25,0,307,305,1,0,0,
		0,308,311,1,0,0,0,309,307,1,0,0,0,309,310,1,0,0,0,310,49,1,0,0,0,311,309,
		1,0,0,0,312,317,3,52,26,0,313,314,3,8,4,0,314,315,5,63,0,0,315,317,1,0,
		0,0,316,312,1,0,0,0,316,313,1,0,0,0,317,51,1,0,0,0,318,319,3,64,32,0,319,
		320,3,58,29,0,320,321,5,58,0,0,321,322,3,54,27,0,322,53,1,0,0,0,323,328,
		3,56,28,0,324,325,5,62,0,0,325,327,3,56,28,0,326,324,1,0,0,0,327,330,1,
		0,0,0,328,326,1,0,0,0,328,329,1,0,0,0,329,331,1,0,0,0,330,328,1,0,0,0,
		331,332,5,63,0,0,332,55,1,0,0,0,333,364,6,28,-1,0,334,335,10,9,0,0,335,
		336,3,66,33,0,336,337,3,58,29,0,337,363,1,0,0,0,338,339,10,8,0,0,339,340,
		3,18,9,0,340,341,3,72,36,0,341,342,3,58,29,0,342,363,1,0,0,0,343,344,10,
		7,0,0,344,363,5,55,0,0,345,346,10,6,0,0,346,363,5,11,0,0,347,348,10,5,
		0,0,348,349,5,29,0,0,349,363,3,66,33,0,350,351,10,4,0,0,351,352,5,10,0,
		0,352,363,5,68,0,0,353,354,10,3,0,0,354,355,5,21,0,0,355,363,5,64,0,0,
		356,357,10,2,0,0,357,358,5,12,0,0,358,363,5,68,0,0,359,360,10,1,0,0,360,
		361,5,13,0,0,361,363,5,68,0,0,362,334,1,0,0,0,362,338,1,0,0,0,362,343,
		1,0,0,0,362,345,1,0,0,0,362,347,1,0,0,0,362,350,1,0,0,0,362,353,1,0,0,
		0,362,356,1,0,0,0,362,359,1,0,0,0,363,366,1,0,0,0,364,362,1,0,0,0,364,
		365,1,0,0,0,365,57,1,0,0,0,366,364,1,0,0,0,367,370,1,0,0,0,368,370,5,56,
		0,0,369,367,1,0,0,0,369,368,1,0,0,0,370,59,1,0,0,0,371,372,5,60,0,0,372,
		61,1,0,0,0,373,378,1,0,0,0,374,378,5,60,0,0,375,378,5,67,0,0,376,378,3,
		72,36,0,377,373,1,0,0,0,377,374,1,0,0,0,377,375,1,0,0,0,377,376,1,0,0,
		0,378,63,1,0,0,0,379,380,7,3,0,0,380,65,1,0,0,0,381,384,3,64,32,0,382,
		384,3,68,34,0,383,381,1,0,0,0,383,382,1,0,0,0,384,67,1,0,0,0,385,386,5,
		67,0,0,386,69,1,0,0,0,387,393,1,0,0,0,388,390,5,2,0,0,389,391,5,75,0,0,
		390,389,1,0,0,0,390,391,1,0,0,0,391,393,1,0,0,0,392,387,1,0,0,0,392,388,
		1,0,0,0,393,71,1,0,0,0,394,395,5,54,0,0,395,73,1,0,0,0,33,84,123,135,144,
		165,171,182,188,197,202,210,217,224,238,242,246,252,259,269,276,282,289,
		299,309,316,328,362,364,369,377,383,390,392
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace LanguageServer
