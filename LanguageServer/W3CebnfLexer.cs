//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from W3CebnfLexer.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LanguageServer {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class W3CebnfLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		PPEQ=1, Q=2, VP=3, M=4, P=5, S=6, OP=7, CP=8, CONSTRAINT=9, COMMENT=10, 
		HEX=11, STRING=12, SET=13, SYMBOL=14, WS=15;
	public const int
		OFF_CHANNEL=2;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "OFF_CHANNEL"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"PPEQ", "Q", "VP", "M", "P", "S", "OP", "CP", "CONSTRAINT", "COMMENT", 
		"HEX", "STRING", "SET", "SYMBOL", "WS", "Symbol", "Hex", "Ws"
	};


	public W3CebnfLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public W3CebnfLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'::='", "'?'", "'|'", "'-'", "'+'", "'*'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "PPEQ", "Q", "VP", "M", "P", "S", "OP", "CP", "CONSTRAINT", "COMMENT", 
		"HEX", "STRING", "SET", "SYMBOL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "W3CebnfLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static W3CebnfLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,15,146,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,
		1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,3,8,58,8,8,1,8,1,8,3,8,62,
		8,8,1,8,1,8,5,8,66,8,8,10,8,12,8,69,9,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,
		9,5,9,79,8,9,10,9,12,9,82,9,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,
		5,11,93,8,11,10,11,12,11,96,9,11,1,11,1,11,1,11,5,11,101,8,11,10,11,12,
		11,104,9,11,1,11,3,11,107,8,11,1,12,1,12,3,12,111,8,12,1,12,1,12,4,12,
		115,8,12,11,12,12,12,116,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,14,1,15,
		1,15,5,15,129,8,15,10,15,12,15,132,9,15,1,16,1,16,1,16,1,16,4,16,138,8,
		16,11,16,12,16,139,1,17,4,17,143,8,17,11,17,12,17,144,5,67,80,94,102,116,
		0,18,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
		14,29,15,31,0,33,0,35,0,1,0,3,5,0,45,46,48,57,65,90,95,95,97,122,3,0,48,
		57,65,70,97,102,3,0,9,10,13,13,32,32,155,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
		0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
		17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
		0,0,0,0,29,1,0,0,0,1,37,1,0,0,0,3,41,1,0,0,0,5,43,1,0,0,0,7,45,1,0,0,0,
		9,47,1,0,0,0,11,49,1,0,0,0,13,51,1,0,0,0,15,53,1,0,0,0,17,55,1,0,0,0,19,
		74,1,0,0,0,21,88,1,0,0,0,23,106,1,0,0,0,25,108,1,0,0,0,27,120,1,0,0,0,
		29,122,1,0,0,0,31,126,1,0,0,0,33,133,1,0,0,0,35,142,1,0,0,0,37,38,5,58,
		0,0,38,39,5,58,0,0,39,40,5,61,0,0,40,2,1,0,0,0,41,42,5,63,0,0,42,4,1,0,
		0,0,43,44,5,124,0,0,44,6,1,0,0,0,45,46,5,45,0,0,46,8,1,0,0,0,47,48,5,43,
		0,0,48,10,1,0,0,0,49,50,5,42,0,0,50,12,1,0,0,0,51,52,5,40,0,0,52,14,1,
		0,0,0,53,54,5,41,0,0,54,16,1,0,0,0,55,57,5,91,0,0,56,58,3,35,17,0,57,56,
		1,0,0,0,57,58,1,0,0,0,58,59,1,0,0,0,59,61,3,31,15,0,60,62,3,35,17,0,61,
		60,1,0,0,0,61,62,1,0,0,0,62,63,1,0,0,0,63,67,5,58,0,0,64,66,9,0,0,0,65,
		64,1,0,0,0,66,69,1,0,0,0,67,68,1,0,0,0,67,65,1,0,0,0,68,70,1,0,0,0,69,
		67,1,0,0,0,70,71,5,93,0,0,71,72,1,0,0,0,72,73,6,8,0,0,73,18,1,0,0,0,74,
		75,5,47,0,0,75,76,5,42,0,0,76,80,1,0,0,0,77,79,9,0,0,0,78,77,1,0,0,0,79,
		82,1,0,0,0,80,81,1,0,0,0,80,78,1,0,0,0,81,83,1,0,0,0,82,80,1,0,0,0,83,
		84,5,42,0,0,84,85,5,47,0,0,85,86,1,0,0,0,86,87,6,9,0,0,87,20,1,0,0,0,88,
		89,3,33,16,0,89,22,1,0,0,0,90,94,5,34,0,0,91,93,9,0,0,0,92,91,1,0,0,0,
		93,96,1,0,0,0,94,95,1,0,0,0,94,92,1,0,0,0,95,97,1,0,0,0,96,94,1,0,0,0,
		97,107,5,34,0,0,98,102,5,39,0,0,99,101,9,0,0,0,100,99,1,0,0,0,101,104,
		1,0,0,0,102,103,1,0,0,0,102,100,1,0,0,0,103,105,1,0,0,0,104,102,1,0,0,
		0,105,107,5,39,0,0,106,90,1,0,0,0,106,98,1,0,0,0,107,24,1,0,0,0,108,110,
		5,91,0,0,109,111,5,94,0,0,110,109,1,0,0,0,110,111,1,0,0,0,111,114,1,0,
		0,0,112,115,3,33,16,0,113,115,9,0,0,0,114,112,1,0,0,0,114,113,1,0,0,0,
		115,116,1,0,0,0,116,117,1,0,0,0,116,114,1,0,0,0,117,118,1,0,0,0,118,119,
		5,93,0,0,119,26,1,0,0,0,120,121,3,31,15,0,121,28,1,0,0,0,122,123,3,35,
		17,0,123,124,1,0,0,0,124,125,6,14,0,0,125,30,1,0,0,0,126,130,7,0,0,0,127,
		129,7,0,0,0,128,127,1,0,0,0,129,132,1,0,0,0,130,128,1,0,0,0,130,131,1,
		0,0,0,131,32,1,0,0,0,132,130,1,0,0,0,133,134,5,35,0,0,134,135,5,120,0,
		0,135,137,1,0,0,0,136,138,7,1,0,0,137,136,1,0,0,0,138,139,1,0,0,0,139,
		137,1,0,0,0,139,140,1,0,0,0,140,34,1,0,0,0,141,143,7,2,0,0,142,141,1,0,
		0,0,143,144,1,0,0,0,144,142,1,0,0,0,144,145,1,0,0,0,145,36,1,0,0,0,14,
		0,57,61,67,80,94,102,106,110,114,116,130,139,144,1,0,2,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace LanguageServer
