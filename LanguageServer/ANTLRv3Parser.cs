//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ANTLRv3Parser.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LanguageServer {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class ANTLRv3Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DOC_COMMENT=1, PARSER=2, LEXER=3, RULE=4, BLOCK=5, OPTIONAL=6, CLOSURE=7, 
		POSITIVE_CLOSURE=8, SYNPRED=9, RANGE=10, CHAR_RANGE=11, EPSILON=12, ALT=13, 
		EOR=14, EOB=15, EOA=16, ID=17, ARG=18, ARGLIST=19, RET=20, LEXER_GRAMMAR=21, 
		PARSER_GRAMMAR=22, TREE_GRAMMAR=23, COMBINED_GRAMMAR=24, INITACTION=25, 
		LABEL=26, TEMPLATE=27, SCOPE=28, SEMPRED=29, GATED_SEMPRED=30, SYN_SEMPRED=31, 
		BACKTRACK_SEMPRED=32, FRAGMENT=33, TREE_BEGIN=34, ROOT=35, BANG=36, REWRITE=37, 
		ACTION_CONTENT=38, SL_COMMENT=39, ML_COMMENT=40, INT=41, CHAR_LITERAL=42, 
		STRING_LITERAL=43, DOUBLE_QUOTE_STRING_LITERAL=44, DOUBLE_ANGLE_STRING_LITERAL=45, 
		BEGIN_ARGUMENT=46, BEGIN_ACTION=47, OPTIONS=48, TOKENS=49, CATCH=50, FINALLY=51, 
		GRAMMAR=52, PRIVATE=53, PROTECTED=54, PUBLIC=55, RETURNS=56, THROWS=57, 
		TREE=58, AT=59, CLOSE_ELEMENT_OPTION=60, COLON=61, COLONCOLON=62, COMMA=63, 
		DOT=64, EQUAL=65, LBRACE=66, LBRACK=67, LPAREN=68, OPEN_ELEMENT_OPTION=69, 
		OR=70, PLUS=71, QM=72, RBRACE=73, RBRACK=74, RPAREN=75, SEMI=76, SEMPREDOP=77, 
		STAR=78, DOLLAR=79, PEQ=80, NOT=81, WS=82, TOKEN_REF=83, RULE_REF=84, 
		END_ARGUMENT=85, UNTERMINATED_ARGUMENT=86, ARGUMENT_CONTENT=87, END_ACTION=88, 
		UNTERMINATED_ACTION=89, OPT_LBRACE=90, LEXER_CHAR_SET=91, UNTERMINATED_CHAR_SET=92;
	public const int
		RULE_grammarDef = 0, RULE_tokensSpec = 1, RULE_tokenSpec = 2, RULE_attrScope = 3, 
		RULE_action = 4, RULE_actionScopeName = 5, RULE_optionsSpec = 6, RULE_option = 7, 
		RULE_optionValue = 8, RULE_rules = 9, RULE_rule_ = 10, RULE_ruleAction = 11, 
		RULE_throwsSpec = 12, RULE_ruleScopeSpec = 13, RULE_block = 14, RULE_altList = 15, 
		RULE_alternative = 16, RULE_exceptionGroup = 17, RULE_exceptionHandler = 18, 
		RULE_finallyClause = 19, RULE_element = 20, RULE_elementNoOptionSpec = 21, 
		RULE_actionBlock = 22, RULE_argActionBlock = 23, RULE_atom = 24, RULE_notSet = 25, 
		RULE_treeSpec = 26, RULE_ebnf = 27, RULE_range = 28, RULE_terminal_ = 29, 
		RULE_elementOptions = 30, RULE_defaultNodeOption = 31, RULE_elementOption = 32, 
		RULE_elementOptionId = 33, RULE_notTerminal = 34, RULE_ebnfSuffix = 35, 
		RULE_rewrite = 36, RULE_rewrite_alternative = 37, RULE_rewrite_tree_block = 38, 
		RULE_rewrite_tree_alternative = 39, RULE_rewrite_tree_element = 40, RULE_rewrite_tree_atom = 41, 
		RULE_rewrite_tree_ebnf = 42, RULE_rewrite_tree = 43, RULE_rewrite_template = 44, 
		RULE_rewrite_template_ref = 45, RULE_rewrite_indirect_template_head = 46, 
		RULE_rewrite_template_args = 47, RULE_rewrite_template_arg = 48, RULE_id = 49;
	public static readonly string[] ruleNames = {
		"grammarDef", "tokensSpec", "tokenSpec", "attrScope", "action", "actionScopeName", 
		"optionsSpec", "option", "optionValue", "rules", "rule_", "ruleAction", 
		"throwsSpec", "ruleScopeSpec", "block", "altList", "alternative", "exceptionGroup", 
		"exceptionHandler", "finallyClause", "element", "elementNoOptionSpec", 
		"actionBlock", "argActionBlock", "atom", "notSet", "treeSpec", "ebnf", 
		"range", "terminal_", "elementOptions", "defaultNodeOption", "elementOption", 
		"elementOptionId", "notTerminal", "ebnfSuffix", "rewrite", "rewrite_alternative", 
		"rewrite_tree_block", "rewrite_tree_alternative", "rewrite_tree_element", 
		"rewrite_tree_atom", "rewrite_tree_ebnf", "rewrite_tree", "rewrite_template", 
		"rewrite_template_ref", "rewrite_indirect_template_head", "rewrite_template_args", 
		"rewrite_template_arg", "id"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'parser'", "'lexer'", null, null, null, null, null, null, 
		"'..'", null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "'scope'", null, null, null, null, 
		"'fragment'", "'^('", "'^'", "'!'", null, null, null, null, null, null, 
		null, null, null, null, null, "'options'", "'tokens'", "'catch'", "'finally'", 
		"'grammar'", "'private'", "'protected'", "'public'", "'returns'", "'throws'", 
		"'tree'", null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "'=>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DOC_COMMENT", "PARSER", "LEXER", "RULE", "BLOCK", "OPTIONAL", "CLOSURE", 
		"POSITIVE_CLOSURE", "SYNPRED", "RANGE", "CHAR_RANGE", "EPSILON", "ALT", 
		"EOR", "EOB", "EOA", "ID", "ARG", "ARGLIST", "RET", "LEXER_GRAMMAR", "PARSER_GRAMMAR", 
		"TREE_GRAMMAR", "COMBINED_GRAMMAR", "INITACTION", "LABEL", "TEMPLATE", 
		"SCOPE", "SEMPRED", "GATED_SEMPRED", "SYN_SEMPRED", "BACKTRACK_SEMPRED", 
		"FRAGMENT", "TREE_BEGIN", "ROOT", "BANG", "REWRITE", "ACTION_CONTENT", 
		"SL_COMMENT", "ML_COMMENT", "INT", "CHAR_LITERAL", "STRING_LITERAL", "DOUBLE_QUOTE_STRING_LITERAL", 
		"DOUBLE_ANGLE_STRING_LITERAL", "BEGIN_ARGUMENT", "BEGIN_ACTION", "OPTIONS", 
		"TOKENS", "CATCH", "FINALLY", "GRAMMAR", "PRIVATE", "PROTECTED", "PUBLIC", 
		"RETURNS", "THROWS", "TREE", "AT", "CLOSE_ELEMENT_OPTION", "COLON", "COLONCOLON", 
		"COMMA", "DOT", "EQUAL", "LBRACE", "LBRACK", "LPAREN", "OPEN_ELEMENT_OPTION", 
		"OR", "PLUS", "QM", "RBRACE", "RBRACK", "RPAREN", "SEMI", "SEMPREDOP", 
		"STAR", "DOLLAR", "PEQ", "NOT", "WS", "TOKEN_REF", "RULE_REF", "END_ARGUMENT", 
		"UNTERMINATED_ARGUMENT", "ARGUMENT_CONTENT", "END_ACTION", "UNTERMINATED_ACTION", 
		"OPT_LBRACE", "LEXER_CHAR_SET", "UNTERMINATED_CHAR_SET"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ANTLRv3Parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ANTLRv3Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ANTLRv3Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ANTLRv3Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class GrammarDefContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRAMMAR() { return GetToken(ANTLRv3Parser.GRAMMAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ANTLRv3Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RulesContext rules() {
			return GetRuleContext<RulesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ANTLRv3Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEXER() { return GetToken(ANTLRv3Parser.LEXER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(ANTLRv3Parser.PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TREE() { return GetToken(ANTLRv3Parser.TREE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT() { return GetToken(ANTLRv3Parser.DOC_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TokensSpecContext tokensSpec() {
			return GetRuleContext<TokensSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrScopeContext[] attrScope() {
			return GetRuleContexts<AttrScopeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrScopeContext attrScope(int i) {
			return GetRuleContext<AttrScopeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext[] action() {
			return GetRuleContexts<ActionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action(int i) {
			return GetRuleContext<ActionContext>(i);
		}
		public GrammarDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammarDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterGrammarDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitGrammarDef(this);
		}
	}

	[RuleVersion(0)]
	public GrammarDefContext grammarDef() {
		GrammarDefContext _localctx = new GrammarDefContext(Context, State);
		EnterRule(_localctx, 0, RULE_grammarDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOC_COMMENT) {
				{
				State = 100;
				Match(DOC_COMMENT);
				}
			}

			State = 107;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEXER:
				{
				State = 103;
				Match(LEXER);
				}
				break;
			case PARSER:
				{
				State = 104;
				Match(PARSER);
				}
				break;
			case TREE:
				{
				State = 105;
				Match(TREE);
				}
				break;
			case GRAMMAR:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 109;
			Match(GRAMMAR);
			State = 110;
			id();
			State = 111;
			Match(SEMI);
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 112;
				optionsSpec();
				}
			}

			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOKENS) {
				{
				State = 115;
				tokensSpec();
				}
			}

			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCOPE) {
				{
				{
				State = 118;
				attrScope();
				}
				}
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 124;
				action();
				}
				}
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 130;
			rules();
			State = 131;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TokensSpecContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKENS() { return GetToken(ANTLRv3Parser.TOKENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(ANTLRv3Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(ANTLRv3Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TokenSpecContext[] tokenSpec() {
			return GetRuleContexts<TokenSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TokenSpecContext tokenSpec(int i) {
			return GetRuleContext<TokenSpecContext>(i);
		}
		public TokensSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tokensSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterTokensSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitTokensSpec(this);
		}
	}

	[RuleVersion(0)]
	public TokensSpecContext tokensSpec() {
		TokensSpecContext _localctx = new TokensSpecContext(Context, State);
		EnterRule(_localctx, 2, RULE_tokensSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			Match(TOKENS);
			State = 134;
			Match(LBRACE);
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 135;
				tokenSpec();
				}
				}
				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==TOKEN_REF );
			State = 140;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TokenSpecContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv3Parser.TOKEN_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ANTLRv3Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(ANTLRv3Parser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv3Parser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL() { return GetToken(ANTLRv3Parser.CHAR_LITERAL, 0); }
		public TokenSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tokenSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterTokenSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitTokenSpec(this);
		}
	}

	[RuleVersion(0)]
	public TokenSpecContext tokenSpec() {
		TokenSpecContext _localctx = new TokenSpecContext(Context, State);
		EnterRule(_localctx, 4, RULE_tokenSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			Match(TOKEN_REF);
			State = 146;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQUAL:
				{
				State = 143;
				Match(EQUAL);
				State = 144;
				_la = TokenStream.LA(1);
				if ( !(_la==CHAR_LITERAL || _la==STRING_LITERAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case SEMI:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 148;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrScopeContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE() { return GetToken(ANTLRv3Parser.SCOPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public AttrScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrScope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterAttrScope(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitAttrScope(this);
		}
	}

	[RuleVersion(0)]
	public AttrScopeContext attrScope() {
		AttrScopeContext _localctx = new AttrScopeContext(Context, State);
		EnterRule(_localctx, 6, RULE_attrScope);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			Match(SCOPE);
			State = 151;
			id();
			State = 152;
			actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(ANTLRv3Parser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionScopeNameContext actionScopeName() {
			return GetRuleContext<ActionScopeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLONCOLON() { return GetToken(ANTLRv3Parser.COLONCOLON, 0); }
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 8, RULE_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			Match(AT);
			State = 158;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 155;
				actionScopeName();
				State = 156;
				Match(COLONCOLON);
				}
				break;
			}
			State = 160;
			id();
			State = 161;
			actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionScopeNameContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEXER() { return GetToken(ANTLRv3Parser.LEXER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(ANTLRv3Parser.PARSER, 0); }
		public ActionScopeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionScopeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterActionScopeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitActionScopeName(this);
		}
	}

	[RuleVersion(0)]
	public ActionScopeNameContext actionScopeName() {
		ActionScopeNameContext _localctx = new ActionScopeNameContext(Context, State);
		EnterRule(_localctx, 10, RULE_actionScopeName);
		try {
			State = 166;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 163;
				id();
				}
				break;
			case LEXER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 164;
				Match(LEXER);
				}
				break;
			case PARSER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 165;
				Match(PARSER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionsSpecContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(ANTLRv3Parser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(ANTLRv3Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(ANTLRv3Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public OptionsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionsSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterOptionsSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitOptionsSpec(this);
		}
	}

	[RuleVersion(0)]
	public OptionsSpecContext optionsSpec() {
		OptionsSpecContext _localctx = new OptionsSpecContext(Context, State);
		EnterRule(_localctx, 12, RULE_optionsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			Match(OPTIONS);
			State = 169;
			Match(LBRACE);
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOKEN_REF || _la==RULE_REF) {
				{
				{
				State = 170;
				option();
				}
				}
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 176;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(ANTLRv3Parser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueContext optionValue() {
			return GetRuleContext<OptionValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ANTLRv3Parser.SEMI, 0); }
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitOption(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(Context, State);
		EnterRule(_localctx, 14, RULE_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			id();
			State = 179;
			Match(EQUAL);
			State = 180;
			optionValue();
			State = 181;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionValueContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv3Parser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL() { return GetToken(ANTLRv3Parser.CHAR_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(ANTLRv3Parser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(ANTLRv3Parser.STAR, 0); }
		public OptionValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterOptionValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitOptionValue(this);
		}
	}

	[RuleVersion(0)]
	public OptionValueContext optionValue() {
		OptionValueContext _localctx = new OptionValueContext(Context, State);
		EnterRule(_localctx, 16, RULE_optionValue);
		try {
			State = 188;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 183;
				id();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 184;
				Match(STRING_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 185;
				Match(CHAR_LITERAL);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 186;
				Match(INT);
				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 5);
				{
				State = 187;
				Match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Rule_Context[] rule_() {
			return GetRuleContexts<Rule_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rule_Context rule_(int i) {
			return GetRuleContext<Rule_Context>(i);
		}
		public RulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rules; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterRules(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitRules(this);
		}
	}

	[RuleVersion(0)]
	public RulesContext rules() {
		RulesContext _localctx = new RulesContext(Context, State);
		EnterRule(_localctx, 18, RULE_rules);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 190;
				rule_();
				}
				}
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOC_COMMENT) | (1L << FRAGMENT) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || _la==TOKEN_REF || _la==RULE_REF );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_Context : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ANTLRv3Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AltListContext altList() {
			return GetRuleContext<AltListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ANTLRv3Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT() { return GetToken(ANTLRv3Parser.DOC_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(ANTLRv3Parser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgActionBlockContext[] argActionBlock() {
			return GetRuleContexts<ArgActionBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgActionBlockContext argActionBlock(int i) {
			return GetRuleContext<ArgActionBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(ANTLRv3Parser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ThrowsSpecContext throwsSpec() {
			return GetRuleContext<ThrowsSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleScopeSpecContext ruleScopeSpec() {
			return GetRuleContext<RuleScopeSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleActionContext[] ruleAction() {
			return GetRuleContexts<RuleActionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleActionContext ruleAction(int i) {
			return GetRuleContext<RuleActionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionGroupContext exceptionGroup() {
			return GetRuleContext<ExceptionGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(ANTLRv3Parser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(ANTLRv3Parser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(ANTLRv3Parser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FRAGMENT() { return GetToken(ANTLRv3Parser.FRAGMENT, 0); }
		public Rule_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterRule_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitRule_(this);
		}
	}

	[RuleVersion(0)]
	public Rule_Context rule_() {
		Rule_Context _localctx = new Rule_Context(Context, State);
		EnterRule(_localctx, 20, RULE_rule_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOC_COMMENT) {
				{
				State = 195;
				Match(DOC_COMMENT);
				}
			}

			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAGMENT) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0)) {
				{
				State = 198;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAGMENT) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 201;
			id();
			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BANG) {
				{
				State = 202;
				Match(BANG);
				}
			}

			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BEGIN_ARGUMENT) {
				{
				State = 205;
				argActionBlock();
				}
			}

			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNS) {
				{
				State = 208;
				Match(RETURNS);
				State = 209;
				argActionBlock();
				}
			}

			State = 213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THROWS) {
				{
				State = 212;
				throwsSpec();
				}
			}

			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 215;
				optionsSpec();
				}
			}

			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SCOPE) {
				{
				State = 218;
				ruleScopeSpec();
				}
			}

			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 221;
				ruleAction();
				}
				}
				State = 226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 227;
			Match(COLON);
			State = 228;
			altList();
			State = 229;
			Match(SEMI);
			State = 231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CATCH || _la==FINALLY) {
				{
				State = 230;
				exceptionGroup();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleActionContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(ANTLRv3Parser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public RuleActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterRuleAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitRuleAction(this);
		}
	}

	[RuleVersion(0)]
	public RuleActionContext ruleAction() {
		RuleActionContext _localctx = new RuleActionContext(Context, State);
		EnterRule(_localctx, 22, RULE_ruleAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			Match(AT);
			State = 234;
			id();
			State = 235;
			actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowsSpecContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROWS() { return GetToken(ANTLRv3Parser.THROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ANTLRv3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ANTLRv3Parser.COMMA, i);
		}
		public ThrowsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwsSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterThrowsSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitThrowsSpec(this);
		}
	}

	[RuleVersion(0)]
	public ThrowsSpecContext throwsSpec() {
		ThrowsSpecContext _localctx = new ThrowsSpecContext(Context, State);
		EnterRule(_localctx, 24, RULE_throwsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			Match(THROWS);
			State = 238;
			id();
			State = 243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 239;
				Match(COMMA);
				State = 240;
				id();
				}
				}
				State = 245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleScopeSpecContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCOPE() { return GetTokens(ANTLRv3Parser.SCOPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE(int i) {
			return GetToken(ANTLRv3Parser.SCOPE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ANTLRv3Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ANTLRv3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ANTLRv3Parser.COMMA, i);
		}
		public RuleScopeSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleScopeSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterRuleScopeSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitRuleScopeSpec(this);
		}
	}

	[RuleVersion(0)]
	public RuleScopeSpecContext ruleScopeSpec() {
		RuleScopeSpecContext _localctx = new RuleScopeSpecContext(Context, State);
		EnterRule(_localctx, 26, RULE_ruleScopeSpec);
		int _la;
		try {
			State = 272;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 246;
				Match(SCOPE);
				State = 247;
				actionBlock();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 248;
				Match(SCOPE);
				State = 249;
				id();
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 250;
					Match(COMMA);
					State = 251;
					id();
					}
					}
					State = 256;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 257;
				Match(SEMI);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 259;
				Match(SCOPE);
				State = 260;
				actionBlock();
				State = 261;
				Match(SCOPE);
				State = 262;
				id();
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 263;
					Match(COMMA);
					State = 264;
					id();
					}
					}
					State = 269;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 270;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ANTLRv3Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AlternativeContext[] alternative() {
			return GetRuleContexts<AlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlternativeContext alternative(int i) {
			return GetRuleContext<AlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RewriteContext[] rewrite() {
			return GetRuleContexts<RewriteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RewriteContext rewrite(int i) {
			return GetRuleContext<RewriteContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ANTLRv3Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ANTLRv3Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(ANTLRv3Parser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(ANTLRv3Parser.OR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 28, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			Match(LPAREN);
			State = 279;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS || _la==COLON) {
				{
				State = 276;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONS) {
					{
					State = 275;
					optionsSpec();
					}
				}

				State = 278;
				Match(COLON);
				}
			}

			State = 281;
			alternative();
			State = 282;
			rewrite();
			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 283;
				Match(OR);
				State = 284;
				alternative();
				State = 285;
				rewrite();
				}
				}
				State = 291;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 292;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltListContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public AlternativeContext[] alternative() {
			return GetRuleContexts<AlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlternativeContext alternative(int i) {
			return GetRuleContext<AlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RewriteContext[] rewrite() {
			return GetRuleContexts<RewriteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RewriteContext rewrite(int i) {
			return GetRuleContext<RewriteContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(ANTLRv3Parser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(ANTLRv3Parser.OR, i);
		}
		public AltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterAltList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitAltList(this);
		}
	}

	[RuleVersion(0)]
	public AltListContext altList() {
		AltListContext _localctx = new AltListContext(Context, State);
		EnterRule(_localctx, 30, RULE_altList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			alternative();
			State = 295;
			rewrite();
			State = 302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 296;
				Match(OR);
				State = 297;
				alternative();
				State = 298;
				rewrite();
				}
				}
				State = 304;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlternativeContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public AlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterAlternative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitAlternative(this);
		}
	}

	[RuleVersion(0)]
	public AlternativeContext alternative() {
		AlternativeContext _localctx = new AlternativeContext(Context, State);
		EnterRule(_localctx, 32, RULE_alternative);
		int _la;
		try {
			State = 311;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TREE_BEGIN:
			case CHAR_LITERAL:
			case STRING_LITERAL:
			case BEGIN_ACTION:
			case DOT:
			case LPAREN:
			case NOT:
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 306;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 305;
					element();
					}
					}
					State = 308;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (TREE_BEGIN - 34)) | (1L << (CHAR_LITERAL - 34)) | (1L << (STRING_LITERAL - 34)) | (1L << (BEGIN_ACTION - 34)) | (1L << (DOT - 34)) | (1L << (LPAREN - 34)) | (1L << (NOT - 34)) | (1L << (TOKEN_REF - 34)) | (1L << (RULE_REF - 34)))) != 0) );
				}
				break;
			case REWRITE:
			case OR:
			case RPAREN:
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionGroupContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionHandlerContext[] exceptionHandler() {
			return GetRuleContexts<ExceptionHandlerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionHandlerContext exceptionHandler(int i) {
			return GetRuleContext<ExceptionHandlerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinallyClauseContext finallyClause() {
			return GetRuleContext<FinallyClauseContext>(0);
		}
		public ExceptionGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterExceptionGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitExceptionGroup(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionGroupContext exceptionGroup() {
		ExceptionGroupContext _localctx = new ExceptionGroupContext(Context, State);
		EnterRule(_localctx, 34, RULE_exceptionGroup);
		int _la;
		try {
			State = 322;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CATCH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 313;
					exceptionHandler();
					}
					}
					State = 316;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==CATCH );
				State = 319;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FINALLY) {
					{
					State = 318;
					finallyClause();
					}
				}

				}
				break;
			case FINALLY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 321;
				finallyClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionHandlerContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(ANTLRv3Parser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public ExceptionHandlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionHandler; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterExceptionHandler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitExceptionHandler(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionHandlerContext exceptionHandler() {
		ExceptionHandlerContext _localctx = new ExceptionHandlerContext(Context, State);
		EnterRule(_localctx, 36, RULE_exceptionHandler);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			Match(CATCH);
			State = 325;
			argActionBlock();
			State = 326;
			actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyClauseContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINALLY() { return GetToken(ANTLRv3Parser.FINALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public FinallyClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterFinallyClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitFinallyClause(this);
		}
	}

	[RuleVersion(0)]
	public FinallyClauseContext finallyClause() {
		FinallyClauseContext _localctx = new FinallyClauseContext(Context, State);
		EnterRule(_localctx, 38, RULE_finallyClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			Match(FINALLY);
			State = 329;
			actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ElementNoOptionSpecContext elementNoOptionSpec() {
			return GetRuleContext<ElementNoOptionSpecContext>(0);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 40, RULE_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			elementNoOptionSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementNoOptionSpecContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(ANTLRv3Parser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PEQ() { return GetToken(ANTLRv3Parser.PEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EbnfContext ebnf() {
			return GetRuleContext<EbnfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM() { return GetToken(ANTLRv3Parser.QM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMPREDOP() { return GetToken(ANTLRv3Parser.SEMPREDOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TreeSpecContext treeSpec() {
			return GetRuleContext<TreeSpecContext>(0);
		}
		public ElementNoOptionSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementNoOptionSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterElementNoOptionSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitElementNoOptionSpec(this);
		}
	}

	[RuleVersion(0)]
	public ElementNoOptionSpecContext elementNoOptionSpec() {
		ElementNoOptionSpecContext _localctx = new ElementNoOptionSpecContext(Context, State);
		EnterRule(_localctx, 42, RULE_elementNoOptionSpec);
		int _la;
		try {
			State = 365;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 333;
				id();
				State = 334;
				_la = TokenStream.LA(1);
				if ( !(_la==EQUAL || _la==PEQ) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 335;
				atom();
				State = 338;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PLUS:
				case QM:
				case STAR:
					{
					State = 336;
					ebnfSuffix();
					}
					break;
				case TREE_BEGIN:
				case REWRITE:
				case CHAR_LITERAL:
				case STRING_LITERAL:
				case BEGIN_ACTION:
				case DOT:
				case LPAREN:
				case OR:
				case RPAREN:
				case SEMI:
				case NOT:
				case TOKEN_REF:
				case RULE_REF:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 340;
				id();
				State = 341;
				_la = TokenStream.LA(1);
				if ( !(_la==EQUAL || _la==PEQ) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 342;
				block();
				State = 345;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PLUS:
				case QM:
				case STAR:
					{
					State = 343;
					ebnfSuffix();
					}
					break;
				case TREE_BEGIN:
				case REWRITE:
				case CHAR_LITERAL:
				case STRING_LITERAL:
				case BEGIN_ACTION:
				case DOT:
				case LPAREN:
				case OR:
				case RPAREN:
				case SEMI:
				case NOT:
				case TOKEN_REF:
				case RULE_REF:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 347;
				atom();
				State = 350;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PLUS:
				case QM:
				case STAR:
					{
					State = 348;
					ebnfSuffix();
					}
					break;
				case TREE_BEGIN:
				case REWRITE:
				case CHAR_LITERAL:
				case STRING_LITERAL:
				case BEGIN_ACTION:
				case DOT:
				case LPAREN:
				case OR:
				case RPAREN:
				case SEMI:
				case NOT:
				case TOKEN_REF:
				case RULE_REF:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 352;
				ebnf();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 353;
				actionBlock();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 354;
				actionBlock();
				State = 355;
				Match(QM);
				State = 358;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SEMPREDOP:
					{
					State = 356;
					Match(SEMPREDOP);
					}
					break;
				case TREE_BEGIN:
				case REWRITE:
				case CHAR_LITERAL:
				case STRING_LITERAL:
				case BEGIN_ACTION:
				case DOT:
				case LPAREN:
				case OR:
				case RPAREN:
				case SEMI:
				case NOT:
				case TOKEN_REF:
				case RULE_REF:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 360;
				treeSpec();
				State = 363;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PLUS:
				case QM:
				case STAR:
					{
					State = 361;
					ebnfSuffix();
					}
					break;
				case TREE_BEGIN:
				case REWRITE:
				case CHAR_LITERAL:
				case STRING_LITERAL:
				case BEGIN_ACTION:
				case DOT:
				case LPAREN:
				case OR:
				case RPAREN:
				case SEMI:
				case NOT:
				case TOKEN_REF:
				case RULE_REF:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionBlockContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_ACTION() { return GetToken(ANTLRv3Parser.BEGIN_ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_ACTION() { return GetToken(ANTLRv3Parser.END_ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ACTION_CONTENT() { return GetTokens(ANTLRv3Parser.ACTION_CONTENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION_CONTENT(int i) {
			return GetToken(ANTLRv3Parser.ACTION_CONTENT, i);
		}
		public ActionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterActionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitActionBlock(this);
		}
	}

	[RuleVersion(0)]
	public ActionBlockContext actionBlock() {
		ActionBlockContext _localctx = new ActionBlockContext(Context, State);
		EnterRule(_localctx, 44, RULE_actionBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			Match(BEGIN_ACTION);
			State = 371;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ACTION_CONTENT) {
				{
				{
				State = 368;
				Match(ACTION_CONTENT);
				}
				}
				State = 373;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 374;
			Match(END_ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgActionBlockContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_ARGUMENT() { return GetToken(ANTLRv3Parser.BEGIN_ARGUMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_ARGUMENT() { return GetToken(ANTLRv3Parser.END_ARGUMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ARGUMENT_CONTENT() { return GetTokens(ANTLRv3Parser.ARGUMENT_CONTENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARGUMENT_CONTENT(int i) {
			return GetToken(ANTLRv3Parser.ARGUMENT_CONTENT, i);
		}
		public ArgActionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argActionBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterArgActionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitArgActionBlock(this);
		}
	}

	[RuleVersion(0)]
	public ArgActionBlockContext argActionBlock() {
		ArgActionBlockContext _localctx = new ArgActionBlockContext(Context, State);
		EnterRule(_localctx, 46, RULE_argActionBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			Match(BEGIN_ARGUMENT);
			State = 380;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ARGUMENT_CONTENT) {
				{
				{
				State = 377;
				Match(ARGUMENT_CONTENT);
				}
				}
				State = 382;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 383;
			Match(END_ARGUMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROOT() { return GetToken(ANTLRv3Parser.ROOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(ANTLRv3Parser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Terminal_Context terminal_() {
			return GetRuleContext<Terminal_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotSetContext notSet() {
			return GetRuleContext<NotSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE_REF() { return GetToken(ANTLRv3Parser.RULE_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 48, RULE_atom);
		int _la;
		try {
			State = 405;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 385;
				range();
				State = 389;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ROOT:
					{
					State = 386;
					Match(ROOT);
					}
					break;
				case BANG:
					{
					State = 387;
					Match(BANG);
					}
					break;
				case TREE_BEGIN:
				case REWRITE:
				case CHAR_LITERAL:
				case STRING_LITERAL:
				case BEGIN_ACTION:
				case DOT:
				case LPAREN:
				case OR:
				case PLUS:
				case QM:
				case RPAREN:
				case SEMI:
				case STAR:
				case NOT:
				case TOKEN_REF:
				case RULE_REF:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 391;
				terminal_();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 392;
				notSet();
				State = 396;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ROOT:
					{
					State = 393;
					Match(ROOT);
					}
					break;
				case BANG:
					{
					State = 394;
					Match(BANG);
					}
					break;
				case TREE_BEGIN:
				case REWRITE:
				case CHAR_LITERAL:
				case STRING_LITERAL:
				case BEGIN_ACTION:
				case DOT:
				case LPAREN:
				case OR:
				case PLUS:
				case QM:
				case RPAREN:
				case SEMI:
				case STAR:
				case NOT:
				case TOKEN_REF:
				case RULE_REF:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 398;
				Match(RULE_REF);
				State = 400;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BEGIN_ARGUMENT) {
					{
					State = 399;
					argActionBlock();
					}
				}

				State = 403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ROOT || _la==BANG) {
					{
					State = 402;
					_la = TokenStream.LA(1);
					if ( !(_la==ROOT || _la==BANG) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotSetContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(ANTLRv3Parser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NotTerminalContext notTerminal() {
			return GetRuleContext<NotTerminalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public NotSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterNotSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitNotSet(this);
		}
	}

	[RuleVersion(0)]
	public NotSetContext notSet() {
		NotSetContext _localctx = new NotSetContext(Context, State);
		EnterRule(_localctx, 50, RULE_notSet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407;
			Match(NOT);
			State = 410;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR_LITERAL:
			case STRING_LITERAL:
			case TOKEN_REF:
				{
				State = 408;
				notTerminal();
				}
				break;
			case LPAREN:
				{
				State = 409;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TreeSpecContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TREE_BEGIN() { return GetToken(ANTLRv3Parser.TREE_BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ANTLRv3Parser.RPAREN, 0); }
		public TreeSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_treeSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterTreeSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitTreeSpec(this);
		}
	}

	[RuleVersion(0)]
	public TreeSpecContext treeSpec() {
		TreeSpecContext _localctx = new TreeSpecContext(Context, State);
		EnterRule(_localctx, 52, RULE_treeSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			Match(TREE_BEGIN);
			State = 413;
			element();
			State = 415;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 414;
				element();
				}
				}
				State = 417;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (TREE_BEGIN - 34)) | (1L << (CHAR_LITERAL - 34)) | (1L << (STRING_LITERAL - 34)) | (1L << (BEGIN_ACTION - 34)) | (1L << (DOT - 34)) | (1L << (LPAREN - 34)) | (1L << (NOT - 34)) | (1L << (TOKEN_REF - 34)) | (1L << (RULE_REF - 34)))) != 0) );
			State = 419;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EbnfContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM() { return GetToken(ANTLRv3Parser.QM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(ANTLRv3Parser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ANTLRv3Parser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMPREDOP() { return GetToken(ANTLRv3Parser.SEMPREDOP, 0); }
		public EbnfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ebnf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterEbnf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitEbnf(this);
		}
	}

	[RuleVersion(0)]
	public EbnfContext ebnf() {
		EbnfContext _localctx = new EbnfContext(Context, State);
		EnterRule(_localctx, 54, RULE_ebnf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 421;
			block();
			State = 427;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QM:
				{
				State = 422;
				Match(QM);
				}
				break;
			case STAR:
				{
				State = 423;
				Match(STAR);
				}
				break;
			case PLUS:
				{
				State = 424;
				Match(PLUS);
				}
				break;
			case SEMPREDOP:
				{
				State = 425;
				Match(SEMPREDOP);
				}
				break;
			case TREE_BEGIN:
			case REWRITE:
			case CHAR_LITERAL:
			case STRING_LITERAL:
			case BEGIN_ACTION:
			case DOT:
			case LPAREN:
			case OR:
			case RPAREN:
			case SEMI:
			case NOT:
			case TOKEN_REF:
			case RULE_REF:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CHAR_LITERAL() { return GetTokens(ANTLRv3Parser.CHAR_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL(int i) {
			return GetToken(ANTLRv3Parser.CHAR_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(ANTLRv3Parser.RANGE, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 56, RULE_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429;
			Match(CHAR_LITERAL);
			State = 430;
			Match(RANGE);
			State = 431;
			Match(CHAR_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Terminal_Context : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL() { return GetToken(ANTLRv3Parser.CHAR_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv3Parser.TOKEN_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv3Parser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ANTLRv3Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROOT() { return GetToken(ANTLRv3Parser.ROOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(ANTLRv3Parser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public Terminal_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminal_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterTerminal_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitTerminal_(this);
		}
	}

	[RuleVersion(0)]
	public Terminal_Context terminal_() {
		Terminal_Context _localctx = new Terminal_Context(Context, State);
		EnterRule(_localctx, 58, RULE_terminal_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR_LITERAL:
				{
				State = 433;
				Match(CHAR_LITERAL);
				State = 435;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_ELEMENT_OPTION) {
					{
					State = 434;
					elementOptions();
					}
				}

				}
				break;
			case TOKEN_REF:
				{
				State = 437;
				Match(TOKEN_REF);
				State = 439;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_ELEMENT_OPTION) {
					{
					State = 438;
					elementOptions();
					}
				}

				State = 443;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BEGIN_ARGUMENT:
					{
					State = 441;
					argActionBlock();
					}
					break;
				case TREE_BEGIN:
				case ROOT:
				case BANG:
				case REWRITE:
				case CHAR_LITERAL:
				case STRING_LITERAL:
				case BEGIN_ACTION:
				case DOT:
				case LPAREN:
				case OR:
				case PLUS:
				case QM:
				case RPAREN:
				case SEMI:
				case STAR:
				case NOT:
				case TOKEN_REF:
				case RULE_REF:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case STRING_LITERAL:
				{
				State = 445;
				Match(STRING_LITERAL);
				State = 447;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_ELEMENT_OPTION) {
					{
					State = 446;
					elementOptions();
					}
				}

				}
				break;
			case DOT:
				{
				State = 449;
				Match(DOT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 453;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ROOT || _la==BANG) {
				{
				State = 452;
				_la = TokenStream.LA(1);
				if ( !(_la==ROOT || _la==BANG) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementOptionsContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_ELEMENT_OPTION() { return GetToken(ANTLRv3Parser.OPEN_ELEMENT_OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefaultNodeOptionContext defaultNodeOption() {
			return GetRuleContext<DefaultNodeOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_ELEMENT_OPTION() { return GetToken(ANTLRv3Parser.CLOSE_ELEMENT_OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementOptionContext[] elementOption() {
			return GetRuleContexts<ElementOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementOptionContext elementOption(int i) {
			return GetRuleContext<ElementOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(ANTLRv3Parser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(ANTLRv3Parser.SEMI, i);
		}
		public ElementOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterElementOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitElementOptions(this);
		}
	}

	[RuleVersion(0)]
	public ElementOptionsContext elementOptions() {
		ElementOptionsContext _localctx = new ElementOptionsContext(Context, State);
		EnterRule(_localctx, 60, RULE_elementOptions);
		int _la;
		try {
			State = 470;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 455;
				Match(OPEN_ELEMENT_OPTION);
				State = 456;
				defaultNodeOption();
				State = 457;
				Match(CLOSE_ELEMENT_OPTION);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 459;
				Match(OPEN_ELEMENT_OPTION);
				State = 460;
				elementOption();
				State = 465;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEMI) {
					{
					{
					State = 461;
					Match(SEMI);
					State = 462;
					elementOption();
					}
					}
					State = 467;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 468;
				Match(CLOSE_ELEMENT_OPTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultNodeOptionContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ElementOptionIdContext elementOptionId() {
			return GetRuleContext<ElementOptionIdContext>(0);
		}
		public DefaultNodeOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultNodeOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterDefaultNodeOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitDefaultNodeOption(this);
		}
	}

	[RuleVersion(0)]
	public DefaultNodeOptionContext defaultNodeOption() {
		DefaultNodeOptionContext _localctx = new DefaultNodeOptionContext(Context, State);
		EnterRule(_localctx, 62, RULE_defaultNodeOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472;
			elementOptionId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementOptionContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(ANTLRv3Parser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementOptionIdContext elementOptionId() {
			return GetRuleContext<ElementOptionIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv3Parser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_QUOTE_STRING_LITERAL() { return GetToken(ANTLRv3Parser.DOUBLE_QUOTE_STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_ANGLE_STRING_LITERAL() { return GetToken(ANTLRv3Parser.DOUBLE_ANGLE_STRING_LITERAL, 0); }
		public ElementOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterElementOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitElementOption(this);
		}
	}

	[RuleVersion(0)]
	public ElementOptionContext elementOption() {
		ElementOptionContext _localctx = new ElementOptionContext(Context, State);
		EnterRule(_localctx, 64, RULE_elementOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 474;
			id();
			State = 475;
			Match(EQUAL);
			State = 480;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
			case RULE_REF:
				{
				State = 476;
				elementOptionId();
				}
				break;
			case STRING_LITERAL:
				{
				State = 477;
				Match(STRING_LITERAL);
				}
				break;
			case DOUBLE_QUOTE_STRING_LITERAL:
				{
				State = 478;
				Match(DOUBLE_QUOTE_STRING_LITERAL);
				}
				break;
			case DOUBLE_ANGLE_STRING_LITERAL:
				{
				State = 479;
				Match(DOUBLE_ANGLE_STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementOptionIdContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(ANTLRv3Parser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(ANTLRv3Parser.DOT, i);
		}
		public ElementOptionIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementOptionId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterElementOptionId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitElementOptionId(this);
		}
	}

	[RuleVersion(0)]
	public ElementOptionIdContext elementOptionId() {
		ElementOptionIdContext _localctx = new ElementOptionIdContext(Context, State);
		EnterRule(_localctx, 66, RULE_elementOptionId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482;
			id();
			State = 487;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 483;
				Match(DOT);
				State = 484;
				id();
				}
				}
				State = 489;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotTerminalContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL() { return GetToken(ANTLRv3Parser.CHAR_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv3Parser.TOKEN_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv3Parser.STRING_LITERAL, 0); }
		public NotTerminalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notTerminal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterNotTerminal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitNotTerminal(this);
		}
	}

	[RuleVersion(0)]
	public NotTerminalContext notTerminal() {
		NotTerminalContext _localctx = new NotTerminalContext(Context, State);
		EnterRule(_localctx, 68, RULE_notTerminal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 490;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 42)) & ~0x3f) == 0 && ((1L << (_la - 42)) & ((1L << (CHAR_LITERAL - 42)) | (1L << (STRING_LITERAL - 42)) | (1L << (TOKEN_REF - 42)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EbnfSuffixContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM() { return GetToken(ANTLRv3Parser.QM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(ANTLRv3Parser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ANTLRv3Parser.PLUS, 0); }
		public EbnfSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ebnfSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterEbnfSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitEbnfSuffix(this);
		}
	}

	[RuleVersion(0)]
	public EbnfSuffixContext ebnfSuffix() {
		EbnfSuffixContext _localctx = new EbnfSuffixContext(Context, State);
		EnterRule(_localctx, 70, RULE_ebnfSuffix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 492;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (PLUS - 71)) | (1L << (QM - 71)) | (1L << (STAR - 71)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RewriteContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REWRITE() { return GetTokens(ANTLRv3Parser.REWRITE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REWRITE(int i) {
			return GetToken(ANTLRv3Parser.REWRITE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_alternativeContext[] rewrite_alternative() {
			return GetRuleContexts<Rewrite_alternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_alternativeContext rewrite_alternative(int i) {
			return GetRuleContext<Rewrite_alternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext[] actionBlock() {
			return GetRuleContexts<ActionBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock(int i) {
			return GetRuleContext<ActionBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QM() { return GetTokens(ANTLRv3Parser.QM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM(int i) {
			return GetToken(ANTLRv3Parser.QM, i);
		}
		public RewriteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rewrite; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterRewrite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitRewrite(this);
		}
	}

	[RuleVersion(0)]
	public RewriteContext rewrite() {
		RewriteContext _localctx = new RewriteContext(Context, State);
		EnterRule(_localctx, 72, RULE_rewrite);
		try {
			int _alt;
			State = 507;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REWRITE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 501;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 494;
						Match(REWRITE);
						State = 495;
						actionBlock();
						State = 496;
						Match(QM);
						State = 497;
						rewrite_alternative();
						}
						} 
					}
					State = 503;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
				}
				State = 504;
				Match(REWRITE);
				State = 505;
				rewrite_alternative();
				}
				break;
			case OR:
			case RPAREN:
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rewrite_alternativeContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_templateContext rewrite_template() {
			return GetRuleContext<Rewrite_templateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_tree_alternativeContext rewrite_tree_alternative() {
			return GetRuleContext<Rewrite_tree_alternativeContext>(0);
		}
		public Rewrite_alternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rewrite_alternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterRewrite_alternative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitRewrite_alternative(this);
		}
	}

	[RuleVersion(0)]
	public Rewrite_alternativeContext rewrite_alternative() {
		Rewrite_alternativeContext _localctx = new Rewrite_alternativeContext(Context, State);
		EnterRule(_localctx, 74, RULE_rewrite_alternative);
		try {
			State = 512;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 509;
				rewrite_template();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 510;
				rewrite_tree_alternative();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rewrite_tree_blockContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ANTLRv3Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_tree_alternativeContext rewrite_tree_alternative() {
			return GetRuleContext<Rewrite_tree_alternativeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ANTLRv3Parser.RPAREN, 0); }
		public Rewrite_tree_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rewrite_tree_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterRewrite_tree_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitRewrite_tree_block(this);
		}
	}

	[RuleVersion(0)]
	public Rewrite_tree_blockContext rewrite_tree_block() {
		Rewrite_tree_blockContext _localctx = new Rewrite_tree_blockContext(Context, State);
		EnterRule(_localctx, 76, RULE_rewrite_tree_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514;
			Match(LPAREN);
			State = 515;
			rewrite_tree_alternative();
			State = 516;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rewrite_tree_alternativeContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_tree_elementContext[] rewrite_tree_element() {
			return GetRuleContexts<Rewrite_tree_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_tree_elementContext rewrite_tree_element(int i) {
			return GetRuleContext<Rewrite_tree_elementContext>(i);
		}
		public Rewrite_tree_alternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rewrite_tree_alternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterRewrite_tree_alternative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitRewrite_tree_alternative(this);
		}
	}

	[RuleVersion(0)]
	public Rewrite_tree_alternativeContext rewrite_tree_alternative() {
		Rewrite_tree_alternativeContext _localctx = new Rewrite_tree_alternativeContext(Context, State);
		EnterRule(_localctx, 78, RULE_rewrite_tree_alternative);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 519;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 518;
				rewrite_tree_element();
				}
				}
				State = 521;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (TREE_BEGIN - 34)) | (1L << (CHAR_LITERAL - 34)) | (1L << (STRING_LITERAL - 34)) | (1L << (BEGIN_ACTION - 34)) | (1L << (LPAREN - 34)) | (1L << (DOLLAR - 34)) | (1L << (TOKEN_REF - 34)) | (1L << (RULE_REF - 34)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rewrite_tree_elementContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_tree_atomContext rewrite_tree_atom() {
			return GetRuleContext<Rewrite_tree_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_treeContext rewrite_tree() {
			return GetRuleContext<Rewrite_treeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_tree_ebnfContext rewrite_tree_ebnf() {
			return GetRuleContext<Rewrite_tree_ebnfContext>(0);
		}
		public Rewrite_tree_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rewrite_tree_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterRewrite_tree_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitRewrite_tree_element(this);
		}
	}

	[RuleVersion(0)]
	public Rewrite_tree_elementContext rewrite_tree_element() {
		Rewrite_tree_elementContext _localctx = new Rewrite_tree_elementContext(Context, State);
		EnterRule(_localctx, 80, RULE_rewrite_tree_element);
		try {
			State = 533;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 523;
				rewrite_tree_atom();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 524;
				rewrite_tree_atom();
				State = 525;
				ebnfSuffix();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 527;
				rewrite_tree();
				State = 530;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PLUS:
				case QM:
				case STAR:
					{
					State = 528;
					ebnfSuffix();
					}
					break;
				case TREE_BEGIN:
				case REWRITE:
				case CHAR_LITERAL:
				case STRING_LITERAL:
				case BEGIN_ACTION:
				case LPAREN:
				case OR:
				case RPAREN:
				case SEMI:
				case DOLLAR:
				case TOKEN_REF:
				case RULE_REF:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 532;
				rewrite_tree_ebnf();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rewrite_tree_atomContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL() { return GetToken(ANTLRv3Parser.CHAR_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv3Parser.TOKEN_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE_REF() { return GetToken(ANTLRv3Parser.RULE_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv3Parser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(ANTLRv3Parser.DOLLAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public Rewrite_tree_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rewrite_tree_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterRewrite_tree_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitRewrite_tree_atom(this);
		}
	}

	[RuleVersion(0)]
	public Rewrite_tree_atomContext rewrite_tree_atom() {
		Rewrite_tree_atomContext _localctx = new Rewrite_tree_atomContext(Context, State);
		EnterRule(_localctx, 82, RULE_rewrite_tree_atom);
		int _la;
		try {
			State = 554;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 535;
				Match(CHAR_LITERAL);
				State = 537;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_ELEMENT_OPTION) {
					{
					State = 536;
					elementOptions();
					}
				}

				}
				break;
			case TOKEN_REF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 539;
				Match(TOKEN_REF);
				State = 541;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_ELEMENT_OPTION) {
					{
					State = 540;
					elementOptions();
					}
				}

				State = 544;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BEGIN_ARGUMENT) {
					{
					State = 543;
					argActionBlock();
					}
				}

				}
				break;
			case RULE_REF:
				EnterOuterAlt(_localctx, 3);
				{
				State = 546;
				Match(RULE_REF);
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 547;
				Match(STRING_LITERAL);
				State = 549;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_ELEMENT_OPTION) {
					{
					State = 548;
					elementOptions();
					}
				}

				}
				break;
			case DOLLAR:
				EnterOuterAlt(_localctx, 5);
				{
				State = 551;
				Match(DOLLAR);
				State = 552;
				id();
				}
				break;
			case BEGIN_ACTION:
				EnterOuterAlt(_localctx, 6);
				{
				State = 553;
				actionBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rewrite_tree_ebnfContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_tree_blockContext rewrite_tree_block() {
			return GetRuleContext<Rewrite_tree_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		public Rewrite_tree_ebnfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rewrite_tree_ebnf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterRewrite_tree_ebnf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitRewrite_tree_ebnf(this);
		}
	}

	[RuleVersion(0)]
	public Rewrite_tree_ebnfContext rewrite_tree_ebnf() {
		Rewrite_tree_ebnfContext _localctx = new Rewrite_tree_ebnfContext(Context, State);
		EnterRule(_localctx, 84, RULE_rewrite_tree_ebnf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 556;
			rewrite_tree_block();
			State = 557;
			ebnfSuffix();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rewrite_treeContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TREE_BEGIN() { return GetToken(ANTLRv3Parser.TREE_BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_tree_atomContext rewrite_tree_atom() {
			return GetRuleContext<Rewrite_tree_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ANTLRv3Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_tree_elementContext[] rewrite_tree_element() {
			return GetRuleContexts<Rewrite_tree_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_tree_elementContext rewrite_tree_element(int i) {
			return GetRuleContext<Rewrite_tree_elementContext>(i);
		}
		public Rewrite_treeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rewrite_tree; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterRewrite_tree(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitRewrite_tree(this);
		}
	}

	[RuleVersion(0)]
	public Rewrite_treeContext rewrite_tree() {
		Rewrite_treeContext _localctx = new Rewrite_treeContext(Context, State);
		EnterRule(_localctx, 86, RULE_rewrite_tree);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			Match(TREE_BEGIN);
			State = 560;
			rewrite_tree_atom();
			State = 564;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (TREE_BEGIN - 34)) | (1L << (CHAR_LITERAL - 34)) | (1L << (STRING_LITERAL - 34)) | (1L << (BEGIN_ACTION - 34)) | (1L << (LPAREN - 34)) | (1L << (DOLLAR - 34)) | (1L << (TOKEN_REF - 34)) | (1L << (RULE_REF - 34)))) != 0)) {
				{
				{
				State = 561;
				rewrite_tree_element();
				}
				}
				State = 566;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 567;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rewrite_templateContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ANTLRv3Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_template_argsContext rewrite_template_args() {
			return GetRuleContext<Rewrite_template_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ANTLRv3Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_QUOTE_STRING_LITERAL() { return GetToken(ANTLRv3Parser.DOUBLE_QUOTE_STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_ANGLE_STRING_LITERAL() { return GetToken(ANTLRv3Parser.DOUBLE_ANGLE_STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_template_refContext rewrite_template_ref() {
			return GetRuleContext<Rewrite_template_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_indirect_template_headContext rewrite_indirect_template_head() {
			return GetRuleContext<Rewrite_indirect_template_headContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public Rewrite_templateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rewrite_template; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterRewrite_template(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitRewrite_template(this);
		}
	}

	[RuleVersion(0)]
	public Rewrite_templateContext rewrite_template() {
		Rewrite_templateContext _localctx = new Rewrite_templateContext(Context, State);
		EnterRule(_localctx, 88, RULE_rewrite_template);
		int _la;
		try {
			State = 578;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 569;
				id();
				State = 570;
				Match(LPAREN);
				State = 571;
				rewrite_template_args();
				State = 572;
				Match(RPAREN);
				State = 573;
				_la = TokenStream.LA(1);
				if ( !(_la==DOUBLE_QUOTE_STRING_LITERAL || _la==DOUBLE_ANGLE_STRING_LITERAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 575;
				rewrite_template_ref();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 576;
				rewrite_indirect_template_head();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 577;
				actionBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rewrite_template_refContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ANTLRv3Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_template_argsContext rewrite_template_args() {
			return GetRuleContext<Rewrite_template_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ANTLRv3Parser.RPAREN, 0); }
		public Rewrite_template_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rewrite_template_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterRewrite_template_ref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitRewrite_template_ref(this);
		}
	}

	[RuleVersion(0)]
	public Rewrite_template_refContext rewrite_template_ref() {
		Rewrite_template_refContext _localctx = new Rewrite_template_refContext(Context, State);
		EnterRule(_localctx, 90, RULE_rewrite_template_ref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580;
			id();
			State = 581;
			Match(LPAREN);
			State = 582;
			rewrite_template_args();
			State = 583;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rewrite_indirect_template_headContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(ANTLRv3Parser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(ANTLRv3Parser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(ANTLRv3Parser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(ANTLRv3Parser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_template_argsContext rewrite_template_args() {
			return GetRuleContext<Rewrite_template_argsContext>(0);
		}
		public Rewrite_indirect_template_headContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rewrite_indirect_template_head; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterRewrite_indirect_template_head(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitRewrite_indirect_template_head(this);
		}
	}

	[RuleVersion(0)]
	public Rewrite_indirect_template_headContext rewrite_indirect_template_head() {
		Rewrite_indirect_template_headContext _localctx = new Rewrite_indirect_template_headContext(Context, State);
		EnterRule(_localctx, 92, RULE_rewrite_indirect_template_head);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 585;
			Match(LPAREN);
			State = 586;
			actionBlock();
			State = 587;
			Match(RPAREN);
			State = 588;
			Match(LPAREN);
			State = 589;
			rewrite_template_args();
			State = 590;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rewrite_template_argsContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_template_argContext[] rewrite_template_arg() {
			return GetRuleContexts<Rewrite_template_argContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_template_argContext rewrite_template_arg(int i) {
			return GetRuleContext<Rewrite_template_argContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ANTLRv3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ANTLRv3Parser.COMMA, i);
		}
		public Rewrite_template_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rewrite_template_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterRewrite_template_args(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitRewrite_template_args(this);
		}
	}

	[RuleVersion(0)]
	public Rewrite_template_argsContext rewrite_template_args() {
		Rewrite_template_argsContext _localctx = new Rewrite_template_argsContext(Context, State);
		EnterRule(_localctx, 94, RULE_rewrite_template_args);
		int _la;
		try {
			State = 601;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 592;
				rewrite_template_arg();
				State = 597;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 593;
					Match(COMMA);
					State = 594;
					rewrite_template_arg();
					}
					}
					State = 599;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case RPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rewrite_template_argContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(ANTLRv3Parser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public Rewrite_template_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rewrite_template_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterRewrite_template_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitRewrite_template_arg(this);
		}
	}

	[RuleVersion(0)]
	public Rewrite_template_argContext rewrite_template_arg() {
		Rewrite_template_argContext _localctx = new Rewrite_template_argContext(Context, State);
		EnterRule(_localctx, 96, RULE_rewrite_template_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 603;
			id();
			State = 604;
			Match(EQUAL);
			State = 605;
			actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv3Parser.TOKEN_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE_REF() { return GetToken(ANTLRv3Parser.RULE_REF, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 98, RULE_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 607;
			_la = TokenStream.LA(1);
			if ( !(_la==TOKEN_REF || _la==RULE_REF) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '^', '\x264', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x3', '\x2', '\x5', '\x2', 
		'h', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x5', '\x2', 'n', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x5', '\x2', 't', '\n', '\x2', '\x3', '\x2', '\x5', '\x2', 
		'w', '\n', '\x2', '\x3', '\x2', '\a', '\x2', 'z', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', '}', '\v', '\x2', '\x3', '\x2', '\a', '\x2', '\x80', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '\x83', '\v', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x6', 
		'\x3', '\x8B', '\n', '\x3', '\r', '\x3', '\xE', '\x3', '\x8C', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '\x95', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\xA1', '\n', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x5', '\a', '\xA9', '\n', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\a', '\b', '\xAE', '\n', '\b', '\f', '\b', '\xE', '\b', 
		'\xB1', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\xBF', '\n', '\n', '\x3', 
		'\v', '\x6', '\v', '\xC2', '\n', '\v', '\r', '\v', '\xE', '\v', '\xC3', 
		'\x3', '\f', '\x5', '\f', '\xC7', '\n', '\f', '\x3', '\f', '\x5', '\f', 
		'\xCA', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xCE', '\n', 
		'\f', '\x3', '\f', '\x5', '\f', '\xD1', '\n', '\f', '\x3', '\f', '\x3', 
		'\f', '\x5', '\f', '\xD5', '\n', '\f', '\x3', '\f', '\x5', '\f', '\xD8', 
		'\n', '\f', '\x3', '\f', '\x5', '\f', '\xDB', '\n', '\f', '\x3', '\f', 
		'\x5', '\f', '\xDE', '\n', '\f', '\x3', '\f', '\a', '\f', '\xE1', '\n', 
		'\f', '\f', '\f', '\xE', '\f', '\xE4', '\v', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xEA', '\n', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\xF4', '\n', '\xE', '\f', '\xE', 
		'\xE', '\xE', '\xF7', '\v', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xFF', 
		'\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x102', '\v', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\x10C', '\n', '\xF', '\f', '\xF', 
		'\xE', '\xF', '\x10F', '\v', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\x113', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\x117', '\n', '\x10', '\x3', '\x10', '\x5', '\x10', '\x11A', '\n', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\a', '\x10', '\x122', '\n', '\x10', '\f', '\x10', '\xE', 
		'\x10', '\x125', '\v', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\a', '\x11', '\x12F', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x132', 
		'\v', '\x11', '\x3', '\x12', '\x6', '\x12', '\x135', '\n', '\x12', '\r', 
		'\x12', '\xE', '\x12', '\x136', '\x3', '\x12', '\x5', '\x12', '\x13A', 
		'\n', '\x12', '\x3', '\x13', '\x6', '\x13', '\x13D', '\n', '\x13', '\r', 
		'\x13', '\xE', '\x13', '\x13E', '\x3', '\x13', '\x5', '\x13', '\x142', 
		'\n', '\x13', '\x3', '\x13', '\x5', '\x13', '\x145', '\n', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x155', 
		'\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x5', '\x17', '\x15C', '\n', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x5', '\x17', '\x161', '\n', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\x169', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x5', '\x17', '\x16E', '\n', '\x17', '\x5', '\x17', '\x170', 
		'\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\a', '\x18', '\x174', '\n', 
		'\x18', '\f', '\x18', '\xE', '\x18', '\x177', '\v', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', '\x17D', '\n', 
		'\x19', '\f', '\x19', '\xE', '\x19', '\x180', '\v', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x5', '\x1A', '\x188', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x18F', '\n', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x193', '\n', '\x1A', '\x3', 
		'\x1A', '\x5', '\x1A', '\x196', '\n', '\x1A', '\x5', '\x1A', '\x198', 
		'\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', 
		'\x19D', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x6', 
		'\x1C', '\x1A2', '\n', '\x1C', '\r', '\x1C', '\xE', '\x1C', '\x1A3', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x1AE', '\n', '\x1D', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', 
		'\x3', '\x1F', '\x5', '\x1F', '\x1B6', '\n', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x5', '\x1F', '\x1BA', '\n', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x5', '\x1F', '\x1BE', '\n', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', 
		'\x1F', '\x1C2', '\n', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x1C5', 
		'\n', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x1C8', '\n', '\x1F', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\a', ' ', '\x1D2', '\n', ' ', '\f', ' ', '\xE', ' ', 
		'\x1D5', '\v', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x1D9', '\n', 
		' ', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x1E3', '\n', '\"', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\a', '#', '\x1E8', '\n', '#', '\f', '#', 
		'\xE', '#', '\x1EB', '\v', '#', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', 
		'%', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\a', 
		'&', '\x1F6', '\n', '&', '\f', '&', '\xE', '&', '\x1F9', '\v', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x5', '&', '\x1FE', '\n', '&', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\x5', '\'', '\x203', '\n', '\'', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x3', ')', '\x6', ')', '\x20A', '\n', 
		')', '\r', ')', '\xE', ')', '\x20B', '\x3', '*', '\x3', '*', '\x3', '*', 
		'\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x5', '*', '\x215', '\n', 
		'*', '\x3', '*', '\x5', '*', '\x218', '\n', '*', '\x3', '+', '\x3', '+', 
		'\x5', '+', '\x21C', '\n', '+', '\x3', '+', '\x3', '+', '\x5', '+', '\x220', 
		'\n', '+', '\x3', '+', '\x5', '+', '\x223', '\n', '+', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x5', '+', '\x228', '\n', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x5', '+', '\x22D', '\n', '+', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', '-', '\x3', '-', '\x3', '-', '\a', '-', '\x235', '\n', '-', 
		'\f', '-', '\xE', '-', '\x238', '\v', '-', '\x3', '-', '\x3', '-', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x5', '.', '\x245', '\n', '.', '\x3', '/', 
		'\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\a', '\x31', '\x256', 
		'\n', '\x31', '\f', '\x31', '\xE', '\x31', '\x259', '\v', '\x31', '\x3', 
		'\x31', '\x5', '\x31', '\x25C', '\n', '\x31', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', 
		'\x2', '\x2', '\x34', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', 
		'<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 
		'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x2', '\n', '\x3', '\x2', 
		',', '-', '\x4', '\x2', '#', '#', '\x37', '\x39', '\x4', '\x2', '\x43', 
		'\x43', 'R', 'R', '\x3', '\x2', '%', '&', '\x4', '\x2', ',', '-', 'U', 
		'U', '\x4', '\x2', 'I', 'J', 'P', 'P', '\x3', '\x2', '.', '/', '\x3', 
		'\x2', 'U', 'V', '\x2', '\x29E', '\x2', 'g', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\x87', '\x3', '\x2', '\x2', '\x2', '\x6', '\x90', '\x3', '\x2', 
		'\x2', '\x2', '\b', '\x98', '\x3', '\x2', '\x2', '\x2', '\n', '\x9C', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\xA8', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\xAA', '\x3', '\x2', '\x2', '\x2', '\x10', '\xB4', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\xBE', '\x3', '\x2', '\x2', '\x2', '\x14', '\xC1', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\xC6', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\xEB', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xEF', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x112', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x114', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\x128', '\x3', '\x2', '\x2', '\x2', 
		'\"', '\x139', '\x3', '\x2', '\x2', '\x2', '$', '\x144', '\x3', '\x2', 
		'\x2', '\x2', '&', '\x146', '\x3', '\x2', '\x2', '\x2', '(', '\x14A', 
		'\x3', '\x2', '\x2', '\x2', '*', '\x14D', '\x3', '\x2', '\x2', '\x2', 
		',', '\x16F', '\x3', '\x2', '\x2', '\x2', '.', '\x171', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x32', '\x197', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x199', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x38', '\x1A7', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x1AF', '\x3', '\x2', '\x2', '\x2', '<', '\x1C4', 
		'\x3', '\x2', '\x2', '\x2', '>', '\x1D8', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x1DA', '\x3', '\x2', '\x2', '\x2', '\x42', '\x1DC', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x1E4', '\x3', '\x2', '\x2', '\x2', '\x46', '\x1EC', 
		'\x3', '\x2', '\x2', '\x2', 'H', '\x1EE', '\x3', '\x2', '\x2', '\x2', 
		'J', '\x1FD', '\x3', '\x2', '\x2', '\x2', 'L', '\x202', '\x3', '\x2', 
		'\x2', '\x2', 'N', '\x204', '\x3', '\x2', '\x2', '\x2', 'P', '\x209', 
		'\x3', '\x2', '\x2', '\x2', 'R', '\x217', '\x3', '\x2', '\x2', '\x2', 
		'T', '\x22C', '\x3', '\x2', '\x2', '\x2', 'V', '\x22E', '\x3', '\x2', 
		'\x2', '\x2', 'X', '\x231', '\x3', '\x2', '\x2', '\x2', 'Z', '\x244', 
		'\x3', '\x2', '\x2', '\x2', '\\', '\x246', '\x3', '\x2', '\x2', '\x2', 
		'^', '\x24B', '\x3', '\x2', '\x2', '\x2', '`', '\x25B', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x25D', '\x3', '\x2', '\x2', '\x2', '\x64', '\x261', 
		'\x3', '\x2', '\x2', '\x2', '\x66', 'h', '\a', '\x3', '\x2', '\x2', 'g', 
		'\x66', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\x3', '\x2', '\x2', '\x2', 
		'h', 'm', '\x3', '\x2', '\x2', '\x2', 'i', 'n', '\a', '\x5', '\x2', '\x2', 
		'j', 'n', '\a', '\x4', '\x2', '\x2', 'k', 'n', '\a', '<', '\x2', '\x2', 
		'l', 'n', '\x3', '\x2', '\x2', '\x2', 'm', 'i', '\x3', '\x2', '\x2', '\x2', 
		'm', 'j', '\x3', '\x2', '\x2', '\x2', 'm', 'k', '\x3', '\x2', '\x2', '\x2', 
		'm', 'l', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\x3', '\x2', '\x2', '\x2', 
		'o', 'p', '\a', '\x36', '\x2', '\x2', 'p', 'q', '\x5', '\x64', '\x33', 
		'\x2', 'q', 's', '\a', 'N', '\x2', '\x2', 'r', 't', '\x5', '\xE', '\b', 
		'\x2', 's', 'r', '\x3', '\x2', '\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', 
		'\x2', 't', 'v', '\x3', '\x2', '\x2', '\x2', 'u', 'w', '\x5', '\x4', '\x3', 
		'\x2', 'v', 'u', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', 
		'\x2', 'w', '{', '\x3', '\x2', '\x2', '\x2', 'x', 'z', '\x5', '\b', '\x5', 
		'\x2', 'y', 'x', '\x3', '\x2', '\x2', '\x2', 'z', '}', '\x3', '\x2', '\x2', 
		'\x2', '{', 'y', '\x3', '\x2', '\x2', '\x2', '{', '|', '\x3', '\x2', '\x2', 
		'\x2', '|', '\x81', '\x3', '\x2', '\x2', '\x2', '}', '{', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x80', '\x5', '\n', '\x6', '\x2', '\x7F', '~', '\x3', 
		'\x2', '\x2', '\x2', '\x80', '\x83', '\x3', '\x2', '\x2', '\x2', '\x81', 
		'\x7F', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x84', '\x3', '\x2', '\x2', '\x2', '\x83', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x85', '\x5', '\x14', '\v', '\x2', '\x85', 
		'\x86', '\a', '\x2', '\x2', '\x3', '\x86', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x87', '\x88', '\a', '\x33', '\x2', '\x2', '\x88', '\x8A', '\a', 
		'\x44', '\x2', '\x2', '\x89', '\x8B', '\x5', '\x6', '\x4', '\x2', '\x8A', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8E', 
		'\x8F', '\a', 'K', '\x2', '\x2', '\x8F', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x90', '\x94', '\a', 'U', '\x2', '\x2', '\x91', '\x92', '\a', '\x43', 
		'\x2', '\x2', '\x92', '\x95', '\t', '\x2', '\x2', '\x2', '\x93', '\x95', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x91', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\x93', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\x97', '\a', 'N', '\x2', '\x2', '\x97', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x98', '\x99', '\a', '\x1E', '\x2', '\x2', '\x99', 
		'\x9A', '\x5', '\x64', '\x33', '\x2', '\x9A', '\x9B', '\x5', '.', '\x18', 
		'\x2', '\x9B', '\t', '\x3', '\x2', '\x2', '\x2', '\x9C', '\xA0', '\a', 
		'=', '\x2', '\x2', '\x9D', '\x9E', '\x5', '\f', '\a', '\x2', '\x9E', '\x9F', 
		'\a', '@', '\x2', '\x2', '\x9F', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\x9D', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\x5', 
		'\x64', '\x33', '\x2', '\xA3', '\xA4', '\x5', '.', '\x18', '\x2', '\xA4', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA9', '\x5', '\x64', '\x33', 
		'\x2', '\xA6', '\xA9', '\a', '\x5', '\x2', '\x2', '\xA7', '\xA9', '\a', 
		'\x4', '\x2', '\x2', '\xA8', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA8', 
		'\xA6', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA7', '\x3', '\x2', '\x2', 
		'\x2', '\xA9', '\r', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\a', 
		'\x32', '\x2', '\x2', '\xAB', '\xAF', '\a', '\x44', '\x2', '\x2', '\xAC', 
		'\xAE', '\x5', '\x10', '\t', '\x2', '\xAD', '\xAC', '\x3', '\x2', '\x2', 
		'\x2', '\xAE', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\xAF', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB0', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '\xB2', '\xB3', '\a', 'K', '\x2', '\x2', '\xB3', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\xB4', '\xB5', '\x5', '\x64', '\x33', '\x2', '\xB5', 
		'\xB6', '\a', '\x43', '\x2', '\x2', '\xB6', '\xB7', '\x5', '\x12', '\n', 
		'\x2', '\xB7', '\xB8', '\a', 'N', '\x2', '\x2', '\xB8', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\xB9', '\xBF', '\x5', '\x64', '\x33', '\x2', '\xBA', 
		'\xBF', '\a', '-', '\x2', '\x2', '\xBB', '\xBF', '\a', ',', '\x2', '\x2', 
		'\xBC', '\xBF', '\a', '+', '\x2', '\x2', '\xBD', '\xBF', '\a', 'P', '\x2', 
		'\x2', '\xBE', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBA', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'\xBC', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBD', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\x13', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC2', '\x5', 
		'\x16', '\f', '\x2', '\xC1', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC2', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC1', '\x3', '\x2', '\x2', 
		'\x2', '\xC3', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC4', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\xC5', '\xC7', '\a', '\x3', '\x2', '\x2', '\xC6', 
		'\xC5', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '\xC7', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xCA', '\t', 
		'\x3', '\x2', '\x2', '\xC9', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xC9', 
		'\xCA', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', '\x3', '\x2', '\x2', 
		'\x2', '\xCB', '\xCD', '\x5', '\x64', '\x33', '\x2', '\xCC', '\xCE', '\a', 
		'&', '\x2', '\x2', '\xCD', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCD', 
		'\xCE', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xD0', '\x3', '\x2', '\x2', 
		'\x2', '\xCF', '\xD1', '\x5', '\x30', '\x19', '\x2', '\xD0', '\xCF', '\x3', 
		'\x2', '\x2', '\x2', '\xD0', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xD4', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', '\a', ':', '\x2', 
		'\x2', '\xD3', '\xD5', '\x5', '\x30', '\x19', '\x2', '\xD4', '\xD2', '\x3', 
		'\x2', '\x2', '\x2', '\xD4', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD5', 
		'\xD7', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD8', '\x5', '\x1A', '\xE', 
		'\x2', '\xD7', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD8', '\x3', 
		'\x2', '\x2', '\x2', '\xD8', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xD9', 
		'\xDB', '\x5', '\xE', '\b', '\x2', '\xDA', '\xD9', '\x3', '\x2', '\x2', 
		'\x2', '\xDA', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDD', '\x3', 
		'\x2', '\x2', '\x2', '\xDC', '\xDE', '\x5', '\x1C', '\xF', '\x2', '\xDD', 
		'\xDC', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\x3', '\x2', '\x2', 
		'\x2', '\xDE', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE1', '\x5', 
		'\x18', '\r', '\x2', '\xE0', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE1', 
		'\xE4', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE0', '\x3', '\x2', '\x2', 
		'\x2', '\xE2', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE5', '\x3', 
		'\x2', '\x2', '\x2', '\xE4', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE5', 
		'\xE6', '\a', '?', '\x2', '\x2', '\xE6', '\xE7', '\x5', ' ', '\x11', '\x2', 
		'\xE7', '\xE9', '\a', 'N', '\x2', '\x2', '\xE8', '\xEA', '\x5', '$', '\x13', 
		'\x2', '\xE9', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEA', '\x3', 
		'\x2', '\x2', '\x2', '\xEA', '\x17', '\x3', '\x2', '\x2', '\x2', '\xEB', 
		'\xEC', '\a', '=', '\x2', '\x2', '\xEC', '\xED', '\x5', '\x64', '\x33', 
		'\x2', '\xED', '\xEE', '\x5', '.', '\x18', '\x2', '\xEE', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\xEF', '\xF0', '\a', ';', '\x2', '\x2', '\xF0', 
		'\xF5', '\x5', '\x64', '\x33', '\x2', '\xF1', '\xF2', '\a', '\x41', '\x2', 
		'\x2', '\xF2', '\xF4', '\x5', '\x64', '\x33', '\x2', '\xF3', '\xF1', '\x3', 
		'\x2', '\x2', '\x2', '\xF4', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF5', 
		'\xF3', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF6', '\x3', '\x2', '\x2', 
		'\x2', '\xF6', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF5', '\x3', 
		'\x2', '\x2', '\x2', '\xF8', '\xF9', '\a', '\x1E', '\x2', '\x2', '\xF9', 
		'\x113', '\x5', '.', '\x18', '\x2', '\xFA', '\xFB', '\a', '\x1E', '\x2', 
		'\x2', '\xFB', '\x100', '\x5', '\x64', '\x33', '\x2', '\xFC', '\xFD', 
		'\a', '\x41', '\x2', '\x2', '\xFD', '\xFF', '\x5', '\x64', '\x33', '\x2', 
		'\xFE', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x102', '\x3', '\x2', 
		'\x2', '\x2', '\x100', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x100', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\x101', '\x103', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\x100', '\x3', '\x2', '\x2', '\x2', '\x103', '\x104', '\a', 
		'N', '\x2', '\x2', '\x104', '\x113', '\x3', '\x2', '\x2', '\x2', '\x105', 
		'\x106', '\a', '\x1E', '\x2', '\x2', '\x106', '\x107', '\x5', '.', '\x18', 
		'\x2', '\x107', '\x108', '\a', '\x1E', '\x2', '\x2', '\x108', '\x10D', 
		'\x5', '\x64', '\x33', '\x2', '\x109', '\x10A', '\a', '\x41', '\x2', '\x2', 
		'\x10A', '\x10C', '\x5', '\x64', '\x33', '\x2', '\x10B', '\x109', '\x3', 
		'\x2', '\x2', '\x2', '\x10C', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x10D', 
		'\x10B', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', '\x3', '\x2', '\x2', 
		'\x2', '\x10E', '\x110', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x10D', 
		'\x3', '\x2', '\x2', '\x2', '\x110', '\x111', '\a', 'N', '\x2', '\x2', 
		'\x111', '\x113', '\x3', '\x2', '\x2', '\x2', '\x112', '\xF8', '\x3', 
		'\x2', '\x2', '\x2', '\x112', '\xFA', '\x3', '\x2', '\x2', '\x2', '\x112', 
		'\x105', '\x3', '\x2', '\x2', '\x2', '\x113', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x114', '\x119', '\a', '\x46', '\x2', '\x2', '\x115', '\x117', 
		'\x5', '\xE', '\b', '\x2', '\x116', '\x115', '\x3', '\x2', '\x2', '\x2', 
		'\x116', '\x117', '\x3', '\x2', '\x2', '\x2', '\x117', '\x118', '\x3', 
		'\x2', '\x2', '\x2', '\x118', '\x11A', '\a', '?', '\x2', '\x2', '\x119', 
		'\x116', '\x3', '\x2', '\x2', '\x2', '\x119', '\x11A', '\x3', '\x2', '\x2', 
		'\x2', '\x11A', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', 
		'\x5', '\"', '\x12', '\x2', '\x11C', '\x123', '\x5', 'J', '&', '\x2', 
		'\x11D', '\x11E', '\a', 'H', '\x2', '\x2', '\x11E', '\x11F', '\x5', '\"', 
		'\x12', '\x2', '\x11F', '\x120', '\x5', 'J', '&', '\x2', '\x120', '\x122', 
		'\x3', '\x2', '\x2', '\x2', '\x121', '\x11D', '\x3', '\x2', '\x2', '\x2', 
		'\x122', '\x125', '\x3', '\x2', '\x2', '\x2', '\x123', '\x121', '\x3', 
		'\x2', '\x2', '\x2', '\x123', '\x124', '\x3', '\x2', '\x2', '\x2', '\x124', 
		'\x126', '\x3', '\x2', '\x2', '\x2', '\x125', '\x123', '\x3', '\x2', '\x2', 
		'\x2', '\x126', '\x127', '\a', 'M', '\x2', '\x2', '\x127', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x128', '\x129', '\x5', '\"', '\x12', '\x2', '\x129', 
		'\x130', '\x5', 'J', '&', '\x2', '\x12A', '\x12B', '\a', 'H', '\x2', '\x2', 
		'\x12B', '\x12C', '\x5', '\"', '\x12', '\x2', '\x12C', '\x12D', '\x5', 
		'J', '&', '\x2', '\x12D', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x12E', 
		'\x12A', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x132', '\x3', '\x2', '\x2', 
		'\x2', '\x130', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x130', '\x131', 
		'\x3', '\x2', '\x2', '\x2', '\x131', '!', '\x3', '\x2', '\x2', '\x2', 
		'\x132', '\x130', '\x3', '\x2', '\x2', '\x2', '\x133', '\x135', '\x5', 
		'*', '\x16', '\x2', '\x134', '\x133', '\x3', '\x2', '\x2', '\x2', '\x135', 
		'\x136', '\x3', '\x2', '\x2', '\x2', '\x136', '\x134', '\x3', '\x2', '\x2', 
		'\x2', '\x136', '\x137', '\x3', '\x2', '\x2', '\x2', '\x137', '\x13A', 
		'\x3', '\x2', '\x2', '\x2', '\x138', '\x13A', '\x3', '\x2', '\x2', '\x2', 
		'\x139', '\x134', '\x3', '\x2', '\x2', '\x2', '\x139', '\x138', '\x3', 
		'\x2', '\x2', '\x2', '\x13A', '#', '\x3', '\x2', '\x2', '\x2', '\x13B', 
		'\x13D', '\x5', '&', '\x14', '\x2', '\x13C', '\x13B', '\x3', '\x2', '\x2', 
		'\x2', '\x13D', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x13C', 
		'\x3', '\x2', '\x2', '\x2', '\x13E', '\x13F', '\x3', '\x2', '\x2', '\x2', 
		'\x13F', '\x141', '\x3', '\x2', '\x2', '\x2', '\x140', '\x142', '\x5', 
		'(', '\x15', '\x2', '\x141', '\x140', '\x3', '\x2', '\x2', '\x2', '\x141', 
		'\x142', '\x3', '\x2', '\x2', '\x2', '\x142', '\x145', '\x3', '\x2', '\x2', 
		'\x2', '\x143', '\x145', '\x5', '(', '\x15', '\x2', '\x144', '\x13C', 
		'\x3', '\x2', '\x2', '\x2', '\x144', '\x143', '\x3', '\x2', '\x2', '\x2', 
		'\x145', '%', '\x3', '\x2', '\x2', '\x2', '\x146', '\x147', '\a', '\x34', 
		'\x2', '\x2', '\x147', '\x148', '\x5', '\x30', '\x19', '\x2', '\x148', 
		'\x149', '\x5', '.', '\x18', '\x2', '\x149', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\x14A', '\x14B', '\a', '\x35', '\x2', '\x2', '\x14B', '\x14C', 
		'\x5', '.', '\x18', '\x2', '\x14C', ')', '\x3', '\x2', '\x2', '\x2', '\x14D', 
		'\x14E', '\x5', ',', '\x17', '\x2', '\x14E', '+', '\x3', '\x2', '\x2', 
		'\x2', '\x14F', '\x150', '\x5', '\x64', '\x33', '\x2', '\x150', '\x151', 
		'\t', '\x4', '\x2', '\x2', '\x151', '\x154', '\x5', '\x32', '\x1A', '\x2', 
		'\x152', '\x155', '\x5', 'H', '%', '\x2', '\x153', '\x155', '\x3', '\x2', 
		'\x2', '\x2', '\x154', '\x152', '\x3', '\x2', '\x2', '\x2', '\x154', '\x153', 
		'\x3', '\x2', '\x2', '\x2', '\x155', '\x170', '\x3', '\x2', '\x2', '\x2', 
		'\x156', '\x157', '\x5', '\x64', '\x33', '\x2', '\x157', '\x158', '\t', 
		'\x4', '\x2', '\x2', '\x158', '\x15B', '\x5', '\x1E', '\x10', '\x2', '\x159', 
		'\x15C', '\x5', 'H', '%', '\x2', '\x15A', '\x15C', '\x3', '\x2', '\x2', 
		'\x2', '\x15B', '\x159', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x15A', 
		'\x3', '\x2', '\x2', '\x2', '\x15C', '\x170', '\x3', '\x2', '\x2', '\x2', 
		'\x15D', '\x160', '\x5', '\x32', '\x1A', '\x2', '\x15E', '\x161', '\x5', 
		'H', '%', '\x2', '\x15F', '\x161', '\x3', '\x2', '\x2', '\x2', '\x160', 
		'\x15E', '\x3', '\x2', '\x2', '\x2', '\x160', '\x15F', '\x3', '\x2', '\x2', 
		'\x2', '\x161', '\x170', '\x3', '\x2', '\x2', '\x2', '\x162', '\x170', 
		'\x5', '\x38', '\x1D', '\x2', '\x163', '\x170', '\x5', '.', '\x18', '\x2', 
		'\x164', '\x165', '\x5', '.', '\x18', '\x2', '\x165', '\x168', '\a', 'J', 
		'\x2', '\x2', '\x166', '\x169', '\a', 'O', '\x2', '\x2', '\x167', '\x169', 
		'\x3', '\x2', '\x2', '\x2', '\x168', '\x166', '\x3', '\x2', '\x2', '\x2', 
		'\x168', '\x167', '\x3', '\x2', '\x2', '\x2', '\x169', '\x170', '\x3', 
		'\x2', '\x2', '\x2', '\x16A', '\x16D', '\x5', '\x36', '\x1C', '\x2', '\x16B', 
		'\x16E', '\x5', 'H', '%', '\x2', '\x16C', '\x16E', '\x3', '\x2', '\x2', 
		'\x2', '\x16D', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x16C', 
		'\x3', '\x2', '\x2', '\x2', '\x16E', '\x170', '\x3', '\x2', '\x2', '\x2', 
		'\x16F', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x16F', '\x156', '\x3', 
		'\x2', '\x2', '\x2', '\x16F', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x16F', 
		'\x162', '\x3', '\x2', '\x2', '\x2', '\x16F', '\x163', '\x3', '\x2', '\x2', 
		'\x2', '\x16F', '\x164', '\x3', '\x2', '\x2', '\x2', '\x16F', '\x16A', 
		'\x3', '\x2', '\x2', '\x2', '\x170', '-', '\x3', '\x2', '\x2', '\x2', 
		'\x171', '\x175', '\a', '\x31', '\x2', '\x2', '\x172', '\x174', '\a', 
		'(', '\x2', '\x2', '\x173', '\x172', '\x3', '\x2', '\x2', '\x2', '\x174', 
		'\x177', '\x3', '\x2', '\x2', '\x2', '\x175', '\x173', '\x3', '\x2', '\x2', 
		'\x2', '\x175', '\x176', '\x3', '\x2', '\x2', '\x2', '\x176', '\x178', 
		'\x3', '\x2', '\x2', '\x2', '\x177', '\x175', '\x3', '\x2', '\x2', '\x2', 
		'\x178', '\x179', '\a', 'Z', '\x2', '\x2', '\x179', '/', '\x3', '\x2', 
		'\x2', '\x2', '\x17A', '\x17E', '\a', '\x30', '\x2', '\x2', '\x17B', '\x17D', 
		'\a', 'Y', '\x2', '\x2', '\x17C', '\x17B', '\x3', '\x2', '\x2', '\x2', 
		'\x17D', '\x180', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x17C', '\x3', 
		'\x2', '\x2', '\x2', '\x17E', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x17F', 
		'\x181', '\x3', '\x2', '\x2', '\x2', '\x180', '\x17E', '\x3', '\x2', '\x2', 
		'\x2', '\x181', '\x182', '\a', 'W', '\x2', '\x2', '\x182', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x183', '\x187', '\x5', ':', '\x1E', '\x2', '\x184', 
		'\x188', '\a', '%', '\x2', '\x2', '\x185', '\x188', '\a', '&', '\x2', 
		'\x2', '\x186', '\x188', '\x3', '\x2', '\x2', '\x2', '\x187', '\x184', 
		'\x3', '\x2', '\x2', '\x2', '\x187', '\x185', '\x3', '\x2', '\x2', '\x2', 
		'\x187', '\x186', '\x3', '\x2', '\x2', '\x2', '\x188', '\x198', '\x3', 
		'\x2', '\x2', '\x2', '\x189', '\x198', '\x5', '<', '\x1F', '\x2', '\x18A', 
		'\x18E', '\x5', '\x34', '\x1B', '\x2', '\x18B', '\x18F', '\a', '%', '\x2', 
		'\x2', '\x18C', '\x18F', '\a', '&', '\x2', '\x2', '\x18D', '\x18F', '\x3', 
		'\x2', '\x2', '\x2', '\x18E', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x18E', 
		'\x18C', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x18D', '\x3', '\x2', '\x2', 
		'\x2', '\x18F', '\x198', '\x3', '\x2', '\x2', '\x2', '\x190', '\x192', 
		'\a', 'V', '\x2', '\x2', '\x191', '\x193', '\x5', '\x30', '\x19', '\x2', 
		'\x192', '\x191', '\x3', '\x2', '\x2', '\x2', '\x192', '\x193', '\x3', 
		'\x2', '\x2', '\x2', '\x193', '\x195', '\x3', '\x2', '\x2', '\x2', '\x194', 
		'\x196', '\t', '\x5', '\x2', '\x2', '\x195', '\x194', '\x3', '\x2', '\x2', 
		'\x2', '\x195', '\x196', '\x3', '\x2', '\x2', '\x2', '\x196', '\x198', 
		'\x3', '\x2', '\x2', '\x2', '\x197', '\x183', '\x3', '\x2', '\x2', '\x2', 
		'\x197', '\x189', '\x3', '\x2', '\x2', '\x2', '\x197', '\x18A', '\x3', 
		'\x2', '\x2', '\x2', '\x197', '\x190', '\x3', '\x2', '\x2', '\x2', '\x198', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x199', '\x19C', '\a', 'S', '\x2', 
		'\x2', '\x19A', '\x19D', '\x5', '\x46', '$', '\x2', '\x19B', '\x19D', 
		'\x5', '\x1E', '\x10', '\x2', '\x19C', '\x19A', '\x3', '\x2', '\x2', '\x2', 
		'\x19C', '\x19B', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x19E', '\x19F', '\a', '$', '\x2', '\x2', '\x19F', 
		'\x1A1', '\x5', '*', '\x16', '\x2', '\x1A0', '\x1A2', '\x5', '*', '\x16', 
		'\x2', '\x1A1', '\x1A0', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A3', 
		'\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A1', '\x3', '\x2', '\x2', '\x2', 
		'\x1A3', '\x1A4', '\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1A5', '\x3', 
		'\x2', '\x2', '\x2', '\x1A5', '\x1A6', '\a', 'M', '\x2', '\x2', '\x1A6', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1AD', '\x5', '\x1E', '\x10', 
		'\x2', '\x1A8', '\x1AE', '\a', 'J', '\x2', '\x2', '\x1A9', '\x1AE', '\a', 
		'P', '\x2', '\x2', '\x1AA', '\x1AE', '\a', 'I', '\x2', '\x2', '\x1AB', 
		'\x1AE', '\a', 'O', '\x2', '\x2', '\x1AC', '\x1AE', '\x3', '\x2', '\x2', 
		'\x2', '\x1AD', '\x1A8', '\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1A9', 
		'\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AA', '\x3', '\x2', '\x2', '\x2', 
		'\x1AD', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AC', '\x3', 
		'\x2', '\x2', '\x2', '\x1AE', '\x39', '\x3', '\x2', '\x2', '\x2', '\x1AF', 
		'\x1B0', '\a', ',', '\x2', '\x2', '\x1B0', '\x1B1', '\a', '\f', '\x2', 
		'\x2', '\x1B1', '\x1B2', '\a', ',', '\x2', '\x2', '\x1B2', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x1B3', '\x1B5', '\a', ',', '\x2', '\x2', '\x1B4', 
		'\x1B6', '\x5', '>', ' ', '\x2', '\x1B5', '\x1B4', '\x3', '\x2', '\x2', 
		'\x2', '\x1B5', '\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1C5', 
		'\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1B9', '\a', 'U', '\x2', '\x2', 
		'\x1B8', '\x1BA', '\x5', '>', ' ', '\x2', '\x1B9', '\x1B8', '\x3', '\x2', 
		'\x2', '\x2', '\x1B9', '\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1BD', 
		'\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1BE', '\x5', '\x30', '\x19', '\x2', 
		'\x1BC', '\x1BE', '\x3', '\x2', '\x2', '\x2', '\x1BD', '\x1BB', '\x3', 
		'\x2', '\x2', '\x2', '\x1BD', '\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1BE', 
		'\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1C1', '\a', '-', '\x2', 
		'\x2', '\x1C0', '\x1C2', '\x5', '>', ' ', '\x2', '\x1C1', '\x1C0', '\x3', 
		'\x2', '\x2', '\x2', '\x1C1', '\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C2', 
		'\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1C5', '\a', '\x42', '\x2', 
		'\x2', '\x1C4', '\x1B3', '\x3', '\x2', '\x2', '\x2', '\x1C4', '\x1B7', 
		'\x3', '\x2', '\x2', '\x2', '\x1C4', '\x1BF', '\x3', '\x2', '\x2', '\x2', 
		'\x1C4', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1C7', '\x3', 
		'\x2', '\x2', '\x2', '\x1C6', '\x1C8', '\t', '\x5', '\x2', '\x2', '\x1C7', 
		'\x1C6', '\x3', '\x2', '\x2', '\x2', '\x1C7', '\x1C8', '\x3', '\x2', '\x2', 
		'\x2', '\x1C8', '=', '\x3', '\x2', '\x2', '\x2', '\x1C9', '\x1CA', '\a', 
		'G', '\x2', '\x2', '\x1CA', '\x1CB', '\x5', '@', '!', '\x2', '\x1CB', 
		'\x1CC', '\a', '>', '\x2', '\x2', '\x1CC', '\x1D9', '\x3', '\x2', '\x2', 
		'\x2', '\x1CD', '\x1CE', '\a', 'G', '\x2', '\x2', '\x1CE', '\x1D3', '\x5', 
		'\x42', '\"', '\x2', '\x1CF', '\x1D0', '\a', 'N', '\x2', '\x2', '\x1D0', 
		'\x1D2', '\x5', '\x42', '\"', '\x2', '\x1D1', '\x1CF', '\x3', '\x2', '\x2', 
		'\x2', '\x1D2', '\x1D5', '\x3', '\x2', '\x2', '\x2', '\x1D3', '\x1D1', 
		'\x3', '\x2', '\x2', '\x2', '\x1D3', '\x1D4', '\x3', '\x2', '\x2', '\x2', 
		'\x1D4', '\x1D6', '\x3', '\x2', '\x2', '\x2', '\x1D5', '\x1D3', '\x3', 
		'\x2', '\x2', '\x2', '\x1D6', '\x1D7', '\a', '>', '\x2', '\x2', '\x1D7', 
		'\x1D9', '\x3', '\x2', '\x2', '\x2', '\x1D8', '\x1C9', '\x3', '\x2', '\x2', 
		'\x2', '\x1D8', '\x1CD', '\x3', '\x2', '\x2', '\x2', '\x1D9', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x1DA', '\x1DB', '\x5', '\x44', '#', '\x2', '\x1DB', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1DD', '\x5', '\x64', '\x33', 
		'\x2', '\x1DD', '\x1E2', '\a', '\x43', '\x2', '\x2', '\x1DE', '\x1E3', 
		'\x5', '\x44', '#', '\x2', '\x1DF', '\x1E3', '\a', '-', '\x2', '\x2', 
		'\x1E0', '\x1E3', '\a', '.', '\x2', '\x2', '\x1E1', '\x1E3', '\a', '/', 
		'\x2', '\x2', '\x1E2', '\x1DE', '\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1DF', 
		'\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1E0', '\x3', '\x2', '\x2', '\x2', 
		'\x1E2', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\x1E3', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x1E4', '\x1E9', '\x5', '\x64', '\x33', '\x2', '\x1E5', 
		'\x1E6', '\a', '\x42', '\x2', '\x2', '\x1E6', '\x1E8', '\x5', '\x64', 
		'\x33', '\x2', '\x1E7', '\x1E5', '\x3', '\x2', '\x2', '\x2', '\x1E8', 
		'\x1EB', '\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1E7', '\x3', '\x2', '\x2', 
		'\x2', '\x1E9', '\x1EA', '\x3', '\x2', '\x2', '\x2', '\x1EA', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1E9', '\x3', '\x2', '\x2', '\x2', 
		'\x1EC', '\x1ED', '\t', '\x6', '\x2', '\x2', '\x1ED', 'G', '\x3', '\x2', 
		'\x2', '\x2', '\x1EE', '\x1EF', '\t', '\a', '\x2', '\x2', '\x1EF', 'I', 
		'\x3', '\x2', '\x2', '\x2', '\x1F0', '\x1F1', '\a', '\'', '\x2', '\x2', 
		'\x1F1', '\x1F2', '\x5', '.', '\x18', '\x2', '\x1F2', '\x1F3', '\a', 'J', 
		'\x2', '\x2', '\x1F3', '\x1F4', '\x5', 'L', '\'', '\x2', '\x1F4', '\x1F6', 
		'\x3', '\x2', '\x2', '\x2', '\x1F5', '\x1F0', '\x3', '\x2', '\x2', '\x2', 
		'\x1F6', '\x1F9', '\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1F5', '\x3', 
		'\x2', '\x2', '\x2', '\x1F7', '\x1F8', '\x3', '\x2', '\x2', '\x2', '\x1F8', 
		'\x1FA', '\x3', '\x2', '\x2', '\x2', '\x1F9', '\x1F7', '\x3', '\x2', '\x2', 
		'\x2', '\x1FA', '\x1FB', '\a', '\'', '\x2', '\x2', '\x1FB', '\x1FE', '\x5', 
		'L', '\'', '\x2', '\x1FC', '\x1FE', '\x3', '\x2', '\x2', '\x2', '\x1FD', 
		'\x1F7', '\x3', '\x2', '\x2', '\x2', '\x1FD', '\x1FC', '\x3', '\x2', '\x2', 
		'\x2', '\x1FE', 'K', '\x3', '\x2', '\x2', '\x2', '\x1FF', '\x203', '\x5', 
		'Z', '.', '\x2', '\x200', '\x203', '\x5', 'P', ')', '\x2', '\x201', '\x203', 
		'\x3', '\x2', '\x2', '\x2', '\x202', '\x1FF', '\x3', '\x2', '\x2', '\x2', 
		'\x202', '\x200', '\x3', '\x2', '\x2', '\x2', '\x202', '\x201', '\x3', 
		'\x2', '\x2', '\x2', '\x203', 'M', '\x3', '\x2', '\x2', '\x2', '\x204', 
		'\x205', '\a', '\x46', '\x2', '\x2', '\x205', '\x206', '\x5', 'P', ')', 
		'\x2', '\x206', '\x207', '\a', 'M', '\x2', '\x2', '\x207', 'O', '\x3', 
		'\x2', '\x2', '\x2', '\x208', '\x20A', '\x5', 'R', '*', '\x2', '\x209', 
		'\x208', '\x3', '\x2', '\x2', '\x2', '\x20A', '\x20B', '\x3', '\x2', '\x2', 
		'\x2', '\x20B', '\x209', '\x3', '\x2', '\x2', '\x2', '\x20B', '\x20C', 
		'\x3', '\x2', '\x2', '\x2', '\x20C', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'\x20D', '\x218', '\x5', 'T', '+', '\x2', '\x20E', '\x20F', '\x5', 'T', 
		'+', '\x2', '\x20F', '\x210', '\x5', 'H', '%', '\x2', '\x210', '\x218', 
		'\x3', '\x2', '\x2', '\x2', '\x211', '\x214', '\x5', 'X', '-', '\x2', 
		'\x212', '\x215', '\x5', 'H', '%', '\x2', '\x213', '\x215', '\x3', '\x2', 
		'\x2', '\x2', '\x214', '\x212', '\x3', '\x2', '\x2', '\x2', '\x214', '\x213', 
		'\x3', '\x2', '\x2', '\x2', '\x215', '\x218', '\x3', '\x2', '\x2', '\x2', 
		'\x216', '\x218', '\x5', 'V', ',', '\x2', '\x217', '\x20D', '\x3', '\x2', 
		'\x2', '\x2', '\x217', '\x20E', '\x3', '\x2', '\x2', '\x2', '\x217', '\x211', 
		'\x3', '\x2', '\x2', '\x2', '\x217', '\x216', '\x3', '\x2', '\x2', '\x2', 
		'\x218', 'S', '\x3', '\x2', '\x2', '\x2', '\x219', '\x21B', '\a', ',', 
		'\x2', '\x2', '\x21A', '\x21C', '\x5', '>', ' ', '\x2', '\x21B', '\x21A', 
		'\x3', '\x2', '\x2', '\x2', '\x21B', '\x21C', '\x3', '\x2', '\x2', '\x2', 
		'\x21C', '\x22D', '\x3', '\x2', '\x2', '\x2', '\x21D', '\x21F', '\a', 
		'U', '\x2', '\x2', '\x21E', '\x220', '\x5', '>', ' ', '\x2', '\x21F', 
		'\x21E', '\x3', '\x2', '\x2', '\x2', '\x21F', '\x220', '\x3', '\x2', '\x2', 
		'\x2', '\x220', '\x222', '\x3', '\x2', '\x2', '\x2', '\x221', '\x223', 
		'\x5', '\x30', '\x19', '\x2', '\x222', '\x221', '\x3', '\x2', '\x2', '\x2', 
		'\x222', '\x223', '\x3', '\x2', '\x2', '\x2', '\x223', '\x22D', '\x3', 
		'\x2', '\x2', '\x2', '\x224', '\x22D', '\a', 'V', '\x2', '\x2', '\x225', 
		'\x227', '\a', '-', '\x2', '\x2', '\x226', '\x228', '\x5', '>', ' ', '\x2', 
		'\x227', '\x226', '\x3', '\x2', '\x2', '\x2', '\x227', '\x228', '\x3', 
		'\x2', '\x2', '\x2', '\x228', '\x22D', '\x3', '\x2', '\x2', '\x2', '\x229', 
		'\x22A', '\a', 'Q', '\x2', '\x2', '\x22A', '\x22D', '\x5', '\x64', '\x33', 
		'\x2', '\x22B', '\x22D', '\x5', '.', '\x18', '\x2', '\x22C', '\x219', 
		'\x3', '\x2', '\x2', '\x2', '\x22C', '\x21D', '\x3', '\x2', '\x2', '\x2', 
		'\x22C', '\x224', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x225', '\x3', 
		'\x2', '\x2', '\x2', '\x22C', '\x229', '\x3', '\x2', '\x2', '\x2', '\x22C', 
		'\x22B', '\x3', '\x2', '\x2', '\x2', '\x22D', 'U', '\x3', '\x2', '\x2', 
		'\x2', '\x22E', '\x22F', '\x5', 'N', '(', '\x2', '\x22F', '\x230', '\x5', 
		'H', '%', '\x2', '\x230', 'W', '\x3', '\x2', '\x2', '\x2', '\x231', '\x232', 
		'\a', '$', '\x2', '\x2', '\x232', '\x236', '\x5', 'T', '+', '\x2', '\x233', 
		'\x235', '\x5', 'R', '*', '\x2', '\x234', '\x233', '\x3', '\x2', '\x2', 
		'\x2', '\x235', '\x238', '\x3', '\x2', '\x2', '\x2', '\x236', '\x234', 
		'\x3', '\x2', '\x2', '\x2', '\x236', '\x237', '\x3', '\x2', '\x2', '\x2', 
		'\x237', '\x239', '\x3', '\x2', '\x2', '\x2', '\x238', '\x236', '\x3', 
		'\x2', '\x2', '\x2', '\x239', '\x23A', '\a', 'M', '\x2', '\x2', '\x23A', 
		'Y', '\x3', '\x2', '\x2', '\x2', '\x23B', '\x23C', '\x5', '\x64', '\x33', 
		'\x2', '\x23C', '\x23D', '\a', '\x46', '\x2', '\x2', '\x23D', '\x23E', 
		'\x5', '`', '\x31', '\x2', '\x23E', '\x23F', '\a', 'M', '\x2', '\x2', 
		'\x23F', '\x240', '\t', '\b', '\x2', '\x2', '\x240', '\x245', '\x3', '\x2', 
		'\x2', '\x2', '\x241', '\x245', '\x5', '\\', '/', '\x2', '\x242', '\x245', 
		'\x5', '^', '\x30', '\x2', '\x243', '\x245', '\x5', '.', '\x18', '\x2', 
		'\x244', '\x23B', '\x3', '\x2', '\x2', '\x2', '\x244', '\x241', '\x3', 
		'\x2', '\x2', '\x2', '\x244', '\x242', '\x3', '\x2', '\x2', '\x2', '\x244', 
		'\x243', '\x3', '\x2', '\x2', '\x2', '\x245', '[', '\x3', '\x2', '\x2', 
		'\x2', '\x246', '\x247', '\x5', '\x64', '\x33', '\x2', '\x247', '\x248', 
		'\a', '\x46', '\x2', '\x2', '\x248', '\x249', '\x5', '`', '\x31', '\x2', 
		'\x249', '\x24A', '\a', 'M', '\x2', '\x2', '\x24A', ']', '\x3', '\x2', 
		'\x2', '\x2', '\x24B', '\x24C', '\a', '\x46', '\x2', '\x2', '\x24C', '\x24D', 
		'\x5', '.', '\x18', '\x2', '\x24D', '\x24E', '\a', 'M', '\x2', '\x2', 
		'\x24E', '\x24F', '\a', '\x46', '\x2', '\x2', '\x24F', '\x250', '\x5', 
		'`', '\x31', '\x2', '\x250', '\x251', '\a', 'M', '\x2', '\x2', '\x251', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x252', '\x257', '\x5', '\x62', '\x32', 
		'\x2', '\x253', '\x254', '\a', '\x41', '\x2', '\x2', '\x254', '\x256', 
		'\x5', '\x62', '\x32', '\x2', '\x255', '\x253', '\x3', '\x2', '\x2', '\x2', 
		'\x256', '\x259', '\x3', '\x2', '\x2', '\x2', '\x257', '\x255', '\x3', 
		'\x2', '\x2', '\x2', '\x257', '\x258', '\x3', '\x2', '\x2', '\x2', '\x258', 
		'\x25C', '\x3', '\x2', '\x2', '\x2', '\x259', '\x257', '\x3', '\x2', '\x2', 
		'\x2', '\x25A', '\x25C', '\x3', '\x2', '\x2', '\x2', '\x25B', '\x252', 
		'\x3', '\x2', '\x2', '\x2', '\x25B', '\x25A', '\x3', '\x2', '\x2', '\x2', 
		'\x25C', '\x61', '\x3', '\x2', '\x2', '\x2', '\x25D', '\x25E', '\x5', 
		'\x64', '\x33', '\x2', '\x25E', '\x25F', '\a', '\x43', '\x2', '\x2', '\x25F', 
		'\x260', '\x5', '.', '\x18', '\x2', '\x260', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x261', '\x262', '\t', '\t', '\x2', '\x2', '\x262', '\x65', '\x3', 
		'\x2', '\x2', '\x2', 'O', 'g', 'm', 's', 'v', '{', '\x81', '\x8C', '\x94', 
		'\xA0', '\xA8', '\xAF', '\xBE', '\xC3', '\xC6', '\xC9', '\xCD', '\xD0', 
		'\xD4', '\xD7', '\xDA', '\xDD', '\xE2', '\xE9', '\xF5', '\x100', '\x10D', 
		'\x112', '\x116', '\x119', '\x123', '\x130', '\x136', '\x139', '\x13E', 
		'\x141', '\x144', '\x154', '\x15B', '\x160', '\x168', '\x16D', '\x16F', 
		'\x175', '\x17E', '\x187', '\x18E', '\x192', '\x195', '\x197', '\x19C', 
		'\x1A3', '\x1AD', '\x1B5', '\x1B9', '\x1BD', '\x1C1', '\x1C4', '\x1C7', 
		'\x1D3', '\x1D8', '\x1E2', '\x1E9', '\x1F7', '\x1FD', '\x202', '\x20B', 
		'\x214', '\x217', '\x21B', '\x21F', '\x222', '\x227', '\x22C', '\x236', 
		'\x244', '\x257', '\x25B',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace LanguageServer
