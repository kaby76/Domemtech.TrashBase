//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PestParser.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LanguageServer {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class PestParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		UNDERSCORE=1, AT=2, DOLLAR=3, NOT=4, AMP=5, TILDE=6, VBAR=7, QUESTION=8, 
		STAR=9, PLUS=10, ASSIGNMENT_OPERATOR=11, OPENING_BRACE=12, CLOSING_BRACE=13, 
		OPENING_PAREN=14, CLOSING_PAREN=15, OPENING_BRACK=16, CLOSING_BRACK=17, 
		PUSH=18, PEEK=19, NUMBER=20, INTEGER=21, COMMA=22, IDENTIFIER=23, STRING=24, 
		INSENSITIVE_STRING=25, RANGE=26, CHARACTER=27, ESCAPE=28, CODE=29, UNICODE=30, 
		HEX_DIGIT=31, QUOTE=32, SINGLE_QUOTE=33, RANGE_OPERATOR=34, WHITESPACE=35, 
		BLOCK_COMMENT=36, COMMENT=37;
	public const int
		RULE_grammar_rules = 0, RULE_grammar_rule = 1, RULE_modifier = 2, RULE_silent_modifier = 3, 
		RULE_atomic_modifier = 4, RULE_compound_atomic_modifier = 5, RULE_non_atomic_modifier = 6, 
		RULE_expression = 7, RULE_term = 8, RULE_node = 9, RULE_terminal = 10, 
		RULE_prefix_operator = 11, RULE_infix_operator = 12, RULE_postfix_operator = 13, 
		RULE_positive_predicate_operator = 14, RULE_negative_predicate_operator = 15, 
		RULE_sequence_operator = 16, RULE_choice_operator = 17, RULE_optional_operator = 18, 
		RULE_repeat_operator = 19, RULE_repeat_once_operator = 20, RULE_repeat_exact = 21, 
		RULE_repeat_min = 22, RULE_repeat_max = 23, RULE_repeat_min_max = 24, 
		RULE_push = 25, RULE_peek_slice = 26;
	public static readonly string[] ruleNames = {
		"grammar_rules", "grammar_rule", "modifier", "silent_modifier", "atomic_modifier", 
		"compound_atomic_modifier", "non_atomic_modifier", "expression", "term", 
		"node", "terminal", "prefix_operator", "infix_operator", "postfix_operator", 
		"positive_predicate_operator", "negative_predicate_operator", "sequence_operator", 
		"choice_operator", "optional_operator", "repeat_operator", "repeat_once_operator", 
		"repeat_exact", "repeat_min", "repeat_max", "repeat_min_max", "push", 
		"peek_slice"
	};

	private static readonly string[] _LiteralNames = {
		null, "'_'", "'@'", "'$'", "'!'", "'&'", "'~'", "'|'", "'?'", "'*'", "'+'", 
		"'='", "'{'", "'}'", "'('", "')'", "'['", "']'", "'PUSH'", "'PEEK'", null, 
		null, "','", null, null, null, null, null, null, null, null, null, "'\"'", 
		"'''", "'..'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "UNDERSCORE", "AT", "DOLLAR", "NOT", "AMP", "TILDE", "VBAR", "QUESTION", 
		"STAR", "PLUS", "ASSIGNMENT_OPERATOR", "OPENING_BRACE", "CLOSING_BRACE", 
		"OPENING_PAREN", "CLOSING_PAREN", "OPENING_BRACK", "CLOSING_BRACK", "PUSH", 
		"PEEK", "NUMBER", "INTEGER", "COMMA", "IDENTIFIER", "STRING", "INSENSITIVE_STRING", 
		"RANGE", "CHARACTER", "ESCAPE", "CODE", "UNICODE", "HEX_DIGIT", "QUOTE", 
		"SINGLE_QUOTE", "RANGE_OPERATOR", "WHITESPACE", "BLOCK_COMMENT", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PestParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static PestParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PestParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PestParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Grammar_rulesContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PestParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grammar_ruleContext[] grammar_rule() {
			return GetRuleContexts<Grammar_ruleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Grammar_ruleContext grammar_rule(int i) {
			return GetRuleContext<Grammar_ruleContext>(i);
		}
		public Grammar_rulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammar_rules; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterGrammar_rules(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitGrammar_rules(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrammar_rules(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grammar_rulesContext grammar_rules() {
		Grammar_rulesContext _localctx = new Grammar_rulesContext(Context, State);
		EnterRule(_localctx, 0, RULE_grammar_rules);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 54;
				grammar_rule();
				}
				}
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENTIFIER );
			State = 59;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grammar_ruleContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PestParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT_OPERATOR() { return GetToken(PestParser.ASSIGNMENT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENING_BRACE() { return GetToken(PestParser.OPENING_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSING_BRACE() { return GetToken(PestParser.CLOSING_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier() {
			return GetRuleContext<ModifierContext>(0);
		}
		public Grammar_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammar_rule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterGrammar_rule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitGrammar_rule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrammar_rule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grammar_ruleContext grammar_rule() {
		Grammar_ruleContext _localctx = new Grammar_ruleContext(Context, State);
		EnterRule(_localctx, 2, RULE_grammar_rule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			Match(IDENTIFIER);
			State = 62;
			Match(ASSIGNMENT_OPERATOR);
			State = 64;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << UNDERSCORE) | (1L << AT) | (1L << DOLLAR) | (1L << NOT))) != 0)) {
				{
				State = 63;
				modifier();
				}
			}

			State = 66;
			Match(OPENING_BRACE);
			State = 67;
			expression();
			State = 68;
			Match(CLOSING_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Silent_modifierContext silent_modifier() {
			return GetRuleContext<Silent_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Atomic_modifierContext atomic_modifier() {
			return GetRuleContext<Atomic_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Compound_atomic_modifierContext compound_atomic_modifier() {
			return GetRuleContext<Compound_atomic_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Non_atomic_modifierContext non_atomic_modifier() {
			return GetRuleContext<Non_atomic_modifierContext>(0);
		}
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(Context, State);
		EnterRule(_localctx, 4, RULE_modifier);
		try {
			State = 74;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNDERSCORE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 70;
				silent_modifier();
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 71;
				atomic_modifier();
				}
				break;
			case DOLLAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 72;
				compound_atomic_modifier();
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 73;
				non_atomic_modifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Silent_modifierContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDERSCORE() { return GetToken(PestParser.UNDERSCORE, 0); }
		public Silent_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_silent_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterSilent_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitSilent_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSilent_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Silent_modifierContext silent_modifier() {
		Silent_modifierContext _localctx = new Silent_modifierContext(Context, State);
		EnterRule(_localctx, 6, RULE_silent_modifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			Match(UNDERSCORE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Atomic_modifierContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(PestParser.AT, 0); }
		public Atomic_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomic_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterAtomic_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitAtomic_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomic_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Atomic_modifierContext atomic_modifier() {
		Atomic_modifierContext _localctx = new Atomic_modifierContext(Context, State);
		EnterRule(_localctx, 8, RULE_atomic_modifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			Match(AT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_atomic_modifierContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(PestParser.DOLLAR, 0); }
		public Compound_atomic_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_atomic_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterCompound_atomic_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitCompound_atomic_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_atomic_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_atomic_modifierContext compound_atomic_modifier() {
		Compound_atomic_modifierContext _localctx = new Compound_atomic_modifierContext(Context, State);
		EnterRule(_localctx, 10, RULE_compound_atomic_modifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			Match(DOLLAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_atomic_modifierContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PestParser.NOT, 0); }
		public Non_atomic_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_atomic_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterNon_atomic_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitNon_atomic_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNon_atomic_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Non_atomic_modifierContext non_atomic_modifier() {
		Non_atomic_modifierContext _localctx = new Non_atomic_modifierContext(Context, State);
		EnterRule(_localctx, 12, RULE_non_atomic_modifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			Match(NOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Infix_operatorContext[] infix_operator() {
			return GetRuleContexts<Infix_operatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Infix_operatorContext infix_operator(int i) {
			return GetRuleContext<Infix_operatorContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			term();
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TILDE || _la==VBAR) {
				{
				{
				State = 85;
				infix_operator();
				State = 86;
				term();
				}
				}
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public NodeContext node() {
			return GetRuleContext<NodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prefix_operatorContext[] prefix_operator() {
			return GetRuleContexts<Prefix_operatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prefix_operatorContext prefix_operator(int i) {
			return GetRuleContext<Prefix_operatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_operatorContext[] postfix_operator() {
			return GetRuleContexts<Postfix_operatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_operatorContext postfix_operator(int i) {
			return GetRuleContext<Postfix_operatorContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 16, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NOT || _la==AMP) {
				{
				{
				State = 93;
				prefix_operator();
				}
				}
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 99;
			node();
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS) | (1L << OPENING_BRACE))) != 0)) {
				{
				{
				State = 100;
				postfix_operator();
				}
				}
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodeContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENING_PAREN() { return GetToken(PestParser.OPENING_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSING_PAREN() { return GetToken(PestParser.CLOSING_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TerminalContext terminal() {
			return GetRuleContext<TerminalContext>(0);
		}
		public NodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_node; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterNode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitNode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodeContext node() {
		NodeContext _localctx = new NodeContext(Context, State);
		EnterRule(_localctx, 18, RULE_node);
		try {
			State = 111;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPENING_PAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 106;
				Match(OPENING_PAREN);
				State = 107;
				expression();
				State = 108;
				Match(CLOSING_PAREN);
				}
				break;
			case PUSH:
			case PEEK:
			case IDENTIFIER:
			case STRING:
			case INSENSITIVE_STRING:
			case RANGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 110;
				terminal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminalContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public PushContext push() {
			return GetRuleContext<PushContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Peek_sliceContext peek_slice() {
			return GetRuleContext<Peek_sliceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PestParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(PestParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSENSITIVE_STRING() { return GetToken(PestParser.INSENSITIVE_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(PestParser.RANGE, 0); }
		public TerminalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterTerminal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitTerminal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminalContext terminal() {
		TerminalContext _localctx = new TerminalContext(Context, State);
		EnterRule(_localctx, 20, RULE_terminal);
		try {
			State = 119;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PUSH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 113;
				push();
				}
				break;
			case PEEK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 114;
				peek_slice();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 115;
				Match(IDENTIFIER);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 116;
				Match(STRING);
				}
				break;
			case INSENSITIVE_STRING:
				EnterOuterAlt(_localctx, 5);
				{
				State = 117;
				Match(INSENSITIVE_STRING);
				}
				break;
			case RANGE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 118;
				Match(RANGE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prefix_operatorContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Positive_predicate_operatorContext positive_predicate_operator() {
			return GetRuleContext<Positive_predicate_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Negative_predicate_operatorContext negative_predicate_operator() {
			return GetRuleContext<Negative_predicate_operatorContext>(0);
		}
		public Prefix_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefix_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterPrefix_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitPrefix_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefix_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Prefix_operatorContext prefix_operator() {
		Prefix_operatorContext _localctx = new Prefix_operatorContext(Context, State);
		EnterRule(_localctx, 22, RULE_prefix_operator);
		try {
			State = 123;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AMP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 121;
				positive_predicate_operator();
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122;
				negative_predicate_operator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Infix_operatorContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Sequence_operatorContext sequence_operator() {
			return GetRuleContext<Sequence_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Choice_operatorContext choice_operator() {
			return GetRuleContext<Choice_operatorContext>(0);
		}
		public Infix_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_infix_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterInfix_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitInfix_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfix_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Infix_operatorContext infix_operator() {
		Infix_operatorContext _localctx = new Infix_operatorContext(Context, State);
		EnterRule(_localctx, 24, RULE_infix_operator);
		try {
			State = 127;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TILDE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 125;
				sequence_operator();
				}
				break;
			case VBAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 126;
				choice_operator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_operatorContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Optional_operatorContext optional_operator() {
			return GetRuleContext<Optional_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Repeat_operatorContext repeat_operator() {
			return GetRuleContext<Repeat_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Repeat_once_operatorContext repeat_once_operator() {
			return GetRuleContext<Repeat_once_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Repeat_exactContext repeat_exact() {
			return GetRuleContext<Repeat_exactContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Repeat_minContext repeat_min() {
			return GetRuleContext<Repeat_minContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Repeat_maxContext repeat_max() {
			return GetRuleContext<Repeat_maxContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Repeat_min_maxContext repeat_min_max() {
			return GetRuleContext<Repeat_min_maxContext>(0);
		}
		public Postfix_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterPostfix_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitPostfix_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_operatorContext postfix_operator() {
		Postfix_operatorContext _localctx = new Postfix_operatorContext(Context, State);
		EnterRule(_localctx, 26, RULE_postfix_operator);
		try {
			State = 136;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 129;
				optional_operator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 130;
				repeat_operator();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 131;
				repeat_once_operator();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 132;
				repeat_exact();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 133;
				repeat_min();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 134;
				repeat_max();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 135;
				repeat_min_max();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Positive_predicate_operatorContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(PestParser.AMP, 0); }
		public Positive_predicate_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positive_predicate_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterPositive_predicate_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitPositive_predicate_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositive_predicate_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Positive_predicate_operatorContext positive_predicate_operator() {
		Positive_predicate_operatorContext _localctx = new Positive_predicate_operatorContext(Context, State);
		EnterRule(_localctx, 28, RULE_positive_predicate_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			Match(AMP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Negative_predicate_operatorContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PestParser.NOT, 0); }
		public Negative_predicate_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negative_predicate_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterNegative_predicate_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitNegative_predicate_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegative_predicate_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Negative_predicate_operatorContext negative_predicate_operator() {
		Negative_predicate_operatorContext _localctx = new Negative_predicate_operatorContext(Context, State);
		EnterRule(_localctx, 30, RULE_negative_predicate_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			Match(NOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sequence_operatorContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(PestParser.TILDE, 0); }
		public Sequence_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequence_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterSequence_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitSequence_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSequence_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sequence_operatorContext sequence_operator() {
		Sequence_operatorContext _localctx = new Sequence_operatorContext(Context, State);
		EnterRule(_localctx, 32, RULE_sequence_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			Match(TILDE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Choice_operatorContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VBAR() { return GetToken(PestParser.VBAR, 0); }
		public Choice_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_choice_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterChoice_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitChoice_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChoice_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Choice_operatorContext choice_operator() {
		Choice_operatorContext _localctx = new Choice_operatorContext(Context, State);
		EnterRule(_localctx, 34, RULE_choice_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			Match(VBAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Optional_operatorContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(PestParser.QUESTION, 0); }
		public Optional_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optional_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterOptional_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitOptional_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptional_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Optional_operatorContext optional_operator() {
		Optional_operatorContext _localctx = new Optional_operatorContext(Context, State);
		EnterRule(_localctx, 36, RULE_optional_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(QUESTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeat_operatorContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PestParser.STAR, 0); }
		public Repeat_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterRepeat_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitRepeat_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeat_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Repeat_operatorContext repeat_operator() {
		Repeat_operatorContext _localctx = new Repeat_operatorContext(Context, State);
		EnterRule(_localctx, 38, RULE_repeat_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			Match(STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeat_once_operatorContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(PestParser.PLUS, 0); }
		public Repeat_once_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat_once_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterRepeat_once_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitRepeat_once_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeat_once_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Repeat_once_operatorContext repeat_once_operator() {
		Repeat_once_operatorContext _localctx = new Repeat_once_operatorContext(Context, State);
		EnterRule(_localctx, 40, RULE_repeat_once_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			Match(PLUS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeat_exactContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENING_BRACE() { return GetToken(PestParser.OPENING_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(PestParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSING_BRACE() { return GetToken(PestParser.CLOSING_BRACE, 0); }
		public Repeat_exactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat_exact; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterRepeat_exact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitRepeat_exact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeat_exact(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Repeat_exactContext repeat_exact() {
		Repeat_exactContext _localctx = new Repeat_exactContext(Context, State);
		EnterRule(_localctx, 42, RULE_repeat_exact);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			Match(OPENING_BRACE);
			State = 153;
			Match(NUMBER);
			State = 154;
			Match(CLOSING_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeat_minContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENING_BRACE() { return GetToken(PestParser.OPENING_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(PestParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PestParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSING_BRACE() { return GetToken(PestParser.CLOSING_BRACE, 0); }
		public Repeat_minContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat_min; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterRepeat_min(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitRepeat_min(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeat_min(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Repeat_minContext repeat_min() {
		Repeat_minContext _localctx = new Repeat_minContext(Context, State);
		EnterRule(_localctx, 44, RULE_repeat_min);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			Match(OPENING_BRACE);
			State = 157;
			Match(NUMBER);
			State = 158;
			Match(COMMA);
			State = 159;
			Match(CLOSING_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeat_maxContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENING_BRACE() { return GetToken(PestParser.OPENING_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PestParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(PestParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSING_BRACE() { return GetToken(PestParser.CLOSING_BRACE, 0); }
		public Repeat_maxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat_max; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterRepeat_max(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitRepeat_max(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeat_max(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Repeat_maxContext repeat_max() {
		Repeat_maxContext _localctx = new Repeat_maxContext(Context, State);
		EnterRule(_localctx, 46, RULE_repeat_max);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			Match(OPENING_BRACE);
			State = 162;
			Match(COMMA);
			State = 163;
			Match(NUMBER);
			State = 164;
			Match(CLOSING_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeat_min_maxContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENING_BRACE() { return GetToken(PestParser.OPENING_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(PestParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(PestParser.NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PestParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSING_BRACE() { return GetToken(PestParser.CLOSING_BRACE, 0); }
		public Repeat_min_maxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat_min_max; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterRepeat_min_max(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitRepeat_min_max(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeat_min_max(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Repeat_min_maxContext repeat_min_max() {
		Repeat_min_maxContext _localctx = new Repeat_min_maxContext(Context, State);
		EnterRule(_localctx, 48, RULE_repeat_min_max);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			Match(OPENING_BRACE);
			State = 167;
			Match(NUMBER);
			State = 168;
			Match(COMMA);
			State = 169;
			Match(NUMBER);
			State = 170;
			Match(CLOSING_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PushContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUSH() { return GetToken(PestParser.PUSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENING_PAREN() { return GetToken(PestParser.OPENING_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSING_PAREN() { return GetToken(PestParser.CLOSING_PAREN, 0); }
		public PushContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_push; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterPush(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitPush(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPush(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PushContext push() {
		PushContext _localctx = new PushContext(Context, State);
		EnterRule(_localctx, 50, RULE_push);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			Match(PUSH);
			State = 173;
			Match(OPENING_PAREN);
			State = 174;
			expression();
			State = 175;
			Match(CLOSING_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Peek_sliceContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PEEK() { return GetToken(PestParser.PEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENING_BRACK() { return GetToken(PestParser.OPENING_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE_OPERATOR() { return GetToken(PestParser.RANGE_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSING_BRACK() { return GetToken(PestParser.CLOSING_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTEGER() { return GetTokens(PestParser.INTEGER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER(int i) {
			return GetToken(PestParser.INTEGER, i);
		}
		public Peek_sliceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_peek_slice; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterPeek_slice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitPeek_slice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPeek_slice(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Peek_sliceContext peek_slice() {
		Peek_sliceContext _localctx = new Peek_sliceContext(Context, State);
		EnterRule(_localctx, 52, RULE_peek_slice);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			Match(PEEK);
			State = 178;
			Match(OPENING_BRACK);
			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTEGER) {
				{
				State = 179;
				Match(INTEGER);
				}
			}

			State = 182;
			Match(RANGE_OPERATOR);
			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTEGER) {
				{
				State = 183;
				Match(INTEGER);
				}
			}

			State = 186;
			Match(CLOSING_BRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\'', '\xBF', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x3', '\x2', '\x6', 
		'\x2', ':', '\n', '\x2', '\r', '\x2', '\xE', '\x2', ';', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'\x43', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', 
		'\x4', 'M', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '[', '\n', '\t', '\f', 
		'\t', '\xE', '\t', '^', '\v', '\t', '\x3', '\n', '\a', '\n', '\x61', '\n', 
		'\n', '\f', '\n', '\xE', '\n', '\x64', '\v', '\n', '\x3', '\n', '\x3', 
		'\n', '\a', '\n', 'h', '\n', '\n', '\f', '\n', '\xE', '\n', 'k', '\v', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x5', '\v', 'r', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 'z', '\n', '\f', '\x3', '\r', 
		'\x3', '\r', '\x5', '\r', '~', '\n', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\x82', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\x8B', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', 
		'\xB7', '\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\xBB', 
		'\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x2', '\x2', 
		'\x1D', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x2', '\x2', '\x2', '\xBB', 
		'\x2', '\x39', '\x3', '\x2', '\x2', '\x2', '\x4', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x6', 'L', '\x3', '\x2', '\x2', '\x2', '\b', 'N', '\x3', '\x2', 
		'\x2', '\x2', '\n', 'P', '\x3', '\x2', '\x2', '\x2', '\f', 'R', '\x3', 
		'\x2', '\x2', '\x2', '\xE', 'T', '\x3', '\x2', '\x2', '\x2', '\x10', 'V', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x62', '\x3', '\x2', '\x2', '\x2', 
		'\x14', 'q', '\x3', '\x2', '\x2', '\x2', '\x16', 'y', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '}', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\x8C', '\x3', '\x2', '\x2', '\x2', ' ', '\x8E', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\x90', '\x3', '\x2', '\x2', '\x2', '$', '\x92', '\x3', '\x2', 
		'\x2', '\x2', '&', '\x94', '\x3', '\x2', '\x2', '\x2', '(', '\x96', '\x3', 
		'\x2', '\x2', '\x2', '*', '\x98', '\x3', '\x2', '\x2', '\x2', ',', '\x9A', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\x32', '\xA8', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\xAE', '\x3', '\x2', '\x2', '\x2', '\x36', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\x38', ':', '\x5', '\x4', '\x3', '\x2', '\x39', 
		'\x38', '\x3', '\x2', '\x2', '\x2', ':', ';', '\x3', '\x2', '\x2', '\x2', 
		';', '\x39', '\x3', '\x2', '\x2', '\x2', ';', '<', '\x3', '\x2', '\x2', 
		'\x2', '<', '=', '\x3', '\x2', '\x2', '\x2', '=', '>', '\a', '\x2', '\x2', 
		'\x3', '>', '\x3', '\x3', '\x2', '\x2', '\x2', '?', '@', '\a', '\x19', 
		'\x2', '\x2', '@', '\x42', '\a', '\r', '\x2', '\x2', '\x41', '\x43', '\x5', 
		'\x6', '\x4', '\x2', '\x42', '\x41', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\x3', '\x2', '\x2', 
		'\x2', '\x44', '\x45', '\a', '\xE', '\x2', '\x2', '\x45', '\x46', '\x5', 
		'\x10', '\t', '\x2', '\x46', 'G', '\a', '\xF', '\x2', '\x2', 'G', '\x5', 
		'\x3', '\x2', '\x2', '\x2', 'H', 'M', '\x5', '\b', '\x5', '\x2', 'I', 
		'M', '\x5', '\n', '\x6', '\x2', 'J', 'M', '\x5', '\f', '\a', '\x2', 'K', 
		'M', '\x5', '\xE', '\b', '\x2', 'L', 'H', '\x3', '\x2', '\x2', '\x2', 
		'L', 'I', '\x3', '\x2', '\x2', '\x2', 'L', 'J', '\x3', '\x2', '\x2', '\x2', 
		'L', 'K', '\x3', '\x2', '\x2', '\x2', 'M', '\a', '\x3', '\x2', '\x2', 
		'\x2', 'N', 'O', '\a', '\x3', '\x2', '\x2', 'O', '\t', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'Q', '\a', '\x4', '\x2', '\x2', 'Q', '\v', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'S', '\a', '\x5', '\x2', '\x2', 'S', '\r', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'U', '\a', '\x6', '\x2', '\x2', 'U', '\xF', '\x3', '\x2', 
		'\x2', '\x2', 'V', '\\', '\x5', '\x12', '\n', '\x2', 'W', 'X', '\x5', 
		'\x1A', '\xE', '\x2', 'X', 'Y', '\x5', '\x12', '\n', '\x2', 'Y', '[', 
		'\x3', '\x2', '\x2', '\x2', 'Z', 'W', '\x3', '\x2', '\x2', '\x2', '[', 
		'^', '\x3', '\x2', '\x2', '\x2', '\\', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'\\', ']', '\x3', '\x2', '\x2', '\x2', ']', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '^', '\\', '\x3', '\x2', '\x2', '\x2', '_', '\x61', '\x5', '\x18', 
		'\r', '\x2', '`', '_', '\x3', '\x2', '\x2', '\x2', '\x61', '\x64', '\x3', 
		'\x2', '\x2', '\x2', '\x62', '`', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x63', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x64', '\x62', '\x3', '\x2', '\x2', '\x2', '\x65', 'i', '\x5', 
		'\x14', '\v', '\x2', '\x66', 'h', '\x5', '\x1C', '\xF', '\x2', 'g', '\x66', 
		'\x3', '\x2', '\x2', '\x2', 'h', 'k', '\x3', '\x2', '\x2', '\x2', 'i', 
		'g', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\x3', '\x2', '\x2', '\x2', 
		'j', '\x13', '\x3', '\x2', '\x2', '\x2', 'k', 'i', '\x3', '\x2', '\x2', 
		'\x2', 'l', 'm', '\a', '\x10', '\x2', '\x2', 'm', 'n', '\x5', '\x10', 
		'\t', '\x2', 'n', 'o', '\a', '\x11', '\x2', '\x2', 'o', 'r', '\x3', '\x2', 
		'\x2', '\x2', 'p', 'r', '\x5', '\x16', '\f', '\x2', 'q', 'l', '\x3', '\x2', 
		'\x2', '\x2', 'q', 'p', '\x3', '\x2', '\x2', '\x2', 'r', '\x15', '\x3', 
		'\x2', '\x2', '\x2', 's', 'z', '\x5', '\x34', '\x1B', '\x2', 't', 'z', 
		'\x5', '\x36', '\x1C', '\x2', 'u', 'z', '\a', '\x19', '\x2', '\x2', 'v', 
		'z', '\a', '\x1A', '\x2', '\x2', 'w', 'z', '\a', '\x1B', '\x2', '\x2', 
		'x', 'z', '\a', '\x1C', '\x2', '\x2', 'y', 's', '\x3', '\x2', '\x2', '\x2', 
		'y', 't', '\x3', '\x2', '\x2', '\x2', 'y', 'u', '\x3', '\x2', '\x2', '\x2', 
		'y', 'v', '\x3', '\x2', '\x2', '\x2', 'y', 'w', '\x3', '\x2', '\x2', '\x2', 
		'y', 'x', '\x3', '\x2', '\x2', '\x2', 'z', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '{', '~', '\x5', '\x1E', '\x10', '\x2', '|', '~', '\x5', ' ', '\x11', 
		'\x2', '}', '{', '\x3', '\x2', '\x2', '\x2', '}', '|', '\x3', '\x2', '\x2', 
		'\x2', '~', '\x19', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x82', '\x5', 
		'\"', '\x12', '\x2', '\x80', '\x82', '\x5', '$', '\x13', '\x2', '\x81', 
		'\x7F', '\x3', '\x2', '\x2', '\x2', '\x81', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x83', '\x8B', '\x5', 
		'&', '\x14', '\x2', '\x84', '\x8B', '\x5', '(', '\x15', '\x2', '\x85', 
		'\x8B', '\x5', '*', '\x16', '\x2', '\x86', '\x8B', '\x5', ',', '\x17', 
		'\x2', '\x87', '\x8B', '\x5', '.', '\x18', '\x2', '\x88', '\x8B', '\x5', 
		'\x30', '\x19', '\x2', '\x89', '\x8B', '\x5', '\x32', '\x1A', '\x2', '\x8A', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x85', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x8A', '\x87', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'\x88', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x8B', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\a', 
		'\a', '\x2', '\x2', '\x8D', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x8E', 
		'\x8F', '\a', '\x6', '\x2', '\x2', '\x8F', '!', '\x3', '\x2', '\x2', '\x2', 
		'\x90', '\x91', '\a', '\b', '\x2', '\x2', '\x91', '#', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x93', '\a', '\t', '\x2', '\x2', '\x93', '%', '\x3', '\x2', 
		'\x2', '\x2', '\x94', '\x95', '\a', '\n', '\x2', '\x2', '\x95', '\'', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\a', '\v', '\x2', '\x2', 
		'\x97', ')', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\a', '\f', '\x2', 
		'\x2', '\x99', '+', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\a', 
		'\xE', '\x2', '\x2', '\x9B', '\x9C', '\a', '\x16', '\x2', '\x2', '\x9C', 
		'\x9D', '\a', '\xF', '\x2', '\x2', '\x9D', '-', '\x3', '\x2', '\x2', '\x2', 
		'\x9E', '\x9F', '\a', '\xE', '\x2', '\x2', '\x9F', '\xA0', '\a', '\x16', 
		'\x2', '\x2', '\xA0', '\xA1', '\a', '\x18', '\x2', '\x2', '\xA1', '\xA2', 
		'\a', '\xF', '\x2', '\x2', '\xA2', '/', '\x3', '\x2', '\x2', '\x2', '\xA3', 
		'\xA4', '\a', '\xE', '\x2', '\x2', '\xA4', '\xA5', '\a', '\x18', '\x2', 
		'\x2', '\xA5', '\xA6', '\a', '\x16', '\x2', '\x2', '\xA6', '\xA7', '\a', 
		'\xF', '\x2', '\x2', '\xA7', '\x31', '\x3', '\x2', '\x2', '\x2', '\xA8', 
		'\xA9', '\a', '\xE', '\x2', '\x2', '\xA9', '\xAA', '\a', '\x16', '\x2', 
		'\x2', '\xAA', '\xAB', '\a', '\x18', '\x2', '\x2', '\xAB', '\xAC', '\a', 
		'\x16', '\x2', '\x2', '\xAC', '\xAD', '\a', '\xF', '\x2', '\x2', '\xAD', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAF', '\a', '\x14', '\x2', 
		'\x2', '\xAF', '\xB0', '\a', '\x10', '\x2', '\x2', '\xB0', '\xB1', '\x5', 
		'\x10', '\t', '\x2', '\xB1', '\xB2', '\a', '\x11', '\x2', '\x2', '\xB2', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\a', '\x15', '\x2', 
		'\x2', '\xB4', '\xB6', '\a', '\x12', '\x2', '\x2', '\xB5', '\xB7', '\a', 
		'\x17', '\x2', '\x2', '\xB6', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xB7', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\x3', '\x2', '\x2', 
		'\x2', '\xB8', '\xBA', '\a', '$', '\x2', '\x2', '\xB9', '\xBB', '\a', 
		'\x17', '\x2', '\x2', '\xBA', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xBA', 
		'\xBB', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBC', '\x3', '\x2', '\x2', 
		'\x2', '\xBC', '\xBD', '\a', '\x13', '\x2', '\x2', '\xBD', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\xF', ';', '\x42', 'L', '\\', '\x62', 'i', 'q', 
		'y', '}', '\x81', '\x8A', '\xB6', '\xBA',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace LanguageServer
