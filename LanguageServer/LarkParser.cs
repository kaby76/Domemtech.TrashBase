//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from LarkParser.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LanguageServer {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class LarkParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COLON=1, LC=2, RC=3, LP=4, RP=5, LB=6, RB=7, COMMA=8, DOT=9, ARROW=10, 
		IGNORE=11, IMPORT=12, OVERRIDE=13, DECLARE=14, DD=15, SQ=16, VBAR=17, 
		OP=18, RULE=19, TOKEN=20, STRING=21, REGEXP=22, NL=23, NUMBER=24, WS_INLINE=25, 
		COMMENT=26;
	public const int
		RULE_start = 0, RULE_item = 1, RULE_rule_ = 2, RULE_token = 3, RULE_rule_params = 4, 
		RULE_token_params = 5, RULE_priority = 6, RULE_statement = 7, RULE_import_path = 8, 
		RULE_name_list = 9, RULE_expansions = 10, RULE_alias = 11, RULE_expansion = 12, 
		RULE_expr = 13, RULE_atom = 14, RULE_value = 15, RULE_name = 16;
	public static readonly string[] ruleNames = {
		"start", "item", "rule_", "token", "rule_params", "token_params", "priority", 
		"statement", "import_path", "name_list", "expansions", "alias", "expansion", 
		"expr", "atom", "value", "name"
	};

	private static readonly string[] _LiteralNames = {
		null, "':'", "'{'", "'}'", "'('", "')'", "'['", "']'", "','", "'.'", "'->'", 
		"'%ignore'", "'%import'", "'%override'", "'%declare'", "'..'", "'~'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COLON", "LC", "RC", "LP", "RP", "LB", "RB", "COMMA", "DOT", "ARROW", 
		"IGNORE", "IMPORT", "OVERRIDE", "DECLARE", "DD", "SQ", "VBAR", "OP", "RULE", 
		"TOKEN", "STRING", "REGEXP", "NL", "NUMBER", "WS_INLINE", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LarkParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LarkParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LarkParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LarkParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(LarkParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(LarkParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(LarkParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext[] item() {
			return GetRuleContexts<ItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext item(int i) {
			return GetRuleContext<ItemContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 35;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IGNORE) | (1L << IMPORT) | (1L << OVERRIDE) | (1L << DECLARE) | (1L << RULE) | (1L << TOKEN))) != 0)) {
						{
						State = 34;
						item();
						}
					}

					State = 37;
					Match(NL);
					}
					} 
				}
				State = 42;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IGNORE) | (1L << IMPORT) | (1L << OVERRIDE) | (1L << DECLARE) | (1L << RULE) | (1L << TOKEN))) != 0)) {
				{
				State = 43;
				item();
				}
			}

			State = 46;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Rule_Context rule_() {
			return GetRuleContext<Rule_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TokenContext token() {
			return GetRuleContext<TokenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.EnterItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.ExitItem(this);
		}
	}

	[RuleVersion(0)]
	public ItemContext item() {
		ItemContext _localctx = new ItemContext(Context, State);
		EnterRule(_localctx, 2, RULE_item);
		try {
			State = 51;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RULE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48;
				rule_();
				}
				break;
			case TOKEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 49;
				token();
				}
				break;
			case IGNORE:
			case IMPORT:
			case OVERRIDE:
			case DECLARE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 50;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_Context : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE() { return GetToken(LarkParser.RULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rule_paramsContext rule_params() {
			return GetRuleContext<Rule_paramsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(LarkParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpansionsContext expansions() {
			return GetRuleContext<ExpansionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PriorityContext priority() {
			return GetRuleContext<PriorityContext>(0);
		}
		public Rule_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.EnterRule_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.ExitRule_(this);
		}
	}

	[RuleVersion(0)]
	public Rule_Context rule_() {
		Rule_Context _localctx = new Rule_Context(Context, State);
		EnterRule(_localctx, 4, RULE_rule_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			Match(RULE);
			State = 54;
			rule_params();
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 55;
				priority();
				}
			}

			State = 58;
			Match(COLON);
			State = 59;
			expansions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TokenContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN() { return GetToken(LarkParser.TOKEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Token_paramsContext token_params() {
			return GetRuleContext<Token_paramsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(LarkParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpansionsContext expansions() {
			return GetRuleContext<ExpansionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PriorityContext priority() {
			return GetRuleContext<PriorityContext>(0);
		}
		public TokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_token; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.EnterToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.ExitToken(this);
		}
	}

	[RuleVersion(0)]
	public TokenContext token() {
		TokenContext _localctx = new TokenContext(Context, State);
		EnterRule(_localctx, 6, RULE_token);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			Match(TOKEN);
			State = 62;
			token_params();
			State = 64;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 63;
				priority();
				}
			}

			State = 66;
			Match(COLON);
			State = 67;
			expansions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_paramsContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LC() { return GetToken(LarkParser.LC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RULE() { return GetTokens(LarkParser.RULE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE(int i) {
			return GetToken(LarkParser.RULE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RC() { return GetToken(LarkParser.RC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LarkParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LarkParser.COMMA, i);
		}
		public Rule_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.EnterRule_params(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.ExitRule_params(this);
		}
	}

	[RuleVersion(0)]
	public Rule_paramsContext rule_params() {
		Rule_paramsContext _localctx = new Rule_paramsContext(Context, State);
		EnterRule(_localctx, 8, RULE_rule_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LC) {
				{
				State = 69;
				Match(LC);
				State = 70;
				Match(RULE);
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 71;
					Match(COMMA);
					State = 72;
					Match(RULE);
					}
					}
					State = 77;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 78;
				Match(RC);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Token_paramsContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LC() { return GetToken(LarkParser.LC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOKEN() { return GetTokens(LarkParser.TOKEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN(int i) {
			return GetToken(LarkParser.TOKEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RC() { return GetToken(LarkParser.RC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LarkParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LarkParser.COMMA, i);
		}
		public Token_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_token_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.EnterToken_params(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.ExitToken_params(this);
		}
	}

	[RuleVersion(0)]
	public Token_paramsContext token_params() {
		Token_paramsContext _localctx = new Token_paramsContext(Context, State);
		EnterRule(_localctx, 10, RULE_token_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LC) {
				{
				State = 81;
				Match(LC);
				State = 82;
				Match(TOKEN);
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 83;
					Match(COMMA);
					State = 84;
					Match(TOKEN);
					}
					}
					State = 89;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 90;
				Match(RC);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PriorityContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LarkParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(LarkParser.NUMBER, 0); }
		public PriorityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_priority; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.EnterPriority(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.ExitPriority(this);
		}
	}

	[RuleVersion(0)]
	public PriorityContext priority() {
		PriorityContext _localctx = new PriorityContext(Context, State);
		EnterRule(_localctx, 12, RULE_priority);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(DOT);
			State = 94;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(LarkParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpansionsContext expansions() {
			return GetRuleContext<ExpansionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(LarkParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Import_pathContext import_path() {
			return GetRuleContext<Import_pathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(LarkParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Name_listContext name_list() {
			return GetRuleContext<Name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDE() { return GetToken(LarkParser.OVERRIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rule_Context rule_() {
			return GetRuleContext<Rule_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(LarkParser.DECLARE, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_statement);
		int _la;
		try {
			State = 116;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 96;
				Match(IGNORE);
				State = 97;
				expansions();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 98;
				Match(IMPORT);
				State = 99;
				import_path();
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ARROW) {
					{
					State = 100;
					Match(ARROW);
					State = 101;
					name();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 104;
				Match(IMPORT);
				State = 105;
				import_path();
				State = 106;
				name_list();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 108;
				Match(OVERRIDE);
				State = 109;
				rule_();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 110;
				Match(DECLARE);
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 111;
					name();
					}
					}
					State = 114;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==RULE || _la==TOKEN );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_pathContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(LarkParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(LarkParser.DOT, i);
		}
		public Import_pathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_path; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.EnterImport_path(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.ExitImport_path(this);
		}
	}

	[RuleVersion(0)]
	public Import_pathContext import_path() {
		Import_pathContext _localctx = new Import_pathContext(Context, State);
		EnterRule(_localctx, 16, RULE_import_path);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 118;
				Match(DOT);
				}
			}

			State = 121;
			name();
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 122;
				Match(DOT);
				State = 123;
				name();
				}
				}
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Name_listContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(LarkParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(LarkParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LarkParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LarkParser.COMMA, i);
		}
		public Name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.EnterName_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.ExitName_list(this);
		}
	}

	[RuleVersion(0)]
	public Name_listContext name_list() {
		Name_listContext _localctx = new Name_listContext(Context, State);
		EnterRule(_localctx, 18, RULE_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			Match(LP);
			State = 130;
			name();
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 131;
				Match(COMMA);
				State = 132;
				name();
				}
				}
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 138;
			Match(RP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpansionsContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext[] alias() {
			return GetRuleContexts<AliasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias(int i) {
			return GetRuleContext<AliasContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VBAR() { return GetTokens(LarkParser.VBAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VBAR(int i) {
			return GetToken(LarkParser.VBAR, i);
		}
		public ExpansionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expansions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.EnterExpansions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.ExitExpansions(this);
		}
	}

	[RuleVersion(0)]
	public ExpansionsContext expansions() {
		ExpansionsContext _localctx = new ExpansionsContext(Context, State);
		EnterRule(_localctx, 20, RULE_expansions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			alias();
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==VBAR) {
				{
				{
				State = 141;
				Match(VBAR);
				State = 142;
				alias();
				}
				}
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ExpansionContext expansion() {
			return GetRuleContext<ExpansionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(LarkParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE() { return GetToken(LarkParser.RULE, 0); }
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.EnterAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.ExitAlias(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 22, RULE_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			expansion();
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARROW) {
				{
				State = 149;
				Match(ARROW);
				State = 150;
				Match(RULE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpansionContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExpansionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expansion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.EnterExpansion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.ExitExpansion(this);
		}
	}

	[RuleVersion(0)]
	public ExpansionContext expansion() {
		ExpansionContext _localctx = new ExpansionContext(Context, State);
		EnterRule(_localctx, 24, RULE_expansion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LP) | (1L << LB) | (1L << RULE) | (1L << TOKEN) | (1L << STRING) | (1L << REGEXP))) != 0)) {
				{
				{
				State = 153;
				expr();
				}
				}
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP() { return GetToken(LarkParser.OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQ() { return GetToken(LarkParser.SQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(LarkParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(LarkParser.NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DD() { return GetToken(LarkParser.DD, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 26, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			atom();
			State = 167;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OP:
				{
				State = 160;
				Match(OP);
				}
				break;
			case SQ:
				{
				State = 161;
				Match(SQ);
				State = 162;
				Match(NUMBER);
				State = 165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DD) {
					{
					State = 163;
					Match(DD);
					State = 164;
					Match(NUMBER);
					}
				}

				}
				break;
			case Eof:
			case LP:
			case RP:
			case LB:
			case RB:
			case ARROW:
			case VBAR:
			case RULE:
			case TOKEN:
			case STRING:
			case REGEXP:
			case NL:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(LarkParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpansionsContext expansions() {
			return GetRuleContext<ExpansionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(LarkParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LB() { return GetToken(LarkParser.LB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RB() { return GetToken(LarkParser.RB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 28, RULE_atom);
		try {
			State = 178;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 169;
				Match(LP);
				State = 170;
				expansions();
				State = 171;
				Match(RP);
				}
				break;
			case LB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 173;
				Match(LB);
				State = 174;
				expansions();
				State = 175;
				Match(RB);
				}
				break;
			case RULE:
			case TOKEN:
			case STRING:
			case REGEXP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 177;
				value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(LarkParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(LarkParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DD() { return GetToken(LarkParser.DD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP() { return GetToken(LarkParser.REGEXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LC() { return GetToken(LarkParser.LC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RC() { return GetToken(LarkParser.RC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LarkParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LarkParser.COMMA, i);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 30, RULE_value);
		int _la;
		try {
			State = 197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 180;
				Match(STRING);
				State = 181;
				Match(DD);
				State = 182;
				Match(STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 183;
				name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 184;
				_la = TokenStream.LA(1);
				if ( !(_la==STRING || _la==REGEXP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 185;
				name();
				State = 186;
				Match(LC);
				State = 187;
				value();
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 188;
					Match(COMMA);
					State = 189;
					value();
					}
					}
					State = 194;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 195;
				Match(RC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE() { return GetToken(LarkParser.RULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN() { return GetToken(LarkParser.TOKEN, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 32, RULE_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			_la = TokenStream.LA(1);
			if ( !(_la==RULE || _la==TOKEN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1C', '\xCC', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x3', '\x2', '\x5', 
		'\x2', '&', '\n', '\x2', '\x3', '\x2', '\a', '\x2', ')', '\n', '\x2', 
		'\f', '\x2', '\xE', '\x2', ',', '\v', '\x2', '\x3', '\x2', '\x5', '\x2', 
		'/', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '\x36', '\n', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', ';', '\n', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\x43', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'L', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', 'O', '\v', '\x6', '\x3', '\x6', 
		'\x5', '\x6', 'R', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\a', '\a', 'X', '\n', '\a', '\f', '\a', '\xE', '\a', '[', 
		'\v', '\a', '\x3', '\a', '\x5', '\a', '^', '\n', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', 'i', '\n', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x6', '\t', 's', '\n', '\t', '\r', '\t', '\xE', '\t', 't', 
		'\x5', '\t', 'w', '\n', '\t', '\x3', '\n', '\x5', '\n', 'z', '\n', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\x7F', '\n', '\n', 
		'\f', '\n', '\xE', '\n', '\x82', '\v', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\a', '\v', '\x88', '\n', '\v', '\f', '\v', 
		'\xE', '\v', '\x8B', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\a', '\f', '\x92', '\n', '\f', '\f', '\f', 
		'\xE', '\f', '\x95', '\v', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x5', '\r', '\x9A', '\n', '\r', '\x3', '\xE', '\a', '\xE', '\x9D', '\n', 
		'\xE', '\f', '\xE', '\xE', '\xE', '\xA0', '\v', '\xE', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\xA8', '\n', '\xF', '\x5', '\xF', '\xAA', '\n', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xB5', 
		'\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\a', '\x11', '\xC1', '\n', '\x11', '\f', '\x11', '\xE', 
		'\x11', '\xC4', '\v', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', 
		'\xC8', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x2', 
		'\x2', '\x13', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '\x2', '\x4', 
		'\x3', '\x2', '\x17', '\x18', '\x3', '\x2', '\x15', '\x16', '\x2', '\xDA', 
		'\x2', '*', '\x3', '\x2', '\x2', '\x2', '\x4', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x37', '\x3', '\x2', '\x2', '\x2', '\b', '?', '\x3', '\x2', 
		'\x2', '\x2', '\n', 'Q', '\x3', '\x2', '\x2', '\x2', '\f', ']', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '_', '\x3', '\x2', '\x2', '\x2', '\x10', 'v', 
		'\x3', '\x2', '\x2', '\x2', '\x12', 'y', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x16', '\x8E', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x96', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x9E', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\xB4', '\x3', '\x2', '\x2', '\x2', ' ', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\xC9', '\x3', '\x2', '\x2', '\x2', '$', '&', '\x5', '\x4', 
		'\x3', '\x2', '%', '$', '\x3', '\x2', '\x2', '\x2', '%', '&', '\x3', '\x2', 
		'\x2', '\x2', '&', '\'', '\x3', '\x2', '\x2', '\x2', '\'', ')', '\a', 
		'\x19', '\x2', '\x2', '(', '%', '\x3', '\x2', '\x2', '\x2', ')', ',', 
		'\x3', '\x2', '\x2', '\x2', '*', '(', '\x3', '\x2', '\x2', '\x2', '*', 
		'+', '\x3', '\x2', '\x2', '\x2', '+', '.', '\x3', '\x2', '\x2', '\x2', 
		',', '*', '\x3', '\x2', '\x2', '\x2', '-', '/', '\x5', '\x4', '\x3', '\x2', 
		'.', '-', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', 
		'/', '\x30', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\a', '\x2', 
		'\x2', '\x3', '\x31', '\x3', '\x3', '\x2', '\x2', '\x2', '\x32', '\x36', 
		'\x5', '\x6', '\x4', '\x2', '\x33', '\x36', '\x5', '\b', '\x5', '\x2', 
		'\x34', '\x36', '\x5', '\x10', '\t', '\x2', '\x35', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\x35', '\x33', '\x3', '\x2', '\x2', '\x2', '\x35', '\x34', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x37', '\x38', '\a', '\x15', '\x2', '\x2', '\x38', ':', '\x5', '\n', 
		'\x6', '\x2', '\x39', ';', '\x5', '\xE', '\b', '\x2', ':', '\x39', '\x3', 
		'\x2', '\x2', '\x2', ':', ';', '\x3', '\x2', '\x2', '\x2', ';', '<', '\x3', 
		'\x2', '\x2', '\x2', '<', '=', '\a', '\x3', '\x2', '\x2', '=', '>', '\x5', 
		'\x16', '\f', '\x2', '>', '\a', '\x3', '\x2', '\x2', '\x2', '?', '@', 
		'\a', '\x16', '\x2', '\x2', '@', '\x42', '\x5', '\f', '\a', '\x2', '\x41', 
		'\x43', '\x5', '\xE', '\b', '\x2', '\x42', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x42', '\x43', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\x3', 
		'\x2', '\x2', '\x2', '\x44', '\x45', '\a', '\x3', '\x2', '\x2', '\x45', 
		'\x46', '\x5', '\x16', '\f', '\x2', '\x46', '\t', '\x3', '\x2', '\x2', 
		'\x2', 'G', 'H', '\a', '\x4', '\x2', '\x2', 'H', 'M', '\a', '\x15', '\x2', 
		'\x2', 'I', 'J', '\a', '\n', '\x2', '\x2', 'J', 'L', '\a', '\x15', '\x2', 
		'\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 'L', 'O', '\x3', '\x2', '\x2', 
		'\x2', 'M', 'K', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x3', '\x2', '\x2', 
		'\x2', 'N', 'P', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'R', '\a', '\x5', '\x2', '\x2', 'Q', 'G', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 'R', '\v', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'T', '\a', '\x4', '\x2', '\x2', 'T', 'Y', '\a', '\x16', 
		'\x2', '\x2', 'U', 'V', '\a', '\n', '\x2', '\x2', 'V', 'X', '\a', '\x16', 
		'\x2', '\x2', 'W', 'U', '\x3', '\x2', '\x2', '\x2', 'X', '[', '\x3', '\x2', 
		'\x2', '\x2', 'Y', 'W', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\\', '\x3', '\x2', '\x2', '\x2', '[', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '\\', '^', '\a', '\x5', '\x2', '\x2', ']', 'S', '\x3', 
		'\x2', '\x2', '\x2', ']', '^', '\x3', '\x2', '\x2', '\x2', '^', '\r', 
		'\x3', '\x2', '\x2', '\x2', '_', '`', '\a', '\v', '\x2', '\x2', '`', '\x61', 
		'\a', '\x1A', '\x2', '\x2', '\x61', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x63', '\a', '\r', '\x2', '\x2', '\x63', 'w', '\x5', '\x16', 
		'\f', '\x2', '\x64', '\x65', '\a', '\xE', '\x2', '\x2', '\x65', 'h', '\x5', 
		'\x12', '\n', '\x2', '\x66', 'g', '\a', '\f', '\x2', '\x2', 'g', 'i', 
		'\x5', '\"', '\x12', '\x2', 'h', '\x66', '\x3', '\x2', '\x2', '\x2', 'h', 
		'i', '\x3', '\x2', '\x2', '\x2', 'i', 'w', '\x3', '\x2', '\x2', '\x2', 
		'j', 'k', '\a', '\xE', '\x2', '\x2', 'k', 'l', '\x5', '\x12', '\n', '\x2', 
		'l', 'm', '\x5', '\x14', '\v', '\x2', 'm', 'w', '\x3', '\x2', '\x2', '\x2', 
		'n', 'o', '\a', '\xF', '\x2', '\x2', 'o', 'w', '\x5', '\x6', '\x4', '\x2', 
		'p', 'r', '\a', '\x10', '\x2', '\x2', 'q', 's', '\x5', '\"', '\x12', '\x2', 
		'r', 'q', '\x3', '\x2', '\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', '\x2', 
		't', 'r', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\x3', '\x2', '\x2', '\x2', 
		'u', 'w', '\x3', '\x2', '\x2', '\x2', 'v', '\x62', '\x3', '\x2', '\x2', 
		'\x2', 'v', '\x64', '\x3', '\x2', '\x2', '\x2', 'v', 'j', '\x3', '\x2', 
		'\x2', '\x2', 'v', 'n', '\x3', '\x2', '\x2', '\x2', 'v', 'p', '\x3', '\x2', 
		'\x2', '\x2', 'w', '\x11', '\x3', '\x2', '\x2', '\x2', 'x', 'z', '\a', 
		'\v', '\x2', '\x2', 'y', 'x', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x3', 
		'\x2', '\x2', '\x2', 'z', '{', '\x3', '\x2', '\x2', '\x2', '{', '\x80', 
		'\x5', '\"', '\x12', '\x2', '|', '}', '\a', '\v', '\x2', '\x2', '}', '\x7F', 
		'\x5', '\"', '\x12', '\x2', '~', '|', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '\x80', '~', '\x3', '\x2', '\x2', 
		'\x2', '\x80', '\x81', '\x3', '\x2', '\x2', '\x2', '\x81', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x82', '\x80', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'\x84', '\a', '\x6', '\x2', '\x2', '\x84', '\x89', '\x5', '\"', '\x12', 
		'\x2', '\x85', '\x86', '\a', '\n', '\x2', '\x2', '\x86', '\x88', '\x5', 
		'\"', '\x12', '\x2', '\x87', '\x85', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x89', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x89', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x8B', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x8D', '\a', '\a', '\x2', '\x2', '\x8D', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x8E', '\x93', '\x5', '\x18', '\r', '\x2', '\x8F', '\x90', '\a', 
		'\x13', '\x2', '\x2', '\x90', '\x92', '\x5', '\x18', '\r', '\x2', '\x91', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x92', '\x95', '\x3', '\x2', '\x2', 
		'\x2', '\x93', '\x91', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '\x17', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\x96', '\x99', '\x5', '\x1A', '\xE', 
		'\x2', '\x97', '\x98', '\a', '\f', '\x2', '\x2', '\x98', '\x9A', '\a', 
		'\x15', '\x2', '\x2', '\x99', '\x97', '\x3', '\x2', '\x2', '\x2', '\x99', 
		'\x9A', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x9B', '\x9D', '\x5', '\x1C', '\xF', '\x2', '\x9C', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\x9D', '\xA0', '\x3', '\x2', '\x2', '\x2', '\x9E', 
		'\x9C', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\x9F', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x9E', '\x3', 
		'\x2', '\x2', '\x2', '\xA1', '\xA9', '\x5', '\x1E', '\x10', '\x2', '\xA2', 
		'\xAA', '\a', '\x14', '\x2', '\x2', '\xA3', '\xA4', '\a', '\x12', '\x2', 
		'\x2', '\xA4', '\xA7', '\a', '\x1A', '\x2', '\x2', '\xA5', '\xA6', '\a', 
		'\x11', '\x2', '\x2', '\xA6', '\xA8', '\a', '\x1A', '\x2', '\x2', '\xA7', 
		'\xA5', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', '\x3', '\x2', '\x2', 
		'\x2', '\xA8', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xA2', '\x3', 
		'\x2', '\x2', '\x2', '\xA9', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA9', 
		'\xAA', '\x3', '\x2', '\x2', '\x2', '\xAA', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\xAB', '\xAC', '\a', '\x6', '\x2', '\x2', '\xAC', '\xAD', '\x5', 
		'\x16', '\f', '\x2', '\xAD', '\xAE', '\a', '\a', '\x2', '\x2', '\xAE', 
		'\xB5', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', '\a', '\b', '\x2', 
		'\x2', '\xB0', '\xB1', '\x5', '\x16', '\f', '\x2', '\xB1', '\xB2', '\a', 
		'\t', '\x2', '\x2', '\xB2', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB3', 
		'\xB5', '\x5', ' ', '\x11', '\x2', '\xB4', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '\xB4', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xB5', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xB7', '\a', '\x17', '\x2', '\x2', '\xB7', '\xB8', '\a', '\x11', '\x2', 
		'\x2', '\xB8', '\xC8', '\a', '\x17', '\x2', '\x2', '\xB9', '\xC8', '\x5', 
		'\"', '\x12', '\x2', '\xBA', '\xC8', '\t', '\x2', '\x2', '\x2', '\xBB', 
		'\xBC', '\x5', '\"', '\x12', '\x2', '\xBC', '\xBD', '\a', '\x4', '\x2', 
		'\x2', '\xBD', '\xC2', '\x5', ' ', '\x11', '\x2', '\xBE', '\xBF', '\a', 
		'\n', '\x2', '\x2', '\xBF', '\xC1', '\x5', ' ', '\x11', '\x2', '\xC0', 
		'\xBE', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC4', '\x3', '\x2', '\x2', 
		'\x2', '\xC2', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\x3', 
		'\x2', '\x2', '\x2', '\xC3', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC4', 
		'\xC2', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\a', '\x5', '\x2', 
		'\x2', '\xC6', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xB6', '\x3', 
		'\x2', '\x2', '\x2', '\xC7', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xC7', 
		'\xBA', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xBB', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '!', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\t', 
		'\x3', '\x2', '\x2', '\xCA', '#', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'%', '*', '.', '\x35', ':', '\x42', 'M', 'Q', 'Y', ']', 'h', 't', 'v', 
		'y', '\x80', '\x89', '\x93', '\x99', '\x9E', '\xA7', '\xA9', '\xB4', '\xC2', 
		'\xC7',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace LanguageServer
