//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ANTLRv2Parser.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LanguageServer {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class ANTLRv2Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DOC_COMMENT=1, PARSER=2, LEXER=3, RULE=4, BLOCK=5, OPTIONAL=6, CLOSURE=7, 
		POSITIVE_CLOSURE=8, SYNPRED=9, RANGE=10, CHAR_RANGE=11, EPSILON=12, ALT=13, 
		EOR=14, EOB=15, EOA=16, ID=17, ARG=18, ARGLIST=19, RET=20, LEXER_GRAMMAR=21, 
		PARSER_GRAMMAR=22, TREE_GRAMMAR=23, COMBINED_GRAMMAR=24, INITACTION=25, 
		LABEL=26, TEMPLATE=27, SCOPE=28, SEMPRED=29, GATED_SEMPRED=30, SYN_SEMPRED=31, 
		BACKTRACK_SEMPRED=32, FRAGMENT=33, TREE_BEGIN=34, ROOT=35, BANG=36, REWRITE=37, 
		ACTION_CONTENT=38, SL_COMMENT=39, ML_COMMENT=40, INT=41, CHAR_LITERAL=42, 
		STRING_LITERAL=43, BEGIN_ARGUMENT=44, BEGIN_ACTION=45, OPTIONS=46, TOKENS=47, 
		HEADER=48, CLASS=49, EXTENDS=50, LEXCLASS=51, TREEPARSER=52, EXCEPTION=53, 
		CATCH=54, FINALLY=55, GRAMMAR=56, PRIVATE=57, PROTECTED=58, PUBLIC=59, 
		RETURNS=60, THROWS=61, TREE=62, OPEN_ELEMENT_OPTION=63, CLOSE_ELEMENT_OPTION=64, 
		AT=65, COLON=66, COLONCOLON=67, COMMA=68, DOT=69, EQUAL=70, LBRACE=71, 
		LBRACK=72, LPAREN=73, OR=74, PLUS=75, QM=76, RBRACE=77, RBRACK=78, RPAREN=79, 
		SEMI=80, SEMPREDOP=81, STAR=82, DOLLAR=83, PEQ=84, NOT=85, WS=86, TOKEN_REF=87, 
		RULE_REF=88, END_ARGUMENT=89, UNTERMINATED_ARGUMENT=90, ARGUMENT_CONTENT=91, 
		END_ACTION=92, UNTERMINATED_ACTION=93, OPT_LBRACE=94, LEXER_CHAR_SET=95, 
		UNTERMINATED_CHAR_SET=96;
	public const int
		RULE_grammar_ = 0, RULE_header_ = 1, RULE_classDef = 2, RULE_fileOptionsSpec = 3, 
		RULE_parserOptionsSpec = 4, RULE_treeParserOptionsSpec = 5, RULE_lexerOptionsSpec = 6, 
		RULE_subruleOptionsSpec = 7, RULE_option = 8, RULE_optionValue = 9, RULE_lexerOption = 10, 
		RULE_lexerOptionValue = 11, RULE_charSet = 12, RULE_setBlockElement = 13, 
		RULE_tokensSpec = 14, RULE_tokenEntry = 15, RULE_tokensSpecOptions = 16, 
		RULE_superClass = 17, RULE_parserSpec = 18, RULE_lexerSpec = 19, RULE_treeParserSpec = 20, 
		RULE_rules = 21, RULE_rule_ = 22, RULE_ruleOptionsSpec = 23, RULE_throwsSpec = 24, 
		RULE_block = 25, RULE_alternative = 26, RULE_exceptionGroup = 27, RULE_exceptionSpec = 28, 
		RULE_exceptionSpecNoLabel = 29, RULE_exceptionHandler = 30, RULE_element = 31, 
		RULE_elementOptionSpec = 32, RULE_elementNoOptionSpec = 33, RULE_rule_ref_or_keyword_as = 34, 
		RULE_tree_ = 35, RULE_rootNode = 36, RULE_ebnf = 37, RULE_ast_type_spec = 38, 
		RULE_range = 39, RULE_terminal_ = 40, RULE_notTerminal = 41, RULE_qualifiedID = 42, 
		RULE_id = 43, RULE_action = 44, RULE_actionScopeName = 45, RULE_ruleAction = 46, 
		RULE_altList = 47, RULE_actionBlock = 48, RULE_argActionBlock = 49;
	public static readonly string[] ruleNames = {
		"grammar_", "header_", "classDef", "fileOptionsSpec", "parserOptionsSpec", 
		"treeParserOptionsSpec", "lexerOptionsSpec", "subruleOptionsSpec", "option", 
		"optionValue", "lexerOption", "lexerOptionValue", "charSet", "setBlockElement", 
		"tokensSpec", "tokenEntry", "tokensSpecOptions", "superClass", "parserSpec", 
		"lexerSpec", "treeParserSpec", "rules", "rule_", "ruleOptionsSpec", "throwsSpec", 
		"block", "alternative", "exceptionGroup", "exceptionSpec", "exceptionSpecNoLabel", 
		"exceptionHandler", "element", "elementOptionSpec", "elementNoOptionSpec", 
		"rule_ref_or_keyword_as", "tree_", "rootNode", "ebnf", "ast_type_spec", 
		"range", "terminal_", "notTerminal", "qualifiedID", "id", "action", "actionScopeName", 
		"ruleAction", "altList", "actionBlock", "argActionBlock"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'Parser'", "'Lexer'", null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "'scope'", null, null, null, null, 
		"'fragment'", "'^('", "'^'", "'!'", null, null, null, null, null, null, 
		null, null, null, "'options'", "'tokens'", "'header'", "'class'", "'extends'", 
		"'lexclass'", "'treeparser'", "'exception'", "'catch'", "'finally'", "'grammar'", 
		"'private'", "'protected'", "'public'", "'returns'", "'throws'", "'tree'", 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "'=>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DOC_COMMENT", "PARSER", "LEXER", "RULE", "BLOCK", "OPTIONAL", "CLOSURE", 
		"POSITIVE_CLOSURE", "SYNPRED", "RANGE", "CHAR_RANGE", "EPSILON", "ALT", 
		"EOR", "EOB", "EOA", "ID", "ARG", "ARGLIST", "RET", "LEXER_GRAMMAR", "PARSER_GRAMMAR", 
		"TREE_GRAMMAR", "COMBINED_GRAMMAR", "INITACTION", "LABEL", "TEMPLATE", 
		"SCOPE", "SEMPRED", "GATED_SEMPRED", "SYN_SEMPRED", "BACKTRACK_SEMPRED", 
		"FRAGMENT", "TREE_BEGIN", "ROOT", "BANG", "REWRITE", "ACTION_CONTENT", 
		"SL_COMMENT", "ML_COMMENT", "INT", "CHAR_LITERAL", "STRING_LITERAL", "BEGIN_ARGUMENT", 
		"BEGIN_ACTION", "OPTIONS", "TOKENS", "HEADER", "CLASS", "EXTENDS", "LEXCLASS", 
		"TREEPARSER", "EXCEPTION", "CATCH", "FINALLY", "GRAMMAR", "PRIVATE", "PROTECTED", 
		"PUBLIC", "RETURNS", "THROWS", "TREE", "OPEN_ELEMENT_OPTION", "CLOSE_ELEMENT_OPTION", 
		"AT", "COLON", "COLONCOLON", "COMMA", "DOT", "EQUAL", "LBRACE", "LBRACK", 
		"LPAREN", "OR", "PLUS", "QM", "RBRACE", "RBRACK", "RPAREN", "SEMI", "SEMPREDOP", 
		"STAR", "DOLLAR", "PEQ", "NOT", "WS", "TOKEN_REF", "RULE_REF", "END_ARGUMENT", 
		"UNTERMINATED_ARGUMENT", "ARGUMENT_CONTENT", "END_ACTION", "UNTERMINATED_ACTION", 
		"OPT_LBRACE", "LEXER_CHAR_SET", "UNTERMINATED_CHAR_SET"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ANTLRv2Parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ANTLRv2Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ANTLRv2Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ANTLRv2Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Grammar_Context : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ANTLRv2Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Header_Context[] header_() {
			return GetRuleContexts<Header_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Header_Context header_(int i) {
			return GetRuleContext<Header_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileOptionsSpecContext fileOptionsSpec() {
			return GetRuleContext<FileOptionsSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefContext[] classDef() {
			return GetRuleContexts<ClassDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefContext classDef(int i) {
			return GetRuleContext<ClassDefContext>(i);
		}
		public Grammar_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammar_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterGrammar_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitGrammar_(this);
		}
	}

	[RuleVersion(0)]
	public Grammar_Context grammar_() {
		Grammar_Context _localctx = new Grammar_Context(Context, State);
		EnterRule(_localctx, 0, RULE_grammar_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==HEADER) {
				{
				{
				State = 100;
				header_();
				}
				}
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 106;
				fileOptionsSpec();
				}
			}

			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOC_COMMENT) | (1L << BEGIN_ACTION) | (1L << CLASS) | (1L << LEXCLASS))) != 0)) {
				{
				{
				State = 109;
				classDef();
				}
				}
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 115;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Header_Context : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEADER() { return GetToken(ANTLRv2Parser.HEADER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv2Parser.STRING_LITERAL, 0); }
		public Header_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_header_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterHeader_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitHeader_(this);
		}
	}

	[RuleVersion(0)]
	public Header_Context header_() {
		Header_Context _localctx = new Header_Context(Context, State);
		EnterRule(_localctx, 2, RULE_header_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			Match(HEADER);
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING_LITERAL) {
				{
				State = 118;
				Match(STRING_LITERAL);
				}
			}

			State = 121;
			actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public RulesContext rules() {
			return GetRuleContext<RulesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerSpecContext lexerSpec() {
			return GetRuleContext<LexerSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TreeParserSpecContext treeParserSpec() {
			return GetRuleContext<TreeParserSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParserSpecContext parserSpec() {
			return GetRuleContext<ParserSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT() { return GetToken(ANTLRv2Parser.DOC_COMMENT, 0); }
		public ClassDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterClassDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitClassDef(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefContext classDef() {
		ClassDefContext _localctx = new ClassDefContext(Context, State);
		EnterRule(_localctx, 4, RULE_classDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BEGIN_ACTION) {
				{
				State = 123;
				actionBlock();
				}
			}

			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOC_COMMENT) {
				{
				State = 126;
				Match(DOC_COMMENT);
				}
			}

			State = 132;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 129;
				lexerSpec();
				}
				break;
			case 2:
				{
				State = 130;
				treeParserSpec();
				}
				break;
			case 3:
				{
				State = 131;
				parserSpec();
				}
				break;
			}
			State = 134;
			rules();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileOptionsSpecContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(ANTLRv2Parser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(ANTLRv2Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(ANTLRv2Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public FileOptionsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileOptionsSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterFileOptionsSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitFileOptionsSpec(this);
		}
	}

	[RuleVersion(0)]
	public FileOptionsSpecContext fileOptionsSpec() {
		FileOptionsSpecContext _localctx = new FileOptionsSpecContext(Context, State);
		EnterRule(_localctx, 6, RULE_fileOptionsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			Match(OPTIONS);
			State = 137;
			Match(LBRACE);
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & ((1L << (GRAMMAR - 56)) | (1L << (TREE - 56)) | (1L << (TOKEN_REF - 56)) | (1L << (RULE_REF - 56)))) != 0)) {
				{
				{
				State = 138;
				option();
				}
				}
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 144;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserOptionsSpecContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(ANTLRv2Parser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(ANTLRv2Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(ANTLRv2Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public ParserOptionsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserOptionsSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterParserOptionsSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitParserOptionsSpec(this);
		}
	}

	[RuleVersion(0)]
	public ParserOptionsSpecContext parserOptionsSpec() {
		ParserOptionsSpecContext _localctx = new ParserOptionsSpecContext(Context, State);
		EnterRule(_localctx, 8, RULE_parserOptionsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(OPTIONS);
			State = 147;
			Match(LBRACE);
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & ((1L << (GRAMMAR - 56)) | (1L << (TREE - 56)) | (1L << (TOKEN_REF - 56)) | (1L << (RULE_REF - 56)))) != 0)) {
				{
				{
				State = 148;
				option();
				}
				}
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 154;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TreeParserOptionsSpecContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(ANTLRv2Parser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(ANTLRv2Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(ANTLRv2Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public TreeParserOptionsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_treeParserOptionsSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterTreeParserOptionsSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitTreeParserOptionsSpec(this);
		}
	}

	[RuleVersion(0)]
	public TreeParserOptionsSpecContext treeParserOptionsSpec() {
		TreeParserOptionsSpecContext _localctx = new TreeParserOptionsSpecContext(Context, State);
		EnterRule(_localctx, 10, RULE_treeParserOptionsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			Match(OPTIONS);
			State = 157;
			Match(LBRACE);
			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & ((1L << (GRAMMAR - 56)) | (1L << (TREE - 56)) | (1L << (TOKEN_REF - 56)) | (1L << (RULE_REF - 56)))) != 0)) {
				{
				{
				State = 158;
				option();
				}
				}
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 164;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerOptionsSpecContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(ANTLRv2Parser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(ANTLRv2Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(ANTLRv2Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LexerOptionContext[] lexerOption() {
			return GetRuleContexts<LexerOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerOptionContext lexerOption(int i) {
			return GetRuleContext<LexerOptionContext>(i);
		}
		public LexerOptionsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerOptionsSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterLexerOptionsSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitLexerOptionsSpec(this);
		}
	}

	[RuleVersion(0)]
	public LexerOptionsSpecContext lexerOptionsSpec() {
		LexerOptionsSpecContext _localctx = new LexerOptionsSpecContext(Context, State);
		EnterRule(_localctx, 12, RULE_lexerOptionsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			Match(OPTIONS);
			State = 167;
			Match(LBRACE);
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & ((1L << (GRAMMAR - 56)) | (1L << (TREE - 56)) | (1L << (TOKEN_REF - 56)) | (1L << (RULE_REF - 56)))) != 0)) {
				{
				{
				State = 168;
				lexerOption();
				}
				}
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 174;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubruleOptionsSpecContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(ANTLRv2Parser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(ANTLRv2Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(ANTLRv2Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public SubruleOptionsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subruleOptionsSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterSubruleOptionsSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitSubruleOptionsSpec(this);
		}
	}

	[RuleVersion(0)]
	public SubruleOptionsSpecContext subruleOptionsSpec() {
		SubruleOptionsSpecContext _localctx = new SubruleOptionsSpecContext(Context, State);
		EnterRule(_localctx, 14, RULE_subruleOptionsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			Match(OPTIONS);
			State = 177;
			Match(LBRACE);
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & ((1L << (GRAMMAR - 56)) | (1L << (TREE - 56)) | (1L << (TOKEN_REF - 56)) | (1L << (RULE_REF - 56)))) != 0)) {
				{
				{
				State = 178;
				option();
				}
				}
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 184;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(ANTLRv2Parser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueContext optionValue() {
			return GetRuleContext<OptionValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ANTLRv2Parser.SEMI, 0); }
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitOption(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(Context, State);
		EnterRule(_localctx, 16, RULE_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			id();
			State = 187;
			Match(EQUAL);
			State = 188;
			optionValue();
			State = 189;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionValueContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIDContext qualifiedID() {
			return GetRuleContext<QualifiedIDContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv2Parser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL() { return GetToken(ANTLRv2Parser.CHAR_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(ANTLRv2Parser.INT, 0); }
		public OptionValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterOptionValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitOptionValue(this);
		}
	}

	[RuleVersion(0)]
	public OptionValueContext optionValue() {
		OptionValueContext _localctx = new OptionValueContext(Context, State);
		EnterRule(_localctx, 18, RULE_optionValue);
		try {
			State = 195;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GRAMMAR:
			case TREE:
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 191;
				qualifiedID();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 192;
				Match(STRING_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 193;
				Match(CHAR_LITERAL);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 194;
				Match(INT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerOptionContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(ANTLRv2Parser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LexerOptionValueContext lexerOptionValue() {
			return GetRuleContext<LexerOptionValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ANTLRv2Parser.SEMI, 0); }
		public LexerOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterLexerOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitLexerOption(this);
		}
	}

	[RuleVersion(0)]
	public LexerOptionContext lexerOption() {
		LexerOptionContext _localctx = new LexerOptionContext(Context, State);
		EnterRule(_localctx, 20, RULE_lexerOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			id();
			State = 198;
			Match(EQUAL);
			State = 199;
			lexerOptionValue();
			State = 200;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerOptionValueContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public CharSetContext charSet() {
			return GetRuleContext<CharSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueContext optionValue() {
			return GetRuleContext<OptionValueContext>(0);
		}
		public LexerOptionValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerOptionValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterLexerOptionValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitLexerOptionValue(this);
		}
	}

	[RuleVersion(0)]
	public LexerOptionValueContext lexerOptionValue() {
		LexerOptionValueContext _localctx = new LexerOptionValueContext(Context, State);
		EnterRule(_localctx, 22, RULE_lexerOptionValue);
		try {
			State = 204;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 202;
				charSet();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 203;
				optionValue();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharSetContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public SetBlockElementContext[] setBlockElement() {
			return GetRuleContexts<SetBlockElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetBlockElementContext setBlockElement(int i) {
			return GetRuleContext<SetBlockElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(ANTLRv2Parser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(ANTLRv2Parser.OR, i);
		}
		public CharSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterCharSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitCharSet(this);
		}
	}

	[RuleVersion(0)]
	public CharSetContext charSet() {
		CharSetContext _localctx = new CharSetContext(Context, State);
		EnterRule(_localctx, 24, RULE_charSet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			setBlockElement();
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 207;
				Match(OR);
				State = 208;
				setBlockElement();
				}
				}
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetBlockElementContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CHAR_LITERAL() { return GetTokens(ANTLRv2Parser.CHAR_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL(int i) {
			return GetToken(ANTLRv2Parser.CHAR_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(ANTLRv2Parser.RANGE, 0); }
		public SetBlockElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setBlockElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterSetBlockElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitSetBlockElement(this);
		}
	}

	[RuleVersion(0)]
	public SetBlockElementContext setBlockElement() {
		SetBlockElementContext _localctx = new SetBlockElementContext(Context, State);
		EnterRule(_localctx, 26, RULE_setBlockElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			Match(CHAR_LITERAL);
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RANGE) {
				{
				State = 215;
				Match(RANGE);
				State = 216;
				Match(CHAR_LITERAL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TokensSpecContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKENS() { return GetToken(ANTLRv2Parser.TOKENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(ANTLRv2Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(ANTLRv2Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TokenEntryContext[] tokenEntry() {
			return GetRuleContexts<TokenEntryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TokenEntryContext tokenEntry(int i) {
			return GetRuleContext<TokenEntryContext>(i);
		}
		public TokensSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tokensSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterTokensSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitTokensSpec(this);
		}
	}

	[RuleVersion(0)]
	public TokensSpecContext tokensSpec() {
		TokensSpecContext _localctx = new TokensSpecContext(Context, State);
		EnterRule(_localctx, 28, RULE_tokensSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			Match(TOKENS);
			State = 220;
			Match(LBRACE);
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 221;
				tokenEntry();
				}
				}
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==STRING_LITERAL || _la==TOKEN_REF );
			State = 226;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TokenEntryContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ANTLRv2Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv2Parser.TOKEN_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv2Parser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(ANTLRv2Parser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TokensSpecOptionsContext tokensSpecOptions() {
			return GetRuleContext<TokensSpecOptionsContext>(0);
		}
		public TokenEntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tokenEntry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterTokenEntry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitTokenEntry(this);
		}
	}

	[RuleVersion(0)]
	public TokenEntryContext tokenEntry() {
		TokenEntryContext _localctx = new TokenEntryContext(Context, State);
		EnterRule(_localctx, 30, RULE_tokenEntry);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
				{
				State = 228;
				Match(TOKEN_REF);
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL) {
					{
					State = 229;
					Match(EQUAL);
					State = 230;
					Match(STRING_LITERAL);
					}
				}

				State = 234;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_ELEMENT_OPTION) {
					{
					State = 233;
					tokensSpecOptions();
					}
				}

				}
				break;
			case STRING_LITERAL:
				{
				State = 236;
				Match(STRING_LITERAL);
				State = 238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_ELEMENT_OPTION) {
					{
					State = 237;
					tokensSpecOptions();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 242;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TokensSpecOptionsContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_ELEMENT_OPTION() { return GetToken(ANTLRv2Parser.OPEN_ELEMENT_OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(ANTLRv2Parser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(ANTLRv2Parser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueContext[] optionValue() {
			return GetRuleContexts<OptionValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueContext optionValue(int i) {
			return GetRuleContext<OptionValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_ELEMENT_OPTION() { return GetToken(ANTLRv2Parser.CLOSE_ELEMENT_OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(ANTLRv2Parser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(ANTLRv2Parser.SEMI, i);
		}
		public TokensSpecOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tokensSpecOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterTokensSpecOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitTokensSpecOptions(this);
		}
	}

	[RuleVersion(0)]
	public TokensSpecOptionsContext tokensSpecOptions() {
		TokensSpecOptionsContext _localctx = new TokensSpecOptionsContext(Context, State);
		EnterRule(_localctx, 32, RULE_tokensSpecOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			Match(OPEN_ELEMENT_OPTION);
			State = 245;
			id();
			State = 246;
			Match(EQUAL);
			State = 247;
			optionValue();
			State = 255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMI) {
				{
				{
				State = 248;
				Match(SEMI);
				State = 249;
				id();
				State = 250;
				Match(EQUAL);
				State = 251;
				optionValue();
				}
				}
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 258;
			Match(CLOSE_ELEMENT_OPTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperClassContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ANTLRv2Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv2Parser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ANTLRv2Parser.RPAREN, 0); }
		public SuperClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterSuperClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitSuperClass(this);
		}
	}

	[RuleVersion(0)]
	public SuperClassContext superClass() {
		SuperClassContext _localctx = new SuperClassContext(Context, State);
		EnterRule(_localctx, 34, RULE_superClass);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			Match(LPAREN);
			State = 261;
			Match(STRING_LITERAL);
			State = 262;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserSpecContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(ANTLRv2Parser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ANTLRv2Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(ANTLRv2Parser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(ANTLRv2Parser.PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParserOptionsSpecContext parserOptionsSpec() {
			return GetRuleContext<ParserOptionsSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TokensSpecContext tokensSpec() {
			return GetRuleContext<TokensSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuperClassContext superClass() {
			return GetRuleContext<SuperClassContext>(0);
		}
		public ParserSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterParserSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitParserSpec(this);
		}
	}

	[RuleVersion(0)]
	public ParserSpecContext parserSpec() {
		ParserSpecContext _localctx = new ParserSpecContext(Context, State);
		EnterRule(_localctx, 36, RULE_parserSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			Match(CLASS);
			State = 265;
			id();
			State = 272;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXTENDS:
				{
				State = 266;
				Match(EXTENDS);
				State = 267;
				Match(PARSER);
				State = 269;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 268;
					superClass();
					}
				}

				}
				break;
			case SEMI:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 274;
			Match(SEMI);
			State = 276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 275;
				parserOptionsSpec();
				}
			}

			State = 279;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOKENS) {
				{
				State = 278;
				tokensSpec();
				}
			}

			State = 282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BEGIN_ACTION) {
				{
				State = 281;
				actionBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerSpecContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ANTLRv2Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEXCLASS() { return GetToken(ANTLRv2Parser.LEXCLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(ANTLRv2Parser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(ANTLRv2Parser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEXER() { return GetToken(ANTLRv2Parser.LEXER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LexerOptionsSpecContext lexerOptionsSpec() {
			return GetRuleContext<LexerOptionsSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TokensSpecContext tokensSpec() {
			return GetRuleContext<TokensSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuperClassContext superClass() {
			return GetRuleContext<SuperClassContext>(0);
		}
		public LexerSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterLexerSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitLexerSpec(this);
		}
	}

	[RuleVersion(0)]
	public LexerSpecContext lexerSpec() {
		LexerSpecContext _localctx = new LexerSpecContext(Context, State);
		EnterRule(_localctx, 38, RULE_lexerSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEXCLASS:
				{
				State = 284;
				Match(LEXCLASS);
				State = 285;
				id();
				}
				break;
			case CLASS:
				{
				State = 286;
				Match(CLASS);
				State = 287;
				id();
				State = 288;
				Match(EXTENDS);
				State = 289;
				Match(LEXER);
				State = 291;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 290;
					superClass();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 295;
			Match(SEMI);
			State = 297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 296;
				lexerOptionsSpec();
				}
			}

			State = 300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOKENS) {
				{
				State = 299;
				tokensSpec();
				}
			}

			State = 303;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BEGIN_ACTION) {
				{
				State = 302;
				actionBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TreeParserSpecContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(ANTLRv2Parser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(ANTLRv2Parser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TREEPARSER() { return GetToken(ANTLRv2Parser.TREEPARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ANTLRv2Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SuperClassContext superClass() {
			return GetRuleContext<SuperClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TreeParserOptionsSpecContext treeParserOptionsSpec() {
			return GetRuleContext<TreeParserOptionsSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TokensSpecContext tokensSpec() {
			return GetRuleContext<TokensSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public TreeParserSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_treeParserSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterTreeParserSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitTreeParserSpec(this);
		}
	}

	[RuleVersion(0)]
	public TreeParserSpecContext treeParserSpec() {
		TreeParserSpecContext _localctx = new TreeParserSpecContext(Context, State);
		EnterRule(_localctx, 40, RULE_treeParserSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			Match(CLASS);
			State = 306;
			id();
			State = 307;
			Match(EXTENDS);
			State = 308;
			Match(TREEPARSER);
			State = 310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 309;
				superClass();
				}
			}

			State = 312;
			Match(SEMI);
			State = 314;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 313;
				treeParserOptionsSpec();
				}
			}

			State = 317;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOKENS) {
				{
				State = 316;
				tokensSpec();
				}
			}

			State = 320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BEGIN_ACTION) {
				{
				State = 319;
				actionBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Rule_Context[] rule_() {
			return GetRuleContexts<Rule_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rule_Context rule_(int i) {
			return GetRuleContext<Rule_Context>(i);
		}
		public RulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rules; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterRules(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitRules(this);
		}
	}

	[RuleVersion(0)]
	public RulesContext rules() {
		RulesContext _localctx = new RulesContext(Context, State);
		EnterRule(_localctx, 42, RULE_rules);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 322;
					rule_();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 325;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_Context : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ANTLRv2Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AltListContext altList() {
			return GetRuleContext<AltListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ANTLRv2Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT() { return GetToken(ANTLRv2Parser.DOC_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(ANTLRv2Parser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgActionBlockContext[] argActionBlock() {
			return GetRuleContexts<ArgActionBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgActionBlockContext argActionBlock(int i) {
			return GetRuleContext<ArgActionBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(ANTLRv2Parser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ThrowsSpecContext throwsSpec() {
			return GetRuleContext<ThrowsSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleOptionsSpecContext ruleOptionsSpec() {
			return GetRuleContext<RuleOptionsSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleActionContext[] ruleAction() {
			return GetRuleContexts<RuleActionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleActionContext ruleAction(int i) {
			return GetRuleContext<RuleActionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionGroupContext exceptionGroup() {
			return GetRuleContext<ExceptionGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(ANTLRv2Parser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(ANTLRv2Parser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(ANTLRv2Parser.PRIVATE, 0); }
		public Rule_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterRule_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitRule_(this);
		}
	}

	[RuleVersion(0)]
	public Rule_Context rule_() {
		Rule_Context _localctx = new Rule_Context(Context, State);
		EnterRule(_localctx, 44, RULE_rule_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOC_COMMENT) {
				{
				State = 327;
				Match(DOC_COMMENT);
				}
			}

			State = 331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0)) {
				{
				State = 330;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 333;
			id();
			State = 335;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BANG) {
				{
				State = 334;
				Match(BANG);
				}
			}

			State = 338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BEGIN_ARGUMENT) {
				{
				State = 337;
				argActionBlock();
				}
			}

			State = 342;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNS) {
				{
				State = 340;
				Match(RETURNS);
				State = 341;
				argActionBlock();
				}
			}

			State = 345;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THROWS) {
				{
				State = 344;
				throwsSpec();
				}
			}

			State = 348;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 347;
				ruleOptionsSpec();
				}
			}

			State = 353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BEGIN_ACTION) {
				{
				{
				State = 350;
				ruleAction();
				}
				}
				State = 355;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 356;
			Match(COLON);
			State = 357;
			altList();
			State = 358;
			Match(SEMI);
			State = 360;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXCEPTION) {
				{
				State = 359;
				exceptionGroup();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleOptionsSpecContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(ANTLRv2Parser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(ANTLRv2Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(ANTLRv2Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public RuleOptionsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleOptionsSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterRuleOptionsSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitRuleOptionsSpec(this);
		}
	}

	[RuleVersion(0)]
	public RuleOptionsSpecContext ruleOptionsSpec() {
		RuleOptionsSpecContext _localctx = new RuleOptionsSpecContext(Context, State);
		EnterRule(_localctx, 46, RULE_ruleOptionsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362;
			Match(OPTIONS);
			State = 363;
			Match(LBRACE);
			State = 367;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & ((1L << (GRAMMAR - 56)) | (1L << (TREE - 56)) | (1L << (TOKEN_REF - 56)) | (1L << (RULE_REF - 56)))) != 0)) {
				{
				{
				State = 364;
				option();
				}
				}
				State = 369;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 370;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowsSpecContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROWS() { return GetToken(ANTLRv2Parser.THROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ANTLRv2Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ANTLRv2Parser.COMMA, i);
		}
		public ThrowsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwsSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterThrowsSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitThrowsSpec(this);
		}
	}

	[RuleVersion(0)]
	public ThrowsSpecContext throwsSpec() {
		ThrowsSpecContext _localctx = new ThrowsSpecContext(Context, State);
		EnterRule(_localctx, 48, RULE_throwsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			Match(THROWS);
			State = 373;
			id();
			State = 378;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 374;
				Match(COMMA);
				State = 375;
				id();
				}
				}
				State = 380;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public AlternativeContext[] alternative() {
			return GetRuleContexts<AlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlternativeContext alternative(int i) {
			return GetRuleContext<AlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(ANTLRv2Parser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(ANTLRv2Parser.OR, i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 50, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381;
			alternative();
			State = 386;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 382;
				Match(OR);
				State = 383;
				alternative();
				}
				}
				State = 388;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlternativeContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(ANTLRv2Parser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public AlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterAlternative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitAlternative(this);
		}
	}

	[RuleVersion(0)]
	public AlternativeContext alternative() {
		AlternativeContext _localctx = new AlternativeContext(Context, State);
		EnterRule(_localctx, 52, RULE_alternative);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BANG) {
				{
				State = 389;
				Match(BANG);
				}
			}

			State = 395;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (TREE_BEGIN - 34)) | (1L << (CHAR_LITERAL - 34)) | (1L << (STRING_LITERAL - 34)) | (1L << (BEGIN_ACTION - 34)) | (1L << (GRAMMAR - 34)) | (1L << (TREE - 34)) | (1L << (DOT - 34)) | (1L << (LPAREN - 34)) | (1L << (NOT - 34)) | (1L << (TOKEN_REF - 34)) | (1L << (RULE_REF - 34)))) != 0)) {
				{
				{
				State = 392;
				element();
				}
				}
				State = 397;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionGroupContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionSpecContext[] exceptionSpec() {
			return GetRuleContexts<ExceptionSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionSpecContext exceptionSpec(int i) {
			return GetRuleContext<ExceptionSpecContext>(i);
		}
		public ExceptionGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterExceptionGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitExceptionGroup(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionGroupContext exceptionGroup() {
		ExceptionGroupContext _localctx = new ExceptionGroupContext(Context, State);
		EnterRule(_localctx, 54, RULE_exceptionGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 398;
				exceptionSpec();
				}
				}
				State = 401;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==EXCEPTION );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionSpecContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPTION() { return GetToken(ANTLRv2Parser.EXCEPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionHandlerContext[] exceptionHandler() {
			return GetRuleContexts<ExceptionHandlerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionHandlerContext exceptionHandler(int i) {
			return GetRuleContext<ExceptionHandlerContext>(i);
		}
		public ExceptionSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterExceptionSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitExceptionSpec(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionSpecContext exceptionSpec() {
		ExceptionSpecContext _localctx = new ExceptionSpecContext(Context, State);
		EnterRule(_localctx, 56, RULE_exceptionSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403;
			Match(EXCEPTION);
			State = 405;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BEGIN_ARGUMENT) {
				{
				State = 404;
				argActionBlock();
				}
			}

			State = 410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CATCH) {
				{
				{
				State = 407;
				exceptionHandler();
				}
				}
				State = 412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionSpecNoLabelContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPTION() { return GetToken(ANTLRv2Parser.EXCEPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionHandlerContext[] exceptionHandler() {
			return GetRuleContexts<ExceptionHandlerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionHandlerContext exceptionHandler(int i) {
			return GetRuleContext<ExceptionHandlerContext>(i);
		}
		public ExceptionSpecNoLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionSpecNoLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterExceptionSpecNoLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitExceptionSpecNoLabel(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionSpecNoLabelContext exceptionSpecNoLabel() {
		ExceptionSpecNoLabelContext _localctx = new ExceptionSpecNoLabelContext(Context, State);
		EnterRule(_localctx, 58, RULE_exceptionSpecNoLabel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413;
			Match(EXCEPTION);
			State = 417;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CATCH) {
				{
				{
				State = 414;
				exceptionHandler();
				}
				}
				State = 419;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionHandlerContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(ANTLRv2Parser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public ExceptionHandlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionHandler; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterExceptionHandler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitExceptionHandler(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionHandlerContext exceptionHandler() {
		ExceptionHandlerContext _localctx = new ExceptionHandlerContext(Context, State);
		EnterRule(_localctx, 60, RULE_exceptionHandler);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420;
			Match(CATCH);
			State = 421;
			argActionBlock();
			State = 422;
			actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ElementNoOptionSpecContext elementNoOptionSpec() {
			return GetRuleContext<ElementNoOptionSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementOptionSpecContext elementOptionSpec() {
			return GetRuleContext<ElementOptionSpecContext>(0);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 62, RULE_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424;
			elementNoOptionSpec();
			State = 426;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_ELEMENT_OPTION) {
				{
				State = 425;
				elementOptionSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementOptionSpecContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_ELEMENT_OPTION() { return GetToken(ANTLRv2Parser.OPEN_ELEMENT_OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(ANTLRv2Parser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(ANTLRv2Parser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueContext[] optionValue() {
			return GetRuleContexts<OptionValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueContext optionValue(int i) {
			return GetRuleContext<OptionValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_ELEMENT_OPTION() { return GetToken(ANTLRv2Parser.CLOSE_ELEMENT_OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(ANTLRv2Parser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(ANTLRv2Parser.SEMI, i);
		}
		public ElementOptionSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementOptionSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterElementOptionSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitElementOptionSpec(this);
		}
	}

	[RuleVersion(0)]
	public ElementOptionSpecContext elementOptionSpec() {
		ElementOptionSpecContext _localctx = new ElementOptionSpecContext(Context, State);
		EnterRule(_localctx, 64, RULE_elementOptionSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428;
			Match(OPEN_ELEMENT_OPTION);
			State = 429;
			id();
			State = 430;
			Match(EQUAL);
			State = 431;
			optionValue();
			State = 439;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMI) {
				{
				{
				State = 432;
				Match(SEMI);
				State = 433;
				id();
				State = 434;
				Match(EQUAL);
				State = 435;
				optionValue();
				}
				}
				State = 441;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 442;
			Match(CLOSE_ELEMENT_OPTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementNoOptionSpecContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(ANTLRv2Parser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rule_ref_or_keyword_asContext rule_ref_or_keyword_as() {
			return GetRuleContext<Rule_ref_or_keyword_asContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv2Parser.TOKEN_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ANTLRv2Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(ANTLRv2Parser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Terminal_Context terminal_() {
			return GetRuleContext<Terminal_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(ANTLRv2Parser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EbnfContext ebnf() {
			return GetRuleContext<EbnfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotTerminalContext notTerminal() {
			return GetRuleContext<NotTerminalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM() { return GetToken(ANTLRv2Parser.QM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Tree_Context tree_() {
			return GetRuleContext<Tree_Context>(0);
		}
		public ElementNoOptionSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementNoOptionSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterElementNoOptionSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitElementNoOptionSpec(this);
		}
	}

	[RuleVersion(0)]
	public ElementNoOptionSpecContext elementNoOptionSpec() {
		ElementNoOptionSpecContext _localctx = new ElementNoOptionSpecContext(Context, State);
		EnterRule(_localctx, 66, RULE_elementNoOptionSpec);
		int _la;
		try {
			State = 491;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 444;
				id();
				State = 445;
				Match(EQUAL);
				State = 449;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
				case 1:
					{
					State = 446;
					id();
					State = 447;
					Match(COLON);
					}
					break;
				}
				State = 462;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case GRAMMAR:
				case TREE:
				case RULE_REF:
					{
					State = 451;
					rule_ref_or_keyword_as();
					State = 453;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==BEGIN_ARGUMENT) {
						{
						State = 452;
						argActionBlock();
						}
					}

					State = 456;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==BANG) {
						{
						State = 455;
						Match(BANG);
						}
					}

					}
					break;
				case TOKEN_REF:
					{
					State = 458;
					Match(TOKEN_REF);
					State = 460;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==BEGIN_ARGUMENT) {
						{
						State = 459;
						argActionBlock();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 467;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
				case 1:
					{
					State = 464;
					id();
					State = 465;
					Match(COLON);
					}
					break;
				}
				State = 484;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
				case 1:
					{
					State = 469;
					rule_ref_or_keyword_as();
					State = 471;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==BEGIN_ARGUMENT) {
						{
						State = 470;
						argActionBlock();
						}
					}

					State = 474;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==BANG) {
						{
						State = 473;
						Match(BANG);
						}
					}

					}
					break;
				case 2:
					{
					State = 476;
					range();
					}
					break;
				case 3:
					{
					State = 477;
					terminal_();
					}
					break;
				case 4:
					{
					State = 478;
					Match(NOT);
					State = 481;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case CHAR_LITERAL:
					case TOKEN_REF:
						{
						State = 479;
						notTerminal();
						}
						break;
					case LPAREN:
						{
						State = 480;
						ebnf();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 5:
					{
					State = 483;
					ebnf();
					}
					break;
				}
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 486;
				actionBlock();
				State = 488;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QM) {
					{
					State = 487;
					Match(QM);
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 490;
				tree_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_ref_or_keyword_asContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE_REF() { return GetToken(ANTLRv2Parser.RULE_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRAMMAR() { return GetToken(ANTLRv2Parser.GRAMMAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TREE() { return GetToken(ANTLRv2Parser.TREE, 0); }
		public Rule_ref_or_keyword_asContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_ref_or_keyword_as; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterRule_ref_or_keyword_as(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitRule_ref_or_keyword_as(this);
		}
	}

	[RuleVersion(0)]
	public Rule_ref_or_keyword_asContext rule_ref_or_keyword_as() {
		Rule_ref_or_keyword_asContext _localctx = new Rule_ref_or_keyword_asContext(Context, State);
		EnterRule(_localctx, 68, RULE_rule_ref_or_keyword_as);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 493;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & ((1L << (GRAMMAR - 56)) | (1L << (TREE - 56)) | (1L << (RULE_REF - 56)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tree_Context : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TREE_BEGIN() { return GetToken(ANTLRv2Parser.TREE_BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RootNodeContext rootNode() {
			return GetRuleContext<RootNodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ANTLRv2Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public Tree_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tree_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterTree_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitTree_(this);
		}
	}

	[RuleVersion(0)]
	public Tree_Context tree_() {
		Tree_Context _localctx = new Tree_Context(Context, State);
		EnterRule(_localctx, 70, RULE_tree_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495;
			Match(TREE_BEGIN);
			State = 496;
			rootNode();
			State = 498;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 497;
				element();
				}
				}
				State = 500;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (TREE_BEGIN - 34)) | (1L << (CHAR_LITERAL - 34)) | (1L << (STRING_LITERAL - 34)) | (1L << (BEGIN_ACTION - 34)) | (1L << (GRAMMAR - 34)) | (1L << (TREE - 34)) | (1L << (DOT - 34)) | (1L << (LPAREN - 34)) | (1L << (NOT - 34)) | (1L << (TOKEN_REF - 34)) | (1L << (RULE_REF - 34)))) != 0) );
			State = 502;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RootNodeContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Terminal_Context terminal_() {
			return GetRuleContext<Terminal_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ANTLRv2Parser.COLON, 0); }
		public RootNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rootNode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterRootNode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitRootNode(this);
		}
	}

	[RuleVersion(0)]
	public RootNodeContext rootNode() {
		RootNodeContext _localctx = new RootNodeContext(Context, State);
		EnterRule(_localctx, 72, RULE_rootNode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 507;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				{
				State = 504;
				id();
				State = 505;
				Match(COLON);
				}
				break;
			}
			State = 509;
			terminal_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EbnfContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ANTLRv2Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ANTLRv2Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMPREDOP() { return GetToken(ANTLRv2Parser.SEMPREDOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubruleOptionsSpecContext subruleOptionsSpec() {
			return GetRuleContext<SubruleOptionsSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ANTLRv2Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(ANTLRv2Parser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM() { return GetToken(ANTLRv2Parser.QM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(ANTLRv2Parser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ANTLRv2Parser.PLUS, 0); }
		public EbnfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ebnf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterEbnf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitEbnf(this);
		}
	}

	[RuleVersion(0)]
	public EbnfContext ebnf() {
		EbnfContext _localctx = new EbnfContext(Context, State);
		EnterRule(_localctx, 74, RULE_ebnf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511;
			Match(LPAREN);
			State = 521;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				{
				State = 512;
				subruleOptionsSpec();
				State = 514;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BEGIN_ACTION) {
					{
					State = 513;
					actionBlock();
					}
				}

				State = 516;
				Match(COLON);
				}
				break;
			case 2:
				{
				State = 518;
				actionBlock();
				State = 519;
				Match(COLON);
				}
				break;
			}
			State = 523;
			block();
			State = 524;
			Match(RPAREN);
			State = 532;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TREE_BEGIN:
			case BANG:
			case CHAR_LITERAL:
			case STRING_LITERAL:
			case BEGIN_ACTION:
			case GRAMMAR:
			case TREE:
			case OPEN_ELEMENT_OPTION:
			case DOT:
			case LPAREN:
			case OR:
			case PLUS:
			case QM:
			case RPAREN:
			case SEMI:
			case STAR:
			case NOT:
			case TOKEN_REF:
			case RULE_REF:
				{
				State = 526;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (PLUS - 75)) | (1L << (QM - 75)) | (1L << (STAR - 75)))) != 0)) {
					{
					State = 525;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (PLUS - 75)) | (1L << (QM - 75)) | (1L << (STAR - 75)))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 529;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BANG) {
					{
					State = 528;
					Match(BANG);
					}
				}

				}
				break;
			case SEMPREDOP:
				{
				State = 531;
				Match(SEMPREDOP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ast_type_specContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROOT() { return GetToken(ANTLRv2Parser.ROOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(ANTLRv2Parser.BANG, 0); }
		public Ast_type_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ast_type_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterAst_type_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitAst_type_spec(this);
		}
	}

	[RuleVersion(0)]
	public Ast_type_specContext ast_type_spec() {
		Ast_type_specContext _localctx = new Ast_type_specContext(Context, State);
		EnterRule(_localctx, 76, RULE_ast_type_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ROOT || _la==BANG) {
				{
				State = 534;
				_la = TokenStream.LA(1);
				if ( !(_la==ROOT || _la==BANG) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CHAR_LITERAL() { return GetTokens(ANTLRv2Parser.CHAR_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL(int i) {
			return GetToken(ANTLRv2Parser.CHAR_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(ANTLRv2Parser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(ANTLRv2Parser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ast_type_specContext ast_type_spec() {
			return GetRuleContext<Ast_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv2Parser.TOKEN_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv2Parser.STRING_LITERAL, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 78, RULE_range);
		int _la;
		try {
			State = 546;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 537;
				Match(CHAR_LITERAL);
				State = 538;
				Match(RANGE);
				State = 539;
				Match(CHAR_LITERAL);
				State = 541;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BANG) {
					{
					State = 540;
					Match(BANG);
					}
				}

				}
				break;
			case STRING_LITERAL:
			case TOKEN_REF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 543;
				_la = TokenStream.LA(1);
				if ( !(_la==STRING_LITERAL || _la==TOKEN_REF) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 544;
				Match(RANGE);
				State = 545;
				ast_type_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Terminal_Context : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL() { return GetToken(ANTLRv2Parser.CHAR_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(ANTLRv2Parser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv2Parser.TOKEN_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ast_type_specContext ast_type_spec() {
			return GetRuleContext<Ast_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv2Parser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ANTLRv2Parser.DOT, 0); }
		public Terminal_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminal_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterTerminal_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitTerminal_(this);
		}
	}

	[RuleVersion(0)]
	public Terminal_Context terminal_() {
		Terminal_Context _localctx = new Terminal_Context(Context, State);
		EnterRule(_localctx, 80, RULE_terminal_);
		int _la;
		try {
			State = 561;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 548;
				Match(CHAR_LITERAL);
				State = 550;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BANG) {
					{
					State = 549;
					Match(BANG);
					}
				}

				}
				break;
			case TOKEN_REF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 552;
				Match(TOKEN_REF);
				State = 553;
				ast_type_spec();
				State = 555;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BEGIN_ARGUMENT) {
					{
					State = 554;
					argActionBlock();
					}
				}

				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 557;
				Match(STRING_LITERAL);
				State = 558;
				ast_type_spec();
				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 559;
				Match(DOT);
				State = 560;
				ast_type_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotTerminalContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL() { return GetToken(ANTLRv2Parser.CHAR_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(ANTLRv2Parser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv2Parser.TOKEN_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ast_type_specContext ast_type_spec() {
			return GetRuleContext<Ast_type_specContext>(0);
		}
		public NotTerminalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notTerminal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterNotTerminal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitNotTerminal(this);
		}
	}

	[RuleVersion(0)]
	public NotTerminalContext notTerminal() {
		NotTerminalContext _localctx = new NotTerminalContext(Context, State);
		EnterRule(_localctx, 82, RULE_notTerminal);
		int _la;
		try {
			State = 569;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 563;
				Match(CHAR_LITERAL);
				State = 565;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BANG) {
					{
					State = 564;
					Match(BANG);
					}
				}

				}
				break;
			case TOKEN_REF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 567;
				Match(TOKEN_REF);
				State = 568;
				ast_type_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIDContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(ANTLRv2Parser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(ANTLRv2Parser.DOT, i);
		}
		public QualifiedIDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedID; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterQualifiedID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitQualifiedID(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIDContext qualifiedID() {
		QualifiedIDContext _localctx = new QualifiedIDContext(Context, State);
		EnterRule(_localctx, 84, RULE_qualifiedID);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 571;
			id();
			State = 576;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 572;
				Match(DOT);
				State = 573;
				id();
				}
				}
				State = 578;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv2Parser.TOKEN_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE_REF() { return GetToken(ANTLRv2Parser.RULE_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRAMMAR() { return GetToken(ANTLRv2Parser.GRAMMAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TREE() { return GetToken(ANTLRv2Parser.TREE, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 86, RULE_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & ((1L << (GRAMMAR - 56)) | (1L << (TREE - 56)) | (1L << (TOKEN_REF - 56)) | (1L << (RULE_REF - 56)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(ANTLRv2Parser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionScopeNameContext actionScopeName() {
			return GetRuleContext<ActionScopeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLONCOLON() { return GetToken(ANTLRv2Parser.COLONCOLON, 0); }
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 88, RULE_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581;
			Match(AT);
			State = 585;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				{
				State = 582;
				actionScopeName();
				State = 583;
				Match(COLONCOLON);
				}
				break;
			}
			State = 587;
			id();
			State = 588;
			actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionScopeNameContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEXER() { return GetToken(ANTLRv2Parser.LEXER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(ANTLRv2Parser.PARSER, 0); }
		public ActionScopeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionScopeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterActionScopeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitActionScopeName(this);
		}
	}

	[RuleVersion(0)]
	public ActionScopeNameContext actionScopeName() {
		ActionScopeNameContext _localctx = new ActionScopeNameContext(Context, State);
		EnterRule(_localctx, 90, RULE_actionScopeName);
		try {
			State = 593;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GRAMMAR:
			case TREE:
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 590;
				id();
				}
				break;
			case LEXER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 591;
				Match(LEXER);
				}
				break;
			case PARSER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 592;
				Match(PARSER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleActionContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public RuleActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterRuleAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitRuleAction(this);
		}
	}

	[RuleVersion(0)]
	public RuleActionContext ruleAction() {
		RuleActionContext _localctx = new RuleActionContext(Context, State);
		EnterRule(_localctx, 92, RULE_ruleAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 595;
			actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltListContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public AlternativeContext[] alternative() {
			return GetRuleContexts<AlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlternativeContext alternative(int i) {
			return GetRuleContext<AlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(ANTLRv2Parser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(ANTLRv2Parser.OR, i);
		}
		public AltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterAltList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitAltList(this);
		}
	}

	[RuleVersion(0)]
	public AltListContext altList() {
		AltListContext _localctx = new AltListContext(Context, State);
		EnterRule(_localctx, 94, RULE_altList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 597;
			alternative();
			State = 602;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 598;
				Match(OR);
				State = 599;
				alternative();
				}
				}
				State = 604;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionBlockContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_ACTION() { return GetToken(ANTLRv2Parser.BEGIN_ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_ACTION() { return GetToken(ANTLRv2Parser.END_ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ACTION_CONTENT() { return GetTokens(ANTLRv2Parser.ACTION_CONTENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION_CONTENT(int i) {
			return GetToken(ANTLRv2Parser.ACTION_CONTENT, i);
		}
		public ActionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterActionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitActionBlock(this);
		}
	}

	[RuleVersion(0)]
	public ActionBlockContext actionBlock() {
		ActionBlockContext _localctx = new ActionBlockContext(Context, State);
		EnterRule(_localctx, 96, RULE_actionBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 605;
			Match(BEGIN_ACTION);
			State = 609;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ACTION_CONTENT) {
				{
				{
				State = 606;
				Match(ACTION_CONTENT);
				}
				}
				State = 611;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 612;
			Match(END_ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgActionBlockContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_ARGUMENT() { return GetToken(ANTLRv2Parser.BEGIN_ARGUMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_ARGUMENT() { return GetToken(ANTLRv2Parser.END_ARGUMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ARGUMENT_CONTENT() { return GetTokens(ANTLRv2Parser.ARGUMENT_CONTENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARGUMENT_CONTENT(int i) {
			return GetToken(ANTLRv2Parser.ARGUMENT_CONTENT, i);
		}
		public ArgActionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argActionBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterArgActionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitArgActionBlock(this);
		}
	}

	[RuleVersion(0)]
	public ArgActionBlockContext argActionBlock() {
		ArgActionBlockContext _localctx = new ArgActionBlockContext(Context, State);
		EnterRule(_localctx, 98, RULE_argActionBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 614;
			Match(BEGIN_ARGUMENT);
			State = 618;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ARGUMENT_CONTENT) {
				{
				{
				State = 615;
				Match(ARGUMENT_CONTENT);
				}
				}
				State = 620;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 621;
			Match(END_ARGUMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x62', '\x272', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x3', '\x2', '\a', '\x2', 
		'h', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 'k', '\v', '\x2', '\x3', 
		'\x2', '\x5', '\x2', 'n', '\n', '\x2', '\x3', '\x2', '\a', '\x2', 'q', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', 't', '\v', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'z', '\n', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x5', '\x4', '\x7F', '\n', 
		'\x4', '\x3', '\x4', '\x5', '\x4', '\x82', '\n', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x87', '\n', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', 
		'\x8E', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x91', '\v', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 
		'\x98', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x9B', '\v', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 
		'\xA2', '\n', '\a', '\f', '\a', '\xE', '\a', '\xA5', '\v', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 
		'\xAC', '\n', '\b', '\f', '\b', '\xE', '\b', '\xAF', '\v', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 
		'\xB6', '\n', '\t', '\f', '\t', '\xE', '\t', '\xB9', '\v', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', 
		'\v', '\xC6', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xCF', '\n', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\xD4', '\n', 
		'\xE', '\f', '\xE', '\xE', '\xE', '\xD7', '\v', '\xE', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\xDC', '\n', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x6', '\x10', '\xE1', '\n', '\x10', '\r', 
		'\x10', '\xE', '\x10', '\xE2', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xEA', '\n', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\xED', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x5', '\x11', '\xF1', '\n', '\x11', '\x5', '\x11', '\xF3', '\n', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\a', '\x12', '\x100', '\n', '\x12', '\f', '\x12', '\xE', 
		'\x12', '\x103', '\v', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x110', '\n', 
		'\x14', '\x3', '\x14', '\x5', '\x14', '\x113', '\n', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x5', '\x14', '\x117', '\n', '\x14', '\x3', '\x14', '\x5', 
		'\x14', '\x11A', '\n', '\x14', '\x3', '\x14', '\x5', '\x14', '\x11D', 
		'\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x126', '\n', 
		'\x15', '\x5', '\x15', '\x128', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x5', '\x15', '\x12C', '\n', '\x15', '\x3', '\x15', '\x5', '\x15', '\x12F', 
		'\n', '\x15', '\x3', '\x15', '\x5', '\x15', '\x132', '\n', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', 
		'\x16', '\x139', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', 
		'\x13D', '\n', '\x16', '\x3', '\x16', '\x5', '\x16', '\x140', '\n', '\x16', 
		'\x3', '\x16', '\x5', '\x16', '\x143', '\n', '\x16', '\x3', '\x17', '\x6', 
		'\x17', '\x146', '\n', '\x17', '\r', '\x17', '\xE', '\x17', '\x147', '\x3', 
		'\x18', '\x5', '\x18', '\x14B', '\n', '\x18', '\x3', '\x18', '\x5', '\x18', 
		'\x14E', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x152', 
		'\n', '\x18', '\x3', '\x18', '\x5', '\x18', '\x155', '\n', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x5', '\x18', '\x159', '\n', '\x18', '\x3', '\x18', 
		'\x5', '\x18', '\x15C', '\n', '\x18', '\x3', '\x18', '\x5', '\x18', '\x15F', 
		'\n', '\x18', '\x3', '\x18', '\a', '\x18', '\x162', '\n', '\x18', '\f', 
		'\x18', '\xE', '\x18', '\x165', '\v', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x16B', '\n', '\x18', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', '\x170', '\n', '\x19', 
		'\f', '\x19', '\xE', '\x19', '\x173', '\v', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\a', 
		'\x1A', '\x17B', '\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', '\x17E', '\v', 
		'\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\a', '\x1B', '\x183', 
		'\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', '\x186', '\v', '\x1B', '\x3', 
		'\x1C', '\x5', '\x1C', '\x189', '\n', '\x1C', '\x3', '\x1C', '\a', '\x1C', 
		'\x18C', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\x18F', '\v', '\x1C', 
		'\x3', '\x1D', '\x6', '\x1D', '\x192', '\n', '\x1D', '\r', '\x1D', '\xE', 
		'\x1D', '\x193', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x198', 
		'\n', '\x1E', '\x3', '\x1E', '\a', '\x1E', '\x19B', '\n', '\x1E', '\f', 
		'\x1E', '\xE', '\x1E', '\x19E', '\v', '\x1E', '\x3', '\x1F', '\x3', '\x1F', 
		'\a', '\x1F', '\x1A2', '\n', '\x1F', '\f', '\x1F', '\xE', '\x1F', '\x1A5', 
		'\v', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', 
		'\x3', '!', '\x5', '!', '\x1AD', '\n', '!', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\a', '\"', '\x1B8', '\n', '\"', '\f', '\"', '\xE', 
		'\"', '\x1BB', '\v', '\"', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x5', '#', '\x1C4', '\n', '#', 
		'\x3', '#', '\x3', '#', '\x5', '#', '\x1C8', '\n', '#', '\x3', '#', '\x5', 
		'#', '\x1CB', '\n', '#', '\x3', '#', '\x3', '#', '\x5', '#', '\x1CF', 
		'\n', '#', '\x5', '#', '\x1D1', '\n', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x5', '#', '\x1D6', '\n', '#', '\x3', '#', '\x3', '#', '\x5', '#', 
		'\x1DA', '\n', '#', '\x3', '#', '\x5', '#', '\x1DD', '\n', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x5', '#', '\x1E4', 
		'\n', '#', '\x3', '#', '\x5', '#', '\x1E7', '\n', '#', '\x3', '#', '\x3', 
		'#', '\x5', '#', '\x1EB', '\n', '#', '\x3', '#', '\x5', '#', '\x1EE', 
		'\n', '#', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\x6', '%', '\x1F5', '\n', '%', '\r', '%', '\xE', '%', '\x1F6', '\x3', 
		'%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\x5', '&', '\x1FE', 
		'\n', '&', '\x3', '&', '\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', 
		'\x5', '\'', '\x205', '\n', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\x5', '\'', '\x20C', '\n', '\'', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\x5', '\'', '\x211', '\n', '\'', '\x3', '\'', 
		'\x5', '\'', '\x214', '\n', '\'', '\x3', '\'', '\x5', '\'', '\x217', '\n', 
		'\'', '\x3', '(', '\x5', '(', '\x21A', '\n', '(', '\x3', ')', '\x3', ')', 
		'\x3', ')', '\x3', ')', '\x5', ')', '\x220', '\n', ')', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x5', ')', '\x225', '\n', ')', '\x3', '*', '\x3', '*', 
		'\x5', '*', '\x229', '\n', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x5', 
		'*', '\x22E', '\n', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', 
		'\x5', '*', '\x234', '\n', '*', '\x3', '+', '\x3', '+', '\x5', '+', '\x238', 
		'\n', '+', '\x3', '+', '\x3', '+', '\x5', '+', '\x23C', '\n', '+', '\x3', 
		',', '\x3', ',', '\x3', ',', '\a', ',', '\x241', '\n', ',', '\f', ',', 
		'\xE', ',', '\x244', '\v', ',', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x5', '.', '\x24C', '\n', '.', '\x3', '.', 
		'\x3', '.', '\x3', '.', '\x3', '/', '\x3', '/', '\x3', '/', '\x5', '/', 
		'\x254', '\n', '/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x31', '\x3', 
		'\x31', '\x3', '\x31', '\a', '\x31', '\x25B', '\n', '\x31', '\f', '\x31', 
		'\xE', '\x31', '\x25E', '\v', '\x31', '\x3', '\x32', '\x3', '\x32', '\a', 
		'\x32', '\x262', '\n', '\x32', '\f', '\x32', '\xE', '\x32', '\x265', '\v', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x33', '\x3', '\x33', '\a', 
		'\x33', '\x26B', '\n', '\x33', '\f', '\x33', '\xE', '\x33', '\x26E', '\v', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x2', '\x2', '\x34', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', 
		'\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', 
		'\\', '^', '`', '\x62', '\x64', '\x2', '\b', '\x3', '\x2', ';', '=', '\x5', 
		'\x2', ':', ':', '@', '@', 'Z', 'Z', '\x4', '\x2', 'M', 'N', 'T', 'T', 
		'\x3', '\x2', '%', '&', '\x4', '\x2', '-', '-', 'Y', 'Y', '\x5', '\x2', 
		':', ':', '@', '@', 'Y', 'Z', '\x2', '\x2A5', '\x2', 'i', '\x3', '\x2', 
		'\x2', '\x2', '\x4', 'w', '\x3', '\x2', '\x2', '\x2', '\x6', '~', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x8A', '\x3', '\x2', '\x2', '\x2', '\n', '\x94', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\x9E', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\xA8', '\x3', '\x2', '\x2', '\x2', '\x10', '\xB2', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\xBC', '\x3', '\x2', '\x2', '\x2', '\x14', '\xC5', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\xC7', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\xCE', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xD0', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\xD8', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xDD', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\xF2', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\xF6', '\x3', '\x2', '\x2', '\x2', '$', '\x106', '\x3', '\x2', '\x2', 
		'\x2', '&', '\x10A', '\x3', '\x2', '\x2', '\x2', '(', '\x127', '\x3', 
		'\x2', '\x2', '\x2', '*', '\x133', '\x3', '\x2', '\x2', '\x2', ',', '\x145', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x14A', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x16C', '\x3', '\x2', '\x2', '\x2', '\x32', '\x176', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x36', '\x188', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x191', '\x3', '\x2', '\x2', '\x2', 
		':', '\x195', '\x3', '\x2', '\x2', '\x2', '<', '\x19F', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x1A6', '\x3', '\x2', '\x2', '\x2', '@', '\x1AA', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x1AE', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x1ED', '\x3', '\x2', '\x2', '\x2', '\x46', '\x1EF', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x1F1', '\x3', '\x2', '\x2', '\x2', 'J', '\x1FD', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x201', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x219', '\x3', '\x2', '\x2', '\x2', 'P', '\x224', '\x3', '\x2', 
		'\x2', '\x2', 'R', '\x233', '\x3', '\x2', '\x2', '\x2', 'T', '\x23B', 
		'\x3', '\x2', '\x2', '\x2', 'V', '\x23D', '\x3', '\x2', '\x2', '\x2', 
		'X', '\x245', '\x3', '\x2', '\x2', '\x2', 'Z', '\x247', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\x253', '\x3', '\x2', '\x2', '\x2', '^', '\x255', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x257', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x25F', '\x3', '\x2', '\x2', '\x2', '\x64', '\x268', '\x3', '\x2', 
		'\x2', '\x2', '\x66', 'h', '\x5', '\x4', '\x3', '\x2', 'g', '\x66', '\x3', 
		'\x2', '\x2', '\x2', 'h', 'k', '\x3', '\x2', '\x2', '\x2', 'i', 'g', '\x3', 
		'\x2', '\x2', '\x2', 'i', 'j', '\x3', '\x2', '\x2', '\x2', 'j', 'm', '\x3', 
		'\x2', '\x2', '\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 'l', 'n', '\x5', 
		'\b', '\x5', '\x2', 'm', 'l', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\x3', 
		'\x2', '\x2', '\x2', 'n', 'r', '\x3', '\x2', '\x2', '\x2', 'o', 'q', '\x5', 
		'\x6', '\x4', '\x2', 'p', 'o', '\x3', '\x2', '\x2', '\x2', 'q', 't', '\x3', 
		'\x2', '\x2', '\x2', 'r', 'p', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x3', 
		'\x2', '\x2', '\x2', 's', 'u', '\x3', '\x2', '\x2', '\x2', 't', 'r', '\x3', 
		'\x2', '\x2', '\x2', 'u', 'v', '\a', '\x2', '\x2', '\x3', 'v', '\x3', 
		'\x3', '\x2', '\x2', '\x2', 'w', 'y', '\a', '\x32', '\x2', '\x2', 'x', 
		'z', '\a', '-', '\x2', '\x2', 'y', 'x', '\x3', '\x2', '\x2', '\x2', 'y', 
		'z', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\x3', '\x2', '\x2', '\x2', 
		'{', '|', '\x5', '\x62', '\x32', '\x2', '|', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '}', '\x7F', '\x5', '\x62', '\x32', '\x2', '~', '}', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x81', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x82', '\a', '\x3', '\x2', '\x2', 
		'\x81', '\x80', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x86', '\x3', '\x2', '\x2', '\x2', '\x83', '\x87', 
		'\x5', '(', '\x15', '\x2', '\x84', '\x87', '\x5', '*', '\x16', '\x2', 
		'\x85', '\x87', '\x5', '&', '\x14', '\x2', '\x86', '\x83', '\x3', '\x2', 
		'\x2', '\x2', '\x86', '\x84', '\x3', '\x2', '\x2', '\x2', '\x86', '\x85', 
		'\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x89', '\x5', ',', '\x17', '\x2', '\x89', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\x8A', '\x8B', '\a', '\x30', '\x2', '\x2', '\x8B', '\x8F', 
		'\a', 'I', '\x2', '\x2', '\x8C', '\x8E', '\x5', '\x12', '\n', '\x2', '\x8D', 
		'\x8C', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x8F', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\x3', 
		'\x2', '\x2', '\x2', '\x90', '\x92', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\a', 'O', '\x2', 
		'\x2', '\x93', '\t', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\a', 
		'\x30', '\x2', '\x2', '\x95', '\x99', '\a', 'I', '\x2', '\x2', '\x96', 
		'\x98', '\x5', '\x12', '\n', '\x2', '\x97', '\x96', '\x3', '\x2', '\x2', 
		'\x2', '\x98', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x99', '\x97', '\x3', 
		'\x2', '\x2', '\x2', '\x99', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9A', 
		'\x9C', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\x9C', '\x9D', '\a', 'O', '\x2', '\x2', '\x9D', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x9E', '\x9F', '\a', '\x30', '\x2', '\x2', '\x9F', '\xA3', 
		'\a', 'I', '\x2', '\x2', '\xA0', '\xA2', '\x5', '\x12', '\n', '\x2', '\xA1', 
		'\xA0', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\xA3', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\x3', 
		'\x2', '\x2', '\x2', '\xA4', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\a', 'O', '\x2', 
		'\x2', '\xA7', '\r', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', '\a', 
		'\x30', '\x2', '\x2', '\xA9', '\xAD', '\a', 'I', '\x2', '\x2', '\xAA', 
		'\xAC', '\x5', '\x16', '\f', '\x2', '\xAB', '\xAA', '\x3', '\x2', '\x2', 
		'\x2', '\xAC', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\xAD', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xAE', 
		'\xB0', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '\xB0', '\xB1', '\a', 'O', '\x2', '\x2', '\xB1', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\xB2', '\xB3', '\a', '\x30', '\x2', '\x2', '\xB3', 
		'\xB7', '\a', 'I', '\x2', '\x2', '\xB4', '\xB6', '\x5', '\x12', '\n', 
		'\x2', '\xB5', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB9', '\x3', 
		'\x2', '\x2', '\x2', '\xB7', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'\xB8', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xBA', '\x3', '\x2', '\x2', 
		'\x2', '\xB9', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\a', 
		'O', '\x2', '\x2', '\xBB', '\x11', '\x3', '\x2', '\x2', '\x2', '\xBC', 
		'\xBD', '\x5', 'X', '-', '\x2', '\xBD', '\xBE', '\a', 'H', '\x2', '\x2', 
		'\xBE', '\xBF', '\x5', '\x14', '\v', '\x2', '\xBF', '\xC0', '\a', 'R', 
		'\x2', '\x2', '\xC0', '\x13', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC6', 
		'\x5', 'V', ',', '\x2', '\xC2', '\xC6', '\a', '-', '\x2', '\x2', '\xC3', 
		'\xC6', '\a', ',', '\x2', '\x2', '\xC4', '\xC6', '\a', '+', '\x2', '\x2', 
		'\xC5', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC2', '\x3', '\x2', 
		'\x2', '\x2', '\xC5', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC4', 
		'\x3', '\x2', '\x2', '\x2', '\xC6', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\xC7', '\xC8', '\x5', 'X', '-', '\x2', '\xC8', '\xC9', '\a', 'H', '\x2', 
		'\x2', '\xC9', '\xCA', '\x5', '\x18', '\r', '\x2', '\xCA', '\xCB', '\a', 
		'R', '\x2', '\x2', '\xCB', '\x17', '\x3', '\x2', '\x2', '\x2', '\xCC', 
		'\xCF', '\x5', '\x1A', '\xE', '\x2', '\xCD', '\xCF', '\x5', '\x14', '\v', 
		'\x2', '\xCE', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCD', '\x3', 
		'\x2', '\x2', '\x2', '\xCF', '\x19', '\x3', '\x2', '\x2', '\x2', '\xD0', 
		'\xD5', '\x5', '\x1C', '\xF', '\x2', '\xD1', '\xD2', '\a', 'L', '\x2', 
		'\x2', '\xD2', '\xD4', '\x5', '\x1C', '\xF', '\x2', '\xD3', '\xD1', '\x3', 
		'\x2', '\x2', '\x2', '\xD4', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD5', 
		'\xD3', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\x3', '\x2', '\x2', 
		'\x2', '\xD6', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD5', '\x3', 
		'\x2', '\x2', '\x2', '\xD8', '\xDB', '\a', ',', '\x2', '\x2', '\xD9', 
		'\xDA', '\a', '\f', '\x2', '\x2', '\xDA', '\xDC', '\a', ',', '\x2', '\x2', 
		'\xDB', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', '\x3', '\x2', 
		'\x2', '\x2', '\xDC', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', 
		'\a', '\x31', '\x2', '\x2', '\xDE', '\xE0', '\a', 'I', '\x2', '\x2', '\xDF', 
		'\xE1', '\x5', ' ', '\x11', '\x2', '\xE0', '\xDF', '\x3', '\x2', '\x2', 
		'\x2', '\xE1', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE0', '\x3', 
		'\x2', '\x2', '\x2', '\xE2', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xE4', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE5', '\a', 'O', '\x2', 
		'\x2', '\xE5', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE9', '\a', 
		'Y', '\x2', '\x2', '\xE7', '\xE8', '\a', 'H', '\x2', '\x2', '\xE8', '\xEA', 
		'\a', '-', '\x2', '\x2', '\xE9', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE9', 
		'\xEA', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEC', '\x3', '\x2', '\x2', 
		'\x2', '\xEB', '\xED', '\x5', '\"', '\x12', '\x2', '\xEC', '\xEB', '\x3', 
		'\x2', '\x2', '\x2', '\xEC', '\xED', '\x3', '\x2', '\x2', '\x2', '\xED', 
		'\xF3', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xF0', '\a', '-', '\x2', 
		'\x2', '\xEF', '\xF1', '\x5', '\"', '\x12', '\x2', '\xF0', '\xEF', '\x3', 
		'\x2', '\x2', '\x2', '\xF0', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF1', 
		'\xF3', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xE6', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF4', '\x3', 
		'\x2', '\x2', '\x2', '\xF4', '\xF5', '\a', 'R', '\x2', '\x2', '\xF5', 
		'!', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', '\a', '\x41', '\x2', 
		'\x2', '\xF7', '\xF8', '\x5', 'X', '-', '\x2', '\xF8', '\xF9', '\a', 'H', 
		'\x2', '\x2', '\xF9', '\x101', '\x5', '\x14', '\v', '\x2', '\xFA', '\xFB', 
		'\a', 'R', '\x2', '\x2', '\xFB', '\xFC', '\x5', 'X', '-', '\x2', '\xFC', 
		'\xFD', '\a', 'H', '\x2', '\x2', '\xFD', '\xFE', '\x5', '\x14', '\v', 
		'\x2', '\xFE', '\x100', '\x3', '\x2', '\x2', '\x2', '\xFF', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '\x100', '\x103', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\xFF', '\x3', '\x2', '\x2', '\x2', '\x101', '\x102', '\x3', '\x2', '\x2', 
		'\x2', '\x102', '\x104', '\x3', '\x2', '\x2', '\x2', '\x103', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\x104', '\x105', '\a', '\x42', '\x2', '\x2', 
		'\x105', '#', '\x3', '\x2', '\x2', '\x2', '\x106', '\x107', '\a', 'K', 
		'\x2', '\x2', '\x107', '\x108', '\a', '-', '\x2', '\x2', '\x108', '\x109', 
		'\a', 'Q', '\x2', '\x2', '\x109', '%', '\x3', '\x2', '\x2', '\x2', '\x10A', 
		'\x10B', '\a', '\x33', '\x2', '\x2', '\x10B', '\x112', '\x5', 'X', '-', 
		'\x2', '\x10C', '\x10D', '\a', '\x34', '\x2', '\x2', '\x10D', '\x10F', 
		'\a', '\x4', '\x2', '\x2', '\x10E', '\x110', '\x5', '$', '\x13', '\x2', 
		'\x10F', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x110', '\x3', 
		'\x2', '\x2', '\x2', '\x110', '\x113', '\x3', '\x2', '\x2', '\x2', '\x111', 
		'\x113', '\x3', '\x2', '\x2', '\x2', '\x112', '\x10C', '\x3', '\x2', '\x2', 
		'\x2', '\x112', '\x111', '\x3', '\x2', '\x2', '\x2', '\x113', '\x114', 
		'\x3', '\x2', '\x2', '\x2', '\x114', '\x116', '\a', 'R', '\x2', '\x2', 
		'\x115', '\x117', '\x5', '\n', '\x6', '\x2', '\x116', '\x115', '\x3', 
		'\x2', '\x2', '\x2', '\x116', '\x117', '\x3', '\x2', '\x2', '\x2', '\x117', 
		'\x119', '\x3', '\x2', '\x2', '\x2', '\x118', '\x11A', '\x5', '\x1E', 
		'\x10', '\x2', '\x119', '\x118', '\x3', '\x2', '\x2', '\x2', '\x119', 
		'\x11A', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11C', '\x3', '\x2', '\x2', 
		'\x2', '\x11B', '\x11D', '\x5', '\x62', '\x32', '\x2', '\x11C', '\x11B', 
		'\x3', '\x2', '\x2', '\x2', '\x11C', '\x11D', '\x3', '\x2', '\x2', '\x2', 
		'\x11D', '\'', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11F', '\a', '\x35', 
		'\x2', '\x2', '\x11F', '\x128', '\x5', 'X', '-', '\x2', '\x120', '\x121', 
		'\a', '\x33', '\x2', '\x2', '\x121', '\x122', '\x5', 'X', '-', '\x2', 
		'\x122', '\x123', '\a', '\x34', '\x2', '\x2', '\x123', '\x125', '\a', 
		'\x5', '\x2', '\x2', '\x124', '\x126', '\x5', '$', '\x13', '\x2', '\x125', 
		'\x124', '\x3', '\x2', '\x2', '\x2', '\x125', '\x126', '\x3', '\x2', '\x2', 
		'\x2', '\x126', '\x128', '\x3', '\x2', '\x2', '\x2', '\x127', '\x11E', 
		'\x3', '\x2', '\x2', '\x2', '\x127', '\x120', '\x3', '\x2', '\x2', '\x2', 
		'\x128', '\x129', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12B', '\a', 
		'R', '\x2', '\x2', '\x12A', '\x12C', '\x5', '\xE', '\b', '\x2', '\x12B', 
		'\x12A', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x12C', '\x3', '\x2', '\x2', 
		'\x2', '\x12C', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12F', 
		'\x5', '\x1E', '\x10', '\x2', '\x12E', '\x12D', '\x3', '\x2', '\x2', '\x2', 
		'\x12E', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x131', '\x3', 
		'\x2', '\x2', '\x2', '\x130', '\x132', '\x5', '\x62', '\x32', '\x2', '\x131', 
		'\x130', '\x3', '\x2', '\x2', '\x2', '\x131', '\x132', '\x3', '\x2', '\x2', 
		'\x2', '\x132', ')', '\x3', '\x2', '\x2', '\x2', '\x133', '\x134', '\a', 
		'\x33', '\x2', '\x2', '\x134', '\x135', '\x5', 'X', '-', '\x2', '\x135', 
		'\x136', '\a', '\x34', '\x2', '\x2', '\x136', '\x138', '\a', '\x36', '\x2', 
		'\x2', '\x137', '\x139', '\x5', '$', '\x13', '\x2', '\x138', '\x137', 
		'\x3', '\x2', '\x2', '\x2', '\x138', '\x139', '\x3', '\x2', '\x2', '\x2', 
		'\x139', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13C', '\a', 
		'R', '\x2', '\x2', '\x13B', '\x13D', '\x5', '\f', '\a', '\x2', '\x13C', 
		'\x13B', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13D', '\x3', '\x2', '\x2', 
		'\x2', '\x13D', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x140', 
		'\x5', '\x1E', '\x10', '\x2', '\x13F', '\x13E', '\x3', '\x2', '\x2', '\x2', 
		'\x13F', '\x140', '\x3', '\x2', '\x2', '\x2', '\x140', '\x142', '\x3', 
		'\x2', '\x2', '\x2', '\x141', '\x143', '\x5', '\x62', '\x32', '\x2', '\x142', 
		'\x141', '\x3', '\x2', '\x2', '\x2', '\x142', '\x143', '\x3', '\x2', '\x2', 
		'\x2', '\x143', '+', '\x3', '\x2', '\x2', '\x2', '\x144', '\x146', '\x5', 
		'.', '\x18', '\x2', '\x145', '\x144', '\x3', '\x2', '\x2', '\x2', '\x146', 
		'\x147', '\x3', '\x2', '\x2', '\x2', '\x147', '\x145', '\x3', '\x2', '\x2', 
		'\x2', '\x147', '\x148', '\x3', '\x2', '\x2', '\x2', '\x148', '-', '\x3', 
		'\x2', '\x2', '\x2', '\x149', '\x14B', '\a', '\x3', '\x2', '\x2', '\x14A', 
		'\x149', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14B', '\x3', '\x2', '\x2', 
		'\x2', '\x14B', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14E', 
		'\t', '\x2', '\x2', '\x2', '\x14D', '\x14C', '\x3', '\x2', '\x2', '\x2', 
		'\x14D', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x14F', '\x3', 
		'\x2', '\x2', '\x2', '\x14F', '\x151', '\x5', 'X', '-', '\x2', '\x150', 
		'\x152', '\a', '&', '\x2', '\x2', '\x151', '\x150', '\x3', '\x2', '\x2', 
		'\x2', '\x151', '\x152', '\x3', '\x2', '\x2', '\x2', '\x152', '\x154', 
		'\x3', '\x2', '\x2', '\x2', '\x153', '\x155', '\x5', '\x64', '\x33', '\x2', 
		'\x154', '\x153', '\x3', '\x2', '\x2', '\x2', '\x154', '\x155', '\x3', 
		'\x2', '\x2', '\x2', '\x155', '\x158', '\x3', '\x2', '\x2', '\x2', '\x156', 
		'\x157', '\a', '>', '\x2', '\x2', '\x157', '\x159', '\x5', '\x64', '\x33', 
		'\x2', '\x158', '\x156', '\x3', '\x2', '\x2', '\x2', '\x158', '\x159', 
		'\x3', '\x2', '\x2', '\x2', '\x159', '\x15B', '\x3', '\x2', '\x2', '\x2', 
		'\x15A', '\x15C', '\x5', '\x32', '\x1A', '\x2', '\x15B', '\x15A', '\x3', 
		'\x2', '\x2', '\x2', '\x15B', '\x15C', '\x3', '\x2', '\x2', '\x2', '\x15C', 
		'\x15E', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x15F', '\x5', '\x30', 
		'\x19', '\x2', '\x15E', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x15E', 
		'\x15F', '\x3', '\x2', '\x2', '\x2', '\x15F', '\x163', '\x3', '\x2', '\x2', 
		'\x2', '\x160', '\x162', '\x5', '^', '\x30', '\x2', '\x161', '\x160', 
		'\x3', '\x2', '\x2', '\x2', '\x162', '\x165', '\x3', '\x2', '\x2', '\x2', 
		'\x163', '\x161', '\x3', '\x2', '\x2', '\x2', '\x163', '\x164', '\x3', 
		'\x2', '\x2', '\x2', '\x164', '\x166', '\x3', '\x2', '\x2', '\x2', '\x165', 
		'\x163', '\x3', '\x2', '\x2', '\x2', '\x166', '\x167', '\a', '\x44', '\x2', 
		'\x2', '\x167', '\x168', '\x5', '`', '\x31', '\x2', '\x168', '\x16A', 
		'\a', 'R', '\x2', '\x2', '\x169', '\x16B', '\x5', '\x38', '\x1D', '\x2', 
		'\x16A', '\x169', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x16B', '\x3', 
		'\x2', '\x2', '\x2', '\x16B', '/', '\x3', '\x2', '\x2', '\x2', '\x16C', 
		'\x16D', '\a', '\x30', '\x2', '\x2', '\x16D', '\x171', '\a', 'I', '\x2', 
		'\x2', '\x16E', '\x170', '\x5', '\x12', '\n', '\x2', '\x16F', '\x16E', 
		'\x3', '\x2', '\x2', '\x2', '\x170', '\x173', '\x3', '\x2', '\x2', '\x2', 
		'\x171', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x171', '\x172', '\x3', 
		'\x2', '\x2', '\x2', '\x172', '\x174', '\x3', '\x2', '\x2', '\x2', '\x173', 
		'\x171', '\x3', '\x2', '\x2', '\x2', '\x174', '\x175', '\a', 'O', '\x2', 
		'\x2', '\x175', '\x31', '\x3', '\x2', '\x2', '\x2', '\x176', '\x177', 
		'\a', '?', '\x2', '\x2', '\x177', '\x17C', '\x5', 'X', '-', '\x2', '\x178', 
		'\x179', '\a', '\x46', '\x2', '\x2', '\x179', '\x17B', '\x5', 'X', '-', 
		'\x2', '\x17A', '\x178', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x17E', 
		'\x3', '\x2', '\x2', '\x2', '\x17C', '\x17A', '\x3', '\x2', '\x2', '\x2', 
		'\x17C', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x17E', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x17F', 
		'\x184', '\x5', '\x36', '\x1C', '\x2', '\x180', '\x181', '\a', 'L', '\x2', 
		'\x2', '\x181', '\x183', '\x5', '\x36', '\x1C', '\x2', '\x182', '\x180', 
		'\x3', '\x2', '\x2', '\x2', '\x183', '\x186', '\x3', '\x2', '\x2', '\x2', 
		'\x184', '\x182', '\x3', '\x2', '\x2', '\x2', '\x184', '\x185', '\x3', 
		'\x2', '\x2', '\x2', '\x185', '\x35', '\x3', '\x2', '\x2', '\x2', '\x186', 
		'\x184', '\x3', '\x2', '\x2', '\x2', '\x187', '\x189', '\a', '&', '\x2', 
		'\x2', '\x188', '\x187', '\x3', '\x2', '\x2', '\x2', '\x188', '\x189', 
		'\x3', '\x2', '\x2', '\x2', '\x189', '\x18D', '\x3', '\x2', '\x2', '\x2', 
		'\x18A', '\x18C', '\x5', '@', '!', '\x2', '\x18B', '\x18A', '\x3', '\x2', 
		'\x2', '\x2', '\x18C', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x18B', 
		'\x3', '\x2', '\x2', '\x2', '\x18D', '\x18E', '\x3', '\x2', '\x2', '\x2', 
		'\x18E', '\x37', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x18D', '\x3', 
		'\x2', '\x2', '\x2', '\x190', '\x192', '\x5', ':', '\x1E', '\x2', '\x191', 
		'\x190', '\x3', '\x2', '\x2', '\x2', '\x192', '\x193', '\x3', '\x2', '\x2', 
		'\x2', '\x193', '\x191', '\x3', '\x2', '\x2', '\x2', '\x193', '\x194', 
		'\x3', '\x2', '\x2', '\x2', '\x194', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\x195', '\x197', '\a', '\x37', '\x2', '\x2', '\x196', '\x198', '\x5', 
		'\x64', '\x33', '\x2', '\x197', '\x196', '\x3', '\x2', '\x2', '\x2', '\x197', 
		'\x198', '\x3', '\x2', '\x2', '\x2', '\x198', '\x19C', '\x3', '\x2', '\x2', 
		'\x2', '\x199', '\x19B', '\x5', '>', ' ', '\x2', '\x19A', '\x199', '\x3', 
		'\x2', '\x2', '\x2', '\x19B', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x19C', 
		'\x19A', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x19D', '\x3', '\x2', '\x2', 
		'\x2', '\x19D', ';', '\x3', '\x2', '\x2', '\x2', '\x19E', '\x19C', '\x3', 
		'\x2', '\x2', '\x2', '\x19F', '\x1A3', '\a', '\x37', '\x2', '\x2', '\x1A0', 
		'\x1A2', '\x5', '>', ' ', '\x2', '\x1A1', '\x1A0', '\x3', '\x2', '\x2', 
		'\x2', '\x1A2', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A1', 
		'\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A4', '\x3', '\x2', '\x2', '\x2', 
		'\x1A4', '=', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A3', '\x3', '\x2', 
		'\x2', '\x2', '\x1A6', '\x1A7', '\a', '\x38', '\x2', '\x2', '\x1A7', '\x1A8', 
		'\x5', '\x64', '\x33', '\x2', '\x1A8', '\x1A9', '\x5', '\x62', '\x32', 
		'\x2', '\x1A9', '?', '\x3', '\x2', '\x2', '\x2', '\x1AA', '\x1AC', '\x5', 
		'\x44', '#', '\x2', '\x1AB', '\x1AD', '\x5', '\x42', '\"', '\x2', '\x1AC', 
		'\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AD', '\x3', '\x2', '\x2', 
		'\x2', '\x1AD', '\x41', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1AF', 
		'\a', '\x41', '\x2', '\x2', '\x1AF', '\x1B0', '\x5', 'X', '-', '\x2', 
		'\x1B0', '\x1B1', '\a', 'H', '\x2', '\x2', '\x1B1', '\x1B9', '\x5', '\x14', 
		'\v', '\x2', '\x1B2', '\x1B3', '\a', 'R', '\x2', '\x2', '\x1B3', '\x1B4', 
		'\x5', 'X', '-', '\x2', '\x1B4', '\x1B5', '\a', 'H', '\x2', '\x2', '\x1B5', 
		'\x1B6', '\x5', '\x14', '\v', '\x2', '\x1B6', '\x1B8', '\x3', '\x2', '\x2', 
		'\x2', '\x1B7', '\x1B2', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1BB', 
		'\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1B7', '\x3', '\x2', '\x2', '\x2', 
		'\x1B9', '\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1BC', '\x3', 
		'\x2', '\x2', '\x2', '\x1BB', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x1BC', 
		'\x1BD', '\a', '\x42', '\x2', '\x2', '\x1BD', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x1BE', '\x1BF', '\x5', 'X', '-', '\x2', '\x1BF', '\x1C3', '\a', 
		'H', '\x2', '\x2', '\x1C0', '\x1C1', '\x5', 'X', '-', '\x2', '\x1C1', 
		'\x1C2', '\a', '\x44', '\x2', '\x2', '\x1C2', '\x1C4', '\x3', '\x2', '\x2', 
		'\x2', '\x1C3', '\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1C4', 
		'\x3', '\x2', '\x2', '\x2', '\x1C4', '\x1D0', '\x3', '\x2', '\x2', '\x2', 
		'\x1C5', '\x1C7', '\x5', '\x46', '$', '\x2', '\x1C6', '\x1C8', '\x5', 
		'\x64', '\x33', '\x2', '\x1C7', '\x1C6', '\x3', '\x2', '\x2', '\x2', '\x1C7', 
		'\x1C8', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1CA', '\x3', '\x2', '\x2', 
		'\x2', '\x1C9', '\x1CB', '\a', '&', '\x2', '\x2', '\x1CA', '\x1C9', '\x3', 
		'\x2', '\x2', '\x2', '\x1CA', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\x1CB', 
		'\x1D1', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1CE', '\a', 'Y', '\x2', 
		'\x2', '\x1CD', '\x1CF', '\x5', '\x64', '\x33', '\x2', '\x1CE', '\x1CD', 
		'\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1CF', '\x3', '\x2', '\x2', '\x2', 
		'\x1CF', '\x1D1', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1C5', '\x3', 
		'\x2', '\x2', '\x2', '\x1D0', '\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1D1', 
		'\x1EE', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1D3', '\x5', 'X', '-', 
		'\x2', '\x1D3', '\x1D4', '\a', '\x44', '\x2', '\x2', '\x1D4', '\x1D6', 
		'\x3', '\x2', '\x2', '\x2', '\x1D5', '\x1D2', '\x3', '\x2', '\x2', '\x2', 
		'\x1D5', '\x1D6', '\x3', '\x2', '\x2', '\x2', '\x1D6', '\x1E6', '\x3', 
		'\x2', '\x2', '\x2', '\x1D7', '\x1D9', '\x5', '\x46', '$', '\x2', '\x1D8', 
		'\x1DA', '\x5', '\x64', '\x33', '\x2', '\x1D9', '\x1D8', '\x3', '\x2', 
		'\x2', '\x2', '\x1D9', '\x1DA', '\x3', '\x2', '\x2', '\x2', '\x1DA', '\x1DC', 
		'\x3', '\x2', '\x2', '\x2', '\x1DB', '\x1DD', '\a', '&', '\x2', '\x2', 
		'\x1DC', '\x1DB', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1DD', '\x3', 
		'\x2', '\x2', '\x2', '\x1DD', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x1DE', 
		'\x1E7', '\x5', 'P', ')', '\x2', '\x1DF', '\x1E7', '\x5', 'R', '*', '\x2', 
		'\x1E0', '\x1E3', '\a', 'W', '\x2', '\x2', '\x1E1', '\x1E4', '\x5', 'T', 
		'+', '\x2', '\x1E2', '\x1E4', '\x5', 'L', '\'', '\x2', '\x1E3', '\x1E1', 
		'\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1E2', '\x3', '\x2', '\x2', '\x2', 
		'\x1E4', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x1E5', '\x1E7', '\x5', 
		'L', '\'', '\x2', '\x1E6', '\x1D7', '\x3', '\x2', '\x2', '\x2', '\x1E6', 
		'\x1DE', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1DF', '\x3', '\x2', '\x2', 
		'\x2', '\x1E6', '\x1E0', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E5', 
		'\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1EE', '\x3', '\x2', '\x2', '\x2', 
		'\x1E8', '\x1EA', '\x5', '\x62', '\x32', '\x2', '\x1E9', '\x1EB', '\a', 
		'N', '\x2', '\x2', '\x1EA', '\x1E9', '\x3', '\x2', '\x2', '\x2', '\x1EA', 
		'\x1EB', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1EE', '\x3', '\x2', '\x2', 
		'\x2', '\x1EC', '\x1EE', '\x5', 'H', '%', '\x2', '\x1ED', '\x1BE', '\x3', 
		'\x2', '\x2', '\x2', '\x1ED', '\x1D5', '\x3', '\x2', '\x2', '\x2', '\x1ED', 
		'\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1ED', '\x1EC', '\x3', '\x2', '\x2', 
		'\x2', '\x1EE', '\x45', '\x3', '\x2', '\x2', '\x2', '\x1EF', '\x1F0', 
		'\t', '\x3', '\x2', '\x2', '\x1F0', 'G', '\x3', '\x2', '\x2', '\x2', '\x1F1', 
		'\x1F2', '\a', '$', '\x2', '\x2', '\x1F2', '\x1F4', '\x5', 'J', '&', '\x2', 
		'\x1F3', '\x1F5', '\x5', '@', '!', '\x2', '\x1F4', '\x1F3', '\x3', '\x2', 
		'\x2', '\x2', '\x1F5', '\x1F6', '\x3', '\x2', '\x2', '\x2', '\x1F6', '\x1F4', 
		'\x3', '\x2', '\x2', '\x2', '\x1F6', '\x1F7', '\x3', '\x2', '\x2', '\x2', 
		'\x1F7', '\x1F8', '\x3', '\x2', '\x2', '\x2', '\x1F8', '\x1F9', '\a', 
		'Q', '\x2', '\x2', '\x1F9', 'I', '\x3', '\x2', '\x2', '\x2', '\x1FA', 
		'\x1FB', '\x5', 'X', '-', '\x2', '\x1FB', '\x1FC', '\a', '\x44', '\x2', 
		'\x2', '\x1FC', '\x1FE', '\x3', '\x2', '\x2', '\x2', '\x1FD', '\x1FA', 
		'\x3', '\x2', '\x2', '\x2', '\x1FD', '\x1FE', '\x3', '\x2', '\x2', '\x2', 
		'\x1FE', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x1FF', '\x200', '\x5', 
		'R', '*', '\x2', '\x200', 'K', '\x3', '\x2', '\x2', '\x2', '\x201', '\x20B', 
		'\a', 'K', '\x2', '\x2', '\x202', '\x204', '\x5', '\x10', '\t', '\x2', 
		'\x203', '\x205', '\x5', '\x62', '\x32', '\x2', '\x204', '\x203', '\x3', 
		'\x2', '\x2', '\x2', '\x204', '\x205', '\x3', '\x2', '\x2', '\x2', '\x205', 
		'\x206', '\x3', '\x2', '\x2', '\x2', '\x206', '\x207', '\a', '\x44', '\x2', 
		'\x2', '\x207', '\x20C', '\x3', '\x2', '\x2', '\x2', '\x208', '\x209', 
		'\x5', '\x62', '\x32', '\x2', '\x209', '\x20A', '\a', '\x44', '\x2', '\x2', 
		'\x20A', '\x20C', '\x3', '\x2', '\x2', '\x2', '\x20B', '\x202', '\x3', 
		'\x2', '\x2', '\x2', '\x20B', '\x208', '\x3', '\x2', '\x2', '\x2', '\x20B', 
		'\x20C', '\x3', '\x2', '\x2', '\x2', '\x20C', '\x20D', '\x3', '\x2', '\x2', 
		'\x2', '\x20D', '\x20E', '\x5', '\x34', '\x1B', '\x2', '\x20E', '\x216', 
		'\a', 'Q', '\x2', '\x2', '\x20F', '\x211', '\t', '\x4', '\x2', '\x2', 
		'\x210', '\x20F', '\x3', '\x2', '\x2', '\x2', '\x210', '\x211', '\x3', 
		'\x2', '\x2', '\x2', '\x211', '\x213', '\x3', '\x2', '\x2', '\x2', '\x212', 
		'\x214', '\a', '&', '\x2', '\x2', '\x213', '\x212', '\x3', '\x2', '\x2', 
		'\x2', '\x213', '\x214', '\x3', '\x2', '\x2', '\x2', '\x214', '\x217', 
		'\x3', '\x2', '\x2', '\x2', '\x215', '\x217', '\a', 'S', '\x2', '\x2', 
		'\x216', '\x210', '\x3', '\x2', '\x2', '\x2', '\x216', '\x215', '\x3', 
		'\x2', '\x2', '\x2', '\x217', 'M', '\x3', '\x2', '\x2', '\x2', '\x218', 
		'\x21A', '\t', '\x5', '\x2', '\x2', '\x219', '\x218', '\x3', '\x2', '\x2', 
		'\x2', '\x219', '\x21A', '\x3', '\x2', '\x2', '\x2', '\x21A', 'O', '\x3', 
		'\x2', '\x2', '\x2', '\x21B', '\x21C', '\a', ',', '\x2', '\x2', '\x21C', 
		'\x21D', '\a', '\f', '\x2', '\x2', '\x21D', '\x21F', '\a', ',', '\x2', 
		'\x2', '\x21E', '\x220', '\a', '&', '\x2', '\x2', '\x21F', '\x21E', '\x3', 
		'\x2', '\x2', '\x2', '\x21F', '\x220', '\x3', '\x2', '\x2', '\x2', '\x220', 
		'\x225', '\x3', '\x2', '\x2', '\x2', '\x221', '\x222', '\t', '\x6', '\x2', 
		'\x2', '\x222', '\x223', '\a', '\f', '\x2', '\x2', '\x223', '\x225', '\x5', 
		'N', '(', '\x2', '\x224', '\x21B', '\x3', '\x2', '\x2', '\x2', '\x224', 
		'\x221', '\x3', '\x2', '\x2', '\x2', '\x225', 'Q', '\x3', '\x2', '\x2', 
		'\x2', '\x226', '\x228', '\a', ',', '\x2', '\x2', '\x227', '\x229', '\a', 
		'&', '\x2', '\x2', '\x228', '\x227', '\x3', '\x2', '\x2', '\x2', '\x228', 
		'\x229', '\x3', '\x2', '\x2', '\x2', '\x229', '\x234', '\x3', '\x2', '\x2', 
		'\x2', '\x22A', '\x22B', '\a', 'Y', '\x2', '\x2', '\x22B', '\x22D', '\x5', 
		'N', '(', '\x2', '\x22C', '\x22E', '\x5', '\x64', '\x33', '\x2', '\x22D', 
		'\x22C', '\x3', '\x2', '\x2', '\x2', '\x22D', '\x22E', '\x3', '\x2', '\x2', 
		'\x2', '\x22E', '\x234', '\x3', '\x2', '\x2', '\x2', '\x22F', '\x230', 
		'\a', '-', '\x2', '\x2', '\x230', '\x234', '\x5', 'N', '(', '\x2', '\x231', 
		'\x232', '\a', 'G', '\x2', '\x2', '\x232', '\x234', '\x5', 'N', '(', '\x2', 
		'\x233', '\x226', '\x3', '\x2', '\x2', '\x2', '\x233', '\x22A', '\x3', 
		'\x2', '\x2', '\x2', '\x233', '\x22F', '\x3', '\x2', '\x2', '\x2', '\x233', 
		'\x231', '\x3', '\x2', '\x2', '\x2', '\x234', 'S', '\x3', '\x2', '\x2', 
		'\x2', '\x235', '\x237', '\a', ',', '\x2', '\x2', '\x236', '\x238', '\a', 
		'&', '\x2', '\x2', '\x237', '\x236', '\x3', '\x2', '\x2', '\x2', '\x237', 
		'\x238', '\x3', '\x2', '\x2', '\x2', '\x238', '\x23C', '\x3', '\x2', '\x2', 
		'\x2', '\x239', '\x23A', '\a', 'Y', '\x2', '\x2', '\x23A', '\x23C', '\x5', 
		'N', '(', '\x2', '\x23B', '\x235', '\x3', '\x2', '\x2', '\x2', '\x23B', 
		'\x239', '\x3', '\x2', '\x2', '\x2', '\x23C', 'U', '\x3', '\x2', '\x2', 
		'\x2', '\x23D', '\x242', '\x5', 'X', '-', '\x2', '\x23E', '\x23F', '\a', 
		'G', '\x2', '\x2', '\x23F', '\x241', '\x5', 'X', '-', '\x2', '\x240', 
		'\x23E', '\x3', '\x2', '\x2', '\x2', '\x241', '\x244', '\x3', '\x2', '\x2', 
		'\x2', '\x242', '\x240', '\x3', '\x2', '\x2', '\x2', '\x242', '\x243', 
		'\x3', '\x2', '\x2', '\x2', '\x243', 'W', '\x3', '\x2', '\x2', '\x2', 
		'\x244', '\x242', '\x3', '\x2', '\x2', '\x2', '\x245', '\x246', '\t', 
		'\a', '\x2', '\x2', '\x246', 'Y', '\x3', '\x2', '\x2', '\x2', '\x247', 
		'\x24B', '\a', '\x43', '\x2', '\x2', '\x248', '\x249', '\x5', '\\', '/', 
		'\x2', '\x249', '\x24A', '\a', '\x45', '\x2', '\x2', '\x24A', '\x24C', 
		'\x3', '\x2', '\x2', '\x2', '\x24B', '\x248', '\x3', '\x2', '\x2', '\x2', 
		'\x24B', '\x24C', '\x3', '\x2', '\x2', '\x2', '\x24C', '\x24D', '\x3', 
		'\x2', '\x2', '\x2', '\x24D', '\x24E', '\x5', 'X', '-', '\x2', '\x24E', 
		'\x24F', '\x5', '\x62', '\x32', '\x2', '\x24F', '[', '\x3', '\x2', '\x2', 
		'\x2', '\x250', '\x254', '\x5', 'X', '-', '\x2', '\x251', '\x254', '\a', 
		'\x5', '\x2', '\x2', '\x252', '\x254', '\a', '\x4', '\x2', '\x2', '\x253', 
		'\x250', '\x3', '\x2', '\x2', '\x2', '\x253', '\x251', '\x3', '\x2', '\x2', 
		'\x2', '\x253', '\x252', '\x3', '\x2', '\x2', '\x2', '\x254', ']', '\x3', 
		'\x2', '\x2', '\x2', '\x255', '\x256', '\x5', '\x62', '\x32', '\x2', '\x256', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x257', '\x25C', '\x5', '\x36', '\x1C', 
		'\x2', '\x258', '\x259', '\a', 'L', '\x2', '\x2', '\x259', '\x25B', '\x5', 
		'\x36', '\x1C', '\x2', '\x25A', '\x258', '\x3', '\x2', '\x2', '\x2', '\x25B', 
		'\x25E', '\x3', '\x2', '\x2', '\x2', '\x25C', '\x25A', '\x3', '\x2', '\x2', 
		'\x2', '\x25C', '\x25D', '\x3', '\x2', '\x2', '\x2', '\x25D', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '\x25E', '\x25C', '\x3', '\x2', '\x2', '\x2', 
		'\x25F', '\x263', '\a', '/', '\x2', '\x2', '\x260', '\x262', '\a', '(', 
		'\x2', '\x2', '\x261', '\x260', '\x3', '\x2', '\x2', '\x2', '\x262', '\x265', 
		'\x3', '\x2', '\x2', '\x2', '\x263', '\x261', '\x3', '\x2', '\x2', '\x2', 
		'\x263', '\x264', '\x3', '\x2', '\x2', '\x2', '\x264', '\x266', '\x3', 
		'\x2', '\x2', '\x2', '\x265', '\x263', '\x3', '\x2', '\x2', '\x2', '\x266', 
		'\x267', '\a', '^', '\x2', '\x2', '\x267', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x268', '\x26C', '\a', '.', '\x2', '\x2', '\x269', '\x26B', '\a', 
		']', '\x2', '\x2', '\x26A', '\x269', '\x3', '\x2', '\x2', '\x2', '\x26B', 
		'\x26E', '\x3', '\x2', '\x2', '\x2', '\x26C', '\x26A', '\x3', '\x2', '\x2', 
		'\x2', '\x26C', '\x26D', '\x3', '\x2', '\x2', '\x2', '\x26D', '\x26F', 
		'\x3', '\x2', '\x2', '\x2', '\x26E', '\x26C', '\x3', '\x2', '\x2', '\x2', 
		'\x26F', '\x270', '\a', '[', '\x2', '\x2', '\x270', '\x65', '\x3', '\x2', 
		'\x2', '\x2', '\\', 'i', 'm', 'r', 'y', '~', '\x81', '\x86', '\x8F', '\x99', 
		'\xA3', '\xAD', '\xB7', '\xC5', '\xCE', '\xD5', '\xDB', '\xE2', '\xE9', 
		'\xEC', '\xF0', '\xF2', '\x101', '\x10F', '\x112', '\x116', '\x119', '\x11C', 
		'\x125', '\x127', '\x12B', '\x12E', '\x131', '\x138', '\x13C', '\x13F', 
		'\x142', '\x147', '\x14A', '\x14D', '\x151', '\x154', '\x158', '\x15B', 
		'\x15E', '\x163', '\x16A', '\x171', '\x17C', '\x184', '\x188', '\x18D', 
		'\x193', '\x197', '\x19C', '\x1A3', '\x1AC', '\x1B9', '\x1C3', '\x1C7', 
		'\x1CA', '\x1CE', '\x1D0', '\x1D5', '\x1D9', '\x1DC', '\x1E3', '\x1E6', 
		'\x1EA', '\x1ED', '\x1F6', '\x1FD', '\x204', '\x20B', '\x210', '\x213', 
		'\x216', '\x219', '\x21F', '\x224', '\x228', '\x22D', '\x233', '\x237', 
		'\x23B', '\x242', '\x24B', '\x253', '\x25C', '\x263', '\x26C',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace LanguageServer
